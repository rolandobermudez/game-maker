class _Q{constructor(_R){this._S=0;this._T=0;this.feedback=0;this._U=0;this.buffer=new Float32Array(_R);this._V=0;}process(_W){const out=this.buffer[this._V];this._U=(this._U*this._S)+(out*this._T);this.buffer[this._V]=_W+(this._U*this.feedback);++this._V;this._V%=this.buffer.length;return out;}_X(_Y){this.feedback=Math.min(Math.max(0,_Y),1);}_Z(__){this._S=Math.min(Math.max(0,__),1);this._T=1-this._S;}}class _01{constructor(_R){this.feedback=0;this.buffer=new Float32Array(_R);this._V=0;}process(_W){const out=this.buffer[this._V];
this.buffer[this._V]=_W+(out*this.feedback);++this._V;this._V%=this.buffer.length;return(out-_W);}_X(_Y){this.feedback=Math.min(Math.max(0,_Y),1);}}class _11 extends AudioWorkletProcessor{static _21=8;static _31=4;static _41=0.015;static _51=0.4;static _61=0.28;static _71=0.7;static _81=[1116,1188,1277,1356,1422,1491,1557,1617];static _91=[1139,1211,1300,1379,1445,1514,1580,1640];static _a1=[556,441,341,225];static _b1=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._f1=-1;this._g1=-1;this._h1=new Array(_e1);this._i1=new Array(_e1);const _j1=[_11._81,_11._91];const _k1=[_11._a1,_11._b1];for(let _l1=0;_l1<_e1;++_l1){
this._h1[_l1]=new Array(_11._21);this._i1[_l1]=new Array(_11._31);for(let _m1=0;_m1<_11._21;++_m1)this._h1[_l1][_m1]=new _Q(_j1[_l1%_j1.length][_m1]);for(let _m1=0;_m1<_11._31;++_m1)this._i1[_l1][_m1]=new _01(_k1[_l1%_k1.length][_m1]);}this._n1(0.5);this._Z(0.5);for(let _l1=0;_l1<_e1;++_l1)for(let _m1=0;_m1<_11._31;++_m1)this._i1[_l1][_m1]._X(0.5);}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){const _s1=(size[_s1]!==undefined)?size[_s1]:size[0];const _t1=(damp[_s1]!==undefined)?damp[_s1]:damp[0];this._n1(_s1);this._Z(_t1);_r1[_s1]=_q1[_s1];let out=0;const _u1=_q1[_s1]*_11._41;for(let _m1=0;_m1<_11._21;++_m1)out+=this._h1[_l1][_m1].process(_u1);for(let _m1=0;_m1<_11._31;++_m1)out=this._i1[_l1][_m1].process(out);const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0.0){continue;
}const _w1=(mix[_s1]!==undefined)?mix[_s1]:mix[0];_r1[_s1]*=(1-_w1);_r1[_s1]+=(out*_w1);}}return this._x1;}_n1(_R){if(_R===this._f1)return;const size=(_R*_11._61)+_11._71;for(let _l1=0;_l1<this._h1.length;++_l1)for(let _m1=0;_m1<_11._21;++_m1)this._h1[_l1][_m1]._X(size);this._f1=_R;}_Z(__){if(__===this._g1)return;const damp=__*_11._51;for(let _l1=0;_l1<this._h1.length;++_l1)for(let _m1=0;_m1<_11._21;++_m1)this._h1[_l1][_m1]._Z(damp);this._g1=__;}}registerProcessor("reverb1-processor",_11);class _y1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [];}constructor(){super();this._d1();}process(_z1,_A1,_B1){const input=_z1[0];const _C1=_A1[0];const _D1=_A1[1];for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _E1=_C1[_l1];const _F1=_D1[_l1];for(let _s1=0;_s1<_q1.length;++_s1){_E1[_s1]=_q1[_s1];_F1[_s1]=_q1[_s1];}}return this._x1;}}class _G1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();
this._d1();}process(_z1,_A1,_B1){const _H1=_z1[0];const _I1=_z1[1];const output=_A1[0];const bypass=_B1.bypass;for(let _l1=0;_l1<_I1.length;++_l1){const _J1=_H1[_l1];const _K1=_I1[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_J1.length;++_s1){const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0){_r1[_s1]=_K1[_s1];}else {_r1[_s1]=_J1[_s1];}}}return this._x1;}}registerProcessor("eq-input",_y1);registerProcessor("eq-output",_G1);class _L1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _M1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_M1),minValue:10.0,maxValue:_M1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=0;this._S1=new Float32Array(_e1);this._T1=new Float32Array(_e1);this._U1=new Float32Array(_e1);
this._V1=new Float32Array(_e1);this._W1=-1;this._X1=-1;}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _Y1=(cutoff.length===1&&q.length===1);if(_Y1)this._Z1(cutoff[0],q[0]);for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){if(_Y1===!1){const _l1=(cutoff[_s1]!==undefined)?cutoff[_s1]:cutoff[0];const __1=(q[_s1]!==undefined)?q[_s1]:q[0];
this._Z1(_l1,__1);}const _02=this._P1*_q1[_s1]+this._Q1*this._S1[_l1]+this._R1*this._T1[_l1]-this._N1*this._U1[_l1]-this._O1*this._V1[_l1];this._T1[_l1]=this._S1[_l1];this._S1[_l1]=_q1[_s1];this._V1[_l1]=this._U1[_l1];this._U1[_l1]=_02;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_r1[_s1]=(_v1>0)?_q1[_s1]:_02;}}return this._x1;}_Z1(_12,_22){if(_12===this._W1&&_22===this._X1)return;const _32=2*Math.PI*_12/sampleRate;const alpha=Math.sin(_32)/(2*_22);const _42=Math.cos(_32);const _52=1+alpha;
const _N1=-2*_42;const _O1=1-alpha;const _P1=(1-_42)/2;const _Q1=1-_42;const _R1=(1-_42)/2;this._N1=_N1/_52;this._O1=_O1/_52;this._P1=_P1/_52;this._Q1=_Q1/_52;this._R1=_R1/_52;this._W1=_12;this._X1=_22;}}registerProcessor("lpf2-processor",_L1);class _62 extends AudioWorkletProcessor{static get parameterDescriptors(){const _72=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_72),minValue:10.0,maxValue:_72},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=0;this._S1=new Float32Array(_e1);this._T1=new Float32Array(_e1);this._U1=new Float32Array(_e1);this._V1=new Float32Array(_e1);this._82=-1;this._X1=-1;this._92=-1;}process(_o1,_p1,parameters){const input=_o1[0];
const output=_p1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){if(_Y1===!1){const _a2=(freq[_s1]!==undefined)?freq[_s1]:freq[0];const __1=(q[_s1]!==undefined)?q[_s1]:q[0];const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];this._Z1(_a2,
__1,_b2);}const _02=this._P1*_q1[_s1]+this._Q1*this._S1[_l1]+this._R1*this._T1[_l1]-this._N1*this._U1[_l1]-this._O1*this._V1[_l1];this._T1[_l1]=this._S1[_l1];this._S1[_l1]=_q1[_s1];this._V1[_l1]=this._U1[_l1];this._U1[_l1]=_02;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_r1[_s1]=(_v1>0)?_q1[_s1]:_02;}}return this._x1;}_Z1(_c2,_22,_d2){if(_c2===this._82&&_22===this._X1&&_d2===this._92)return;const _32=2*Math.PI*_c2/sampleRate;const _42=Math.cos(_32);const _e2=Math.sqrt(_d2);const alpha=Math.sin(_32)/(2*_22);
const _f2=alpha/_e2;const _g2=alpha*_e2;const _52=1+_f2;const _N1=-2*_42;const _O1=1-_f2;const _P1=1+_g2;const _Q1=_N1;const _R1=1-_g2;this._N1=_N1/_52;this._O1=_O1/_52;this._P1=_P1/_52;this._Q1=_Q1/_52;this._R1=_R1/_52;this._82=_c2;this._X1=_22;this._92=_d2;}}registerProcessor("peak-eq-processor",_62);class _h2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._d1();}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){_r1[_s1]=_q1[_s1];const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0.0){continue;}const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];_r1[_s1]*=_b2;}}return this._x1;}}registerProcessor("gain-processor",
_h2);class _i2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _M1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_M1),minValue:10.0,maxValue:_M1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=0;
this._S1=new Float32Array(_e1);this._T1=new Float32Array(_e1);this._U1=new Float32Array(_e1);this._V1=new Float32Array(_e1);this._W1=-1;this._X1=-1;}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _Y1=(cutoff.length===1&&q.length===1);if(_Y1)this._Z1(cutoff[0],q[0]);for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){if(_Y1===!1){const _l1=(cutoff[_s1]!==undefined)?cutoff[_s1]:cutoff[0];
const __1=(q[_s1]!==undefined)?q[_s1]:q[0];this._Z1(_l1,__1);}const _02=this._P1*_q1[_s1]+this._Q1*this._S1[_l1]+this._R1*this._T1[_l1]-this._N1*this._U1[_l1]-this._O1*this._V1[_l1];this._T1[_l1]=this._S1[_l1];this._S1[_l1]=_q1[_s1];this._V1[_l1]=this._U1[_l1];this._U1[_l1]=_02;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_r1[_s1]=(_v1>0)?_q1[_s1]:_02;}}return this._x1;}_Z1(_12,_22){if(_12===this._W1&&_22===this._X1)return;const _32=2*Math.PI*_12/sampleRate;const alpha=Math.sin(_32)/(2*_22);
const _42=Math.cos(_32);const _52=1+alpha;const _N1=-2*_42;const _O1=1-alpha;const _P1=(1+_42)/2;const _Q1=-1-_42;const _R1=(1+_42)/2;this._N1=_N1/_52;this._O1=_O1/_52;this._P1=_P1/_52;this._Q1=_Q1/_52;this._R1=_R1/_52;this._W1=_12;this._X1=_22;}}registerProcessor("hpf2-processor",_i2);class _j2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _72=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_72),minValue:10.0,maxValue:_72},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=0;this._S1=new Float32Array(_e1);this._T1=new Float32Array(_e1);this._U1=new Float32Array(_e1);this._V1=new Float32Array(_e1);this._82=-1;this._X1=-1;this._92=-1;}process(_o1,
_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){if(_Y1===!1){const _a2=(freq[_s1]!==undefined)?freq[_s1]:freq[0];const __1=(q[_s1]!==undefined)?q[_s1]:q[0];const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];
this._Z1(_a2,__1,_b2);}const _02=this._P1*_q1[_s1]+this._Q1*this._S1[_l1]+this._R1*this._T1[_l1]-this._N1*this._U1[_l1]-this._O1*this._V1[_l1];this._T1[_l1]=this._S1[_l1];this._S1[_l1]=_q1[_s1];this._V1[_l1]=this._U1[_l1];this._U1[_l1]=_02;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_r1[_s1]=(_v1>0)?_q1[_s1]:_02;}}return this._x1;}_Z1(_c2,_22,_d2){if(_c2===this._82&&_22===this._X1&&_d2===this._92)return;const _32=2*Math.PI*_c2/sampleRate;const _42=Math.cos(_32);const _e2=Math.sqrt(_d2);const _k2=_e2+1;
const _l2=_e2-1;const _m2=_k2*_42;const _n2=_l2*_42;const _o2=_k2-_n2;const _p2=_k2+_n2;const alpha=Math.sin(_32)/(2*_22);const _q2=(2*Math.sqrt(_e2)*alpha);const _52=_o2+_q2;const _N1=2*(_l2-_m2);const _O1=_o2-_q2;const _P1=_e2*(_p2+_q2);const _Q1=-2*_e2*(_l2+_m2);const _R1=_e2*(_p2-_q2);this._N1=_N1/_52;this._O1=_O1/_52;this._P1=_P1/_52;this._Q1=_Q1/_52;this._R1=_R1/_52;this._82=_c2;this._X1=_22;this._92=_d2;}}registerProcessor("hi-shelf-processor",_j2);function _r2(){}_r2._s2={_t2:0,_u2:1,_v2:2,_w2:3,_x2:4,
_y2:5};_r2._z2=function(_A2){return 1.0-_A2;};_r2._B2=function(_A2){return _A2;};_r2._C2=function(_A2){return 0.5*(Math.sin((_A2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_r2._D2=function(_A2){if(_A2<0.5){return 0.0;}return 1.0;};_r2._E2=function(_A2){if(_A2<0.5){return 2.0*_A2;}return 2.0-(2.0*_A2);};_r2._F2=[_r2._z2,_r2._B2,_r2._C2,_r2._D2,_r2._E2];_G2._H2=512;_G2._I2=1.0/_G2._H2;function _G2(_J2){this.data=new Float32Array(_G2._H2);for(let _m1=0;_m1<_G2._H2;++_m1){this.data[_m1]=_J2(_m1*_G2._I2);}}_G2.prototype._K2=function(_A2){
_A2=Math.max(0.0,_A2);_A2=Math.min(_A2,1.0);const _L2=_A2*_G2._H2;const _M2=~~_L2;const _N2=_L2-_M2;let _O2=_M2;let _P2=_O2+1;if(_O2>=_G2._H2){_O2-=_G2._H2;}if(_P2>=_G2._H2){_P2-=_G2._H2;}const _Q2=this.data[_O2];const _R2=this.data[_P2];return _Q2+(_R2-_Q2)*_N2;};;_S2._T2=[];_S2._U2=!1;_S2._V2=0.0;_S2._72=20.0;function _S2(){this._W2=48000;this.shape=_r2._s2._v2;this.freq=1.0;this._X2=0.0;this._I2=0.0;this._Y2=0.0;if(_S2._U2==true){return;}for(let _m1=0;_m1<_r2._s2._y2;++_m1){_S2._T2[_m1]=new _G2(_r2._F2[_m1]);
}_S2._U2=true;}_S2._Z2=function(){return(_S2._U2==!0);};_S2.prototype.__2=function(_03){this._W2=_03;this._13();};;_S2.prototype._23=function(_c2){_c2=Math.max(_S2._V2,_c2);_c2=Math.min(_c2,_S2._72);this.freq=_c2;this._13();};;_S2.prototype._33=function(_43){_43=Math.max(0.0,_43);_43=Math.min(_43,1.0);const _53=_43-this._Y2;this._Y2=_43;this._X2+=_53;while(this._X2>=1.0){this._X2-=1.0;}while(this._X2<0.0){this._X2+=1.0;}};;_S2.prototype._63=function(_73){_73=Math.max(0,_73);_73=Math.min(_73,_r2._s2._y2-1);
this.shape=_73;};;_S2.prototype._K2=function(){const _83=_S2._T2[this.shape]._K2(this._X2);this._X2+=this._I2;while(this._X2>=1.0){this._X2-=1.0;}return _83;};;_S2.prototype._13=function(){this._I2=this.freq/this._W2;};;class _93 extends AudioWorkletProcessor{static _a3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_93._a3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];const _b3=(_93._a3*sampleRate)+1;this.buffer=new Array(_e1);this._c3=new Uint32Array(_e1);for(let _l1=0;_l1<_e1;++_l1)this.buffer[_l1]=new Float32Array(_b3);}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){_r1[_s1]=_q1[_s1];const _d3=(time[_s1]!==undefined)?time[_s1]:time[0];const _e3=this._K2(_l1,_d3);const _a2=(feedback[_s1]!==undefined)?feedback[_s1]:feedback[0];const _f3=_q1[_s1]+(_e3*_a2);this.write(_l1,_f3);const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0.0){continue;}const _w1=(mix[_s1]!==undefined)?mix[_s1]:mix[0];_r1[_s1]*=(1-_w1);_r1[_s1]+=(_e3*_w1);
}}return this._x1;}_K2(_g3,_h3){const _i3=_h3*sampleRate;let _O2=(this._c3[_g3]-~~_i3);let _P2=(_O2-1);while(_O2<0)_O2+=this.buffer[_g3].length;while(_P2<0)_P2+=this.buffer[_g3].length;const _j3=_i3-~~_i3;const _Q2=this.buffer[_g3][_O2];const _R2=this.buffer[_g3][_P2];return _Q2+(_R2-_Q2)*_j3;}write(_g3,_W){++this._c3[_g3];this._c3[_g3]%=this.buffer[_g3].length;this.buffer[_g3][this._c3[_g3]]=_W;}}registerProcessor("delay-processor",_93);AudioWorkletProcessor.prototype._d1=function(){this._x1=true;this.port.onmessage=(_k3)=>{
if(_k3.data==="kill")this._x1=false;};};;class _l3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._d1();}process(_o1,_p1,parameters){const input=_o1[0];const bypass=parameters.bypass;for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];for(let _s1=0;_s1<_q1.length;++_s1){const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_p1[_v1][_l1][_s1]=_q1[_s1];}}return this._x1;
}}class _m3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._d1();}process(_o1,_p1,parameters){const _H1=_o1[0];const _I1=_o1[1];const output=_p1[0];const gain=parameters.gain;for(let _l1=0;_l1<_I1.length;++_l1){const _q1=_I1[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1)_r1[_s1]=_q1[_s1];}for(let _l1=0;_l1<_H1.length;++_l1){const _q1=_H1[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;
++_s1){const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];_r1[_s1]+=_q1[_s1]*_b2;}}return this._x1;}}registerProcessor("audio-bus-input",_l3);registerProcessor("audio-bus-output",_m3);class _n3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _o3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._p3=new Float32Array(_e1);this._q3=new Uint32Array(_e1);}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){_r1[_s1]=_q1[_s1];if(this._q3[_l1]===0)this._p3[_l1]=_q1[_s1];const _a2=(factor[_s1]!==undefined)?factor[_s1]:factor[0];++this._q3[_l1];this._q3[_l1]%=_a2;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0.0){continue;}let _u1=this._p3[_l1];const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];_u1*=_b2;_u1=Math.max(Math.min(_u1,
1.0),-1.0);const _r3=(resolution[_s1]!==undefined)?resolution[_s1]:resolution[0];const max=(_u1>0.0)?_n3._o3[_r3]-1:_n3._o3[_r3];_u1=Math.round(_u1*max)/max;const _w1=(mix[_s1]!==undefined)?mix[_s1]:mix[0];_r1[_s1]*=(1.0-_w1);_r1[_s1]+=(_u1*_w1);}}return this._x1;}}registerProcessor("bitcrusher-processor",_n3);class _s3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._t3=new Array(_e1).fill(1.0);this._u3=new Array(_e1).fill(0.0);this._v3=new Array(_e1).fill(_r2._s2._t2);this._w3=new Array(_e1);for(let _l1=0;_l1<_e1;++_l1){
this._w3[_l1]=new _S2();this._w3[_l1].__2(sampleRate);this._w3[_l1]._23(this._t3[_l1]);this._w3[_l1]._63(this._v3[_l1]);if(_l1%2===1){this._w3[_l1]._33(this._u3[_l1]);}}}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){_r1[_s1]=_q1[_s1];
const _r3=(rate[_s1]!==undefined)?rate[_s1]:rate[0];const _x3=(offset[_s1]!==undefined)?offset[_s1]:offset[0];const _y3=(shape[_s1]!==undefined)?shape[_s1]:shape[0];this._z3(_l1,_r3,_x3,_y3);const _A3=this._w3[_l1]._K2();const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0.0){continue;}const _m1=(intensity[_s1]!==undefined)?intensity[_s1]:intensity[0];const out=_q1[_s1]*_A3*_m1;_r1[_s1]*=(1.0-_m1);_r1[_s1]+=out;}}return this._x1;}_z3(_g3,_B3,_43,_73){if(_B3!==this._t3[_g3]){this._w3[_g3]._23(_B3);
this._t3[_g3]=_B3;}if(_43!==this._u3[_g3]){if(_g3%2===1){this._w3[_g3]._33(_43);}this._u3[_g3]=_43;}if(_73!==this._v3[_g3]){this._w3[_g3]._63(_73);this._v3[_g3]=_73;}}}registerProcessor("tremolo-processor",_s3);class _C3{constructor(_h3=1e-3){this.setTime(_h3);}setTime(_h3){this._D3=Math.exp(-1/(_h3*sampleRate));}process(_E3,_F3){return _E3+this._D3*(_F3-_E3);}}class _G3{constructor(_H3,_I3){this._J3=new _C3(_H3);this._K3=new _C3(_I3);this._L3=_H3;this._M3=_I3;}_N3(_h3){if(_h3===this._L3)return;this._J3.setTime(_h3);
this._L3=_h3;}_O3(_h3){if(_h3===this._M3)return;this._K3.setTime(_h3);this._M3=_h3;}process(_E3,_F3){if(_E3>_F3)return this._J3.process(_E3,_F3);else return this._K3.process(_E3,_F3);}}class _P3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_Q3){super();this._d1();const _J3=_P3.parameterDescriptors.find(_R3=>_R3.name==="attack");const _K3=_P3.parameterDescriptors.find(_R3=>_R3.name==="release");this._S3=new _G3(_J3.defaultValue,_K3.defaultValue);
this._T3=0;}process(_U3,_V3,_W3){const input=_U3[0];const output=_V3[0];const bypass=_W3.bypass;const ingain=_W3.ingain;const outgain=_W3.outgain;const threshold=_W3.threshold;const ratio=_W3.ratio;const attack=_W3.attack;const release=_W3.release;if(input.length===0)return this._x1;for(let _s1=0;_s1<input[0].length;++_s1){let _X3=input.map(_Y3=>_Y3[_s1]);output.forEach((_Y3,_Z3)=>{_Y3[_s1]=_X3[_Z3];});const __3=(ingain[_s1]!==undefined)?ingain[_s1]:ingain[0];_X3=_X3.map(_04=>_04*=__3);const rect=_X3.map(_04=>Math.abs(_04));
const max=Math.max(...rect);const _14=_24(max);const _d3=(threshold[_s1]!==undefined)?threshold[_s1]:threshold[0];const _34=_24(_d3);const _44=Math.max(0,_14-_34);const _J3=(attack[_s1]!==undefined)?attack[_s1]:attack[0];const _K3=(release[_s1]!==undefined)?release[_s1]:release[0];this._S3._N3(_J3);this._S3._O3(_K3);this._T3=this._S3.process(_44,this._T3);const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];if(_v1>0)continue;const _r3=(ratio[_s1]!==undefined)?ratio[_s1]:ratio[0];const _54=(this._T3/_r3)-this._T3;
const _b2=_64(_54);_X3=_X3.map(_04=>_04*=_b2);const _74=(outgain[_s1]!==undefined)?outgain[_s1]:outgain[0];_X3=_X3.map(_04=>_04*=_74);output.forEach((_Y3,_Z3)=>{_Y3[_s1]=_X3[_Z3];});}return this._x1;}}function _24(_84){return 20*Math.log10(_84);}function _64(_84){return Math.pow(10,_84/20);}registerProcessor("compressor-processor",_P3);class _94 extends AudioWorkletProcessor{static get parameterDescriptors(){const _72=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_72),minValue:10.0,maxValue:_72},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_c1){super();this._d1();const _e1=_c1.outputChannelCount[0];this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=0;this._S1=new Float32Array(_e1);this._T1=new Float32Array(_e1);this._U1=new Float32Array(_e1);this._V1=new Float32Array(_e1);
this._82=-1;this._X1=-1;this._92=-1;}process(_o1,_p1,parameters){const input=_o1[0];const output=_p1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let _l1=0;_l1<input.length;++_l1){const _q1=input[_l1];const _r1=output[_l1];for(let _s1=0;_s1<_q1.length;++_s1){if(_Y1===!1){const _a2=(freq[_s1]!==undefined)?freq[_s1]:freq[0];const __1=(q[_s1]!==undefined)?q[_s1]:q[0];
const _b2=(gain[_s1]!==undefined)?gain[_s1]:gain[0];this._Z1(_a2,__1,_b2);}const _02=this._P1*_q1[_s1]+this._Q1*this._S1[_l1]+this._R1*this._T1[_l1]-this._N1*this._U1[_l1]-this._O1*this._V1[_l1];this._T1[_l1]=this._S1[_l1];this._S1[_l1]=_q1[_s1];this._V1[_l1]=this._U1[_l1];this._U1[_l1]=_02;const _v1=(bypass[_s1]!==undefined)?bypass[_s1]:bypass[0];_r1[_s1]=(_v1>0)?_q1[_s1]:_02;}}return this._x1;}_Z1(_c2,_22,_d2){if(_c2===this._82&&_22===this._X1&&_d2===this._92)return;const _32=2*Math.PI*_c2/sampleRate;
const _42=Math.cos(_32);const _e2=Math.sqrt(_d2);const _k2=_e2+1;const _l2=_e2-1;const _m2=_k2*_42;const _n2=_l2*_42;const _o2=_k2-_n2;const _p2=_k2+_n2;const alpha=Math.sin(_32)/(2*_22);const _q2=(2*Math.sqrt(_e2)*alpha);const _52=_p2+_q2;const _N1=-2*(_l2+_m2);const _O1=_p2-_q2;const _P1=_e2*(_o2+_q2);const _Q1=2*_e2*(_l2-_m2);const _R1=_e2*(_o2-_q2);this._N1=_N1/_52;this._O1=_O1/_52;this._P1=_P1/_52;this._Q1=_Q1/_52;this._R1=_R1/_52;this._82=_c2;this._X1=_22;this._92=_d2;}}registerProcessor("lo-shelf-processor",
_94);