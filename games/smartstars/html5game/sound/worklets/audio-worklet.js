class _l{constructor(_m){this._n=0;this._o=0;this.feedback=0;this._p=0;this.buffer=new Float32Array(_m);this._q=0;}process(_r){const out=this.buffer[this._q];this._p=(this._p*this._n)+(out*this._o);this.buffer[this._q]=_r+(this._p*this.feedback);++this._q;this._q%=this.buffer.length;return out;}_s(_t){this.feedback=Math.min(Math.max(0,_t),1);}_u(_v){this._n=Math.min(Math.max(0,_v),1);this._o=1-this._n;}}class _w{constructor(_m){this.feedback=0;this.buffer=new Float32Array(_m);this._q=0;}process(_r){const out=this.buffer[this._q];
this.buffer[this._q]=_r+(out*this.feedback);++this._q;this._q%=this.buffer.length;return(out-_r);}_s(_t){this.feedback=Math.min(Math.max(0,_t),1);}}class _x extends AudioWorkletProcessor{static _y=8;static _z=4;static _A=0.015;static _B=0.4;static _C=0.28;static _D=0.7;static _E=[1116,1188,1277,1356,1422,1491,1557,1617];static _F=[1139,1211,1300,1379,1445,1514,1580,1640];static _G=[556,441,341,225];static _H=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._L=-1;this._M=-1;this._N=new Array(_K);this._O=new Array(_K);const _P=[_x._E,_x._F];const _Q=[_x._G,_x._H];for(let _R=0;_R<_K;++_R){this._N[_R]=new Array(_x._y);this._O[_R]=new Array(_x._z);
for(let _S=0;_S<_x._y;++_S)this._N[_R][_S]=new _l(_P[_R%_P.length][_S]);for(let _S=0;_S<_x._z;++_S)this._O[_R][_S]=new _w(_Q[_R%_Q.length][_S]);}this._T(0.5);this._u(0.5);for(let _R=0;_R<_K;++_R)for(let _S=0;_S<_x._z;++_S)this._O[_R][_S]._s(0.5);}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;
++_Y){const _Y=(size[_Y]!==undefined)?size[_Y]:size[0];const _Z=(damp[_Y]!==undefined)?damp[_Y]:damp[0];this._T(_Y);this._u(_Z);_X[_Y]=_W[_Y];let out=0;const __=_W[_Y]*_x._A;for(let _S=0;_S<_x._y;++_S)out+=this._N[_R][_S].process(__);for(let _S=0;_S<_x._z;++_S)out=this._O[_R][_S].process(out);const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0.0){continue;}const _11=(mix[_Y]!==undefined)?mix[_Y]:mix[0];_X[_Y]*=(1-_11);_X[_Y]+=(out*_11);}}return this._21;}_T(_m){if(_m===this._L)return;const size=(_m*_x._C)+_x._D;
for(let _R=0;_R<this._N.length;++_R)for(let _S=0;_S<_x._y;++_S)this._N[_R][_S]._s(size);this._L=_m;}_u(_v){if(_v===this._M)return;const damp=_v*_x._B;for(let _R=0;_R<this._N.length;++_R)for(let _S=0;_S<_x._y;++_S)this._N[_R][_S]._u(damp);this._M=_v;}}registerProcessor("reverb1-processor",_x);class _31 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._J();}process(_41,_51,_61){const input=_41[0];const _71=_51[0];const _81=_51[1];for(let _R=0;_R<input.length;++_R){
const _W=input[_R];const _91=_71[_R];const _a1=_81[_R];for(let _Y=0;_Y<_W.length;++_Y){_91[_Y]=_W[_Y];_a1[_Y]=_W[_Y];}}return this._21;}}class _b1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._J();}process(_41,_51,_61){const _c1=_41[0];const _d1=_41[1];const output=_51[0];const bypass=_61.bypass;for(let _R=0;_R<_d1.length;++_R){const _e1=_c1[_R];const _f1=_d1[_R];const _X=output[_R];
for(let _Y=0;_Y<_e1.length;++_Y){const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0){_X[_Y]=_f1[_Y];}else {_X[_Y]=_e1[_Y];}}}return this._21;}}registerProcessor("eq-input",_31);registerProcessor("eq-output",_b1);class _g1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _h1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_h1),minValue:10.0,
maxValue:_h1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_K);this._o1=new Float32Array(_K);this._p1=new Float32Array(_K);this._q1=new Float32Array(_K);this._r1=-1;this._s1=-1;}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _t1=(cutoff.length===1&&q.length===1);if(_t1)this._u1(cutoff[0],q[0]);for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){if(_t1===!1){const _R=(cutoff[_Y]!==undefined)?cutoff[_Y]:cutoff[0];const _v1=(q[_Y]!==undefined)?q[_Y]:q[0];this._u1(_R,_v1);}const _w1=this._k1*_W[_Y]+this._l1*this._n1[_R]+this._m1*this._o1[_R]-this._i1*this._p1[_R]-this._j1*this._q1[_R];this._o1[_R]=this._n1[_R];this._n1[_R]=_W[_Y];this._q1[_R]=this._p1[_R];this._p1[_R]=_w1;
const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_X[_Y]=(_01>0)?_W[_Y]:_w1;}}return this._21;}_u1(_x1,_y1){if(_x1===this._r1&&_y1===this._s1)return;const _z1=2*Math.PI*_x1/sampleRate;const alpha=Math.sin(_z1)/(2*_y1);const _A1=Math.cos(_z1);const _B1=1+alpha;const _i1=-2*_A1;const _j1=1-alpha;const _k1=(1-_A1)/2;const _l1=1-_A1;const _m1=(1-_A1)/2;this._i1=_i1/_B1;this._j1=_j1/_B1;this._k1=_k1/_B1;this._l1=_l1/_B1;this._m1=_m1/_B1;this._r1=_x1;this._s1=_y1;}}registerProcessor("lpf2-processor",_g1);class _C1 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _D1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_D1),minValue:10.0,maxValue:_D1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;
this._l1=0;this._m1=0;this._n1=new Float32Array(_K);this._o1=new Float32Array(_K);this._p1=new Float32Array(_K);this._q1=new Float32Array(_K);this._E1=-1;this._s1=-1;this._F1=-1;}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _t1=(freq.length===1&&q.length===1&&gain.length===1);if(_t1)this._u1(freq[0],q[0],gain[0]);for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];
for(let _Y=0;_Y<_W.length;++_Y){if(_t1===!1){const _G1=(freq[_Y]!==undefined)?freq[_Y]:freq[0];const _v1=(q[_Y]!==undefined)?q[_Y]:q[0];const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];this._u1(_G1,_v1,_H1);}const _w1=this._k1*_W[_Y]+this._l1*this._n1[_R]+this._m1*this._o1[_R]-this._i1*this._p1[_R]-this._j1*this._q1[_R];this._o1[_R]=this._n1[_R];this._n1[_R]=_W[_Y];this._q1[_R]=this._p1[_R];this._p1[_R]=_w1;const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_X[_Y]=(_01>0)?_W[_Y]:_w1;}}return this._21;
}_u1(_I1,_y1,_J1){if(_I1===this._E1&&_y1===this._s1&&_J1===this._F1)return;const _z1=2*Math.PI*_I1/sampleRate;const _A1=Math.cos(_z1);const _K1=Math.sqrt(_J1);const alpha=Math.sin(_z1)/(2*_y1);const _L1=alpha/_K1;const _M1=alpha*_K1;const _B1=1+_L1;const _i1=-2*_A1;const _j1=1-_L1;const _k1=1+_M1;const _l1=_i1;const _m1=1-_M1;this._i1=_i1/_B1;this._j1=_j1/_B1;this._k1=_k1/_B1;this._l1=_l1/_B1;this._m1=_m1/_B1;this._E1=_I1;this._s1=_y1;this._F1=_J1;}}registerProcessor("peak-eq-processor",_C1);class _N1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._J();}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){_X[_Y]=_W[_Y];const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];
if(_01>0.0){continue;}const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];_X[_Y]*=_H1;}}return this._21;}}registerProcessor("gain-processor",_N1);class _O1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _h1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_h1),minValue:10.0,maxValue:_h1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_K);this._o1=new Float32Array(_K);this._p1=new Float32Array(_K);this._q1=new Float32Array(_K);this._r1=-1;this._s1=-1;}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _t1=(cutoff.length===1&&q.length===1);if(_t1)this._u1(cutoff[0],q[0]);for(let _R=0;
_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){if(_t1===!1){const _R=(cutoff[_Y]!==undefined)?cutoff[_Y]:cutoff[0];const _v1=(q[_Y]!==undefined)?q[_Y]:q[0];this._u1(_R,_v1);}const _w1=this._k1*_W[_Y]+this._l1*this._n1[_R]+this._m1*this._o1[_R]-this._i1*this._p1[_R]-this._j1*this._q1[_R];this._o1[_R]=this._n1[_R];this._n1[_R]=_W[_Y];this._q1[_R]=this._p1[_R];this._p1[_R]=_w1;const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_X[_Y]=(_01>0)?_W[_Y]:_w1;}}
return this._21;}_u1(_x1,_y1){if(_x1===this._r1&&_y1===this._s1)return;const _z1=2*Math.PI*_x1/sampleRate;const alpha=Math.sin(_z1)/(2*_y1);const _A1=Math.cos(_z1);const _B1=1+alpha;const _i1=-2*_A1;const _j1=1-alpha;const _k1=(1+_A1)/2;const _l1=-1-_A1;const _m1=(1+_A1)/2;this._i1=_i1/_B1;this._j1=_j1/_B1;this._k1=_k1/_B1;this._l1=_l1/_B1;this._m1=_m1/_B1;this._r1=_x1;this._s1=_y1;}}registerProcessor("hpf2-processor",_O1);class _P1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _D1=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_D1),minValue:10.0,maxValue:_D1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_K);this._o1=new Float32Array(_K);
this._p1=new Float32Array(_K);this._q1=new Float32Array(_K);this._E1=-1;this._s1=-1;this._F1=-1;}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _t1=(freq.length===1&&q.length===1&&gain.length===1);if(_t1)this._u1(freq[0],q[0],gain[0]);for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){if(_t1===!1){const _G1=(freq[_Y]!==undefined)?freq[_Y]:freq[0];
const _v1=(q[_Y]!==undefined)?q[_Y]:q[0];const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];this._u1(_G1,_v1,_H1);}const _w1=this._k1*_W[_Y]+this._l1*this._n1[_R]+this._m1*this._o1[_R]-this._i1*this._p1[_R]-this._j1*this._q1[_R];this._o1[_R]=this._n1[_R];this._n1[_R]=_W[_Y];this._q1[_R]=this._p1[_R];this._p1[_R]=_w1;const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_X[_Y]=(_01>0)?_W[_Y]:_w1;}}return this._21;}_u1(_I1,_y1,_J1){if(_I1===this._E1&&_y1===this._s1&&_J1===this._F1)return;const _z1=2*Math.PI*_I1/sampleRate;
const _A1=Math.cos(_z1);const _K1=Math.sqrt(_J1);const _Q1=_K1+1;const _R1=_K1-1;const _S1=_Q1*_A1;const _T1=_R1*_A1;const _U1=_Q1-_T1;const _V1=_Q1+_T1;const alpha=Math.sin(_z1)/(2*_y1);const _W1=(2*Math.sqrt(_K1)*alpha);const _B1=_U1+_W1;const _i1=2*(_R1-_S1);const _j1=_U1-_W1;const _k1=_K1*(_V1+_W1);const _l1=-2*_K1*(_R1+_S1);const _m1=_K1*(_V1-_W1);this._i1=_i1/_B1;this._j1=_j1/_B1;this._k1=_k1/_B1;this._l1=_l1/_B1;this._m1=_m1/_B1;this._E1=_I1;this._s1=_y1;this._F1=_J1;}}registerProcessor("hi-shelf-processor",
_P1);function _X1(){}_X1._Y1={_Z1:0,__1:1,_02:2,_12:3,_22:4,_32:5};_X1._42=function(_52){return 1.0-_52;};_X1._62=function(_52){return _52;};_X1._72=function(_52){return 0.5*(Math.sin((_52*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_X1._82=function(_52){if(_52<0.5){return 0.0;}return 1.0;};_X1._92=function(_52){if(_52<0.5){return 2.0*_52;}return 2.0-(2.0*_52);};_X1._a2=[_X1._42,_X1._62,_X1._72,_X1._82,_X1._92];_b2._c2=512;_b2._d2=1.0/_b2._c2;function _b2(_e2){this.data=new Float32Array(_b2._c2);for(let _S=0;_S<_b2._c2;
++_S){this.data[_S]=_e2(_S*_b2._d2);}}_b2.prototype._f2=function(_52){_52=Math.max(0.0,_52);_52=Math.min(_52,1.0);const _g2=_52*_b2._c2;const _h2=~~_g2;const _i2=_g2-_h2;let _j2=_h2;let _k2=_j2+1;if(_j2>=_b2._c2){_j2-=_b2._c2;}if(_k2>=_b2._c2){_k2-=_b2._c2;}const _l2=this.data[_j2];const _m2=this.data[_k2];return _l2+(_m2-_l2)*_i2;};;_n2._o2=[];_n2._p2=!1;_n2._q2=0.0;_n2._D1=20.0;function _n2(){this._r2=48000;this.shape=_X1._Y1._02;this.freq=1.0;this._s2=0.0;this._d2=0.0;this._t2=0.0;if(_n2._p2==true){return;
}for(let _S=0;_S<_X1._Y1._32;++_S){_n2._o2[_S]=new _b2(_X1._a2[_S]);}_n2._p2=true;}_n2._u2=function(){return(_n2._p2==!0);};_n2.prototype._v2=function(_w2){this._r2=_w2;this._x2();};;_n2.prototype._y2=function(_I1){_I1=Math.max(_n2._q2,_I1);_I1=Math.min(_I1,_n2._D1);this.freq=_I1;this._x2();};;_n2.prototype._z2=function(_A2){_A2=Math.max(0.0,_A2);_A2=Math.min(_A2,1.0);const _B2=_A2-this._t2;this._t2=_A2;this._s2+=_B2;while(this._s2>=1.0){this._s2-=1.0;}while(this._s2<0.0){this._s2+=1.0;}};;_n2.prototype._C2=function(_D2){
_D2=Math.max(0,_D2);_D2=Math.min(_D2,_X1._Y1._32-1);this.shape=_D2;};;_n2.prototype._f2=function(){const _E2=_n2._o2[this.shape]._f2(this._s2);this._s2+=this._d2;while(this._s2>=1.0){this._s2-=1.0;}return _E2;};;_n2.prototype._x2=function(){this._d2=this.freq/this._r2;};;class _F2 extends AudioWorkletProcessor{static _G2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,
maxValue:_F2._G2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];const _H2=(_F2._G2*sampleRate)+1;this.buffer=new Array(_K);this._I2=new Uint32Array(_K);for(let _R=0;_R<_K;++_R)this.buffer[_R]=new Float32Array(_H2);}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const time=parameters.time;
const feedback=parameters.feedback;const mix=parameters.mix;for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){_X[_Y]=_W[_Y];const _J2=(time[_Y]!==undefined)?time[_Y]:time[0];const _K2=this._f2(_R,_J2);const _G1=(feedback[_Y]!==undefined)?feedback[_Y]:feedback[0];const _L2=_W[_Y]+(_K2*_G1);this.write(_R,_L2);const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0.0){continue;}const _11=(mix[_Y]!==undefined)?mix[_Y]:mix[0];_X[_Y]*=(1-_11);_X[_Y]+=(_K2*_11);
}}return this._21;}_f2(_M2,_N2){const _O2=_N2*sampleRate;let _j2=(this._I2[_M2]-~~_O2);let _k2=(_j2-1);while(_j2<0)_j2+=this.buffer[_M2].length;while(_k2<0)_k2+=this.buffer[_M2].length;const _P2=_O2-~~_O2;const _l2=this.buffer[_M2][_j2];const _m2=this.buffer[_M2][_k2];return _l2+(_m2-_l2)*_P2;}write(_M2,_r){++this._I2[_M2];this._I2[_M2]%=this.buffer[_M2].length;this.buffer[_M2][this._I2[_M2]]=_r;}}registerProcessor("delay-processor",_F2);AudioWorkletProcessor.prototype._J=function(){this._21=true;this.port.onmessage=(_Q2)=>{
if(_Q2.data==="kill")this._21=false;};};;class _R2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._J();}process(_U,_V,parameters){const input=_U[0];const bypass=parameters.bypass;for(let _R=0;_R<input.length;++_R){const _W=input[_R];for(let _Y=0;_Y<_W.length;++_Y){const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_V[_01][_R][_Y]=_W[_Y];}}return this._21;}}class _S2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._J();}process(_U,_V,parameters){const _c1=_U[0];const _d1=_U[1];const output=_V[0];const gain=parameters.gain;for(let _R=0;_R<_d1.length;++_R){const _W=_d1[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y)_X[_Y]=_W[_Y];}for(let _R=0;_R<_c1.length;++_R){const _W=_c1[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];_X[_Y]+=_W[_Y]*_H1;
}}return this._21;}}registerProcessor("audio-bus-input",_R2);registerProcessor("audio-bus-output",_S2);class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",
defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _U2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._V2=new Float32Array(_K);this._W2=new Uint32Array(_K);}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _R=0;_R<input.length;++_R){
const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){_X[_Y]=_W[_Y];if(this._W2[_R]===0)this._V2[_R]=_W[_Y];const _G1=(factor[_Y]!==undefined)?factor[_Y]:factor[0];++this._W2[_R];this._W2[_R]%=_G1;const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0.0){continue;}let __=this._V2[_R];const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];__*=_H1;__=Math.max(Math.min(__,1.0),-1.0);const _X2=(resolution[_Y]!==undefined)?resolution[_Y]:resolution[0];const max=(__>0.0)?_T2._U2[_X2]-1:_T2._U2[_X2];
__=Math.round(__*max)/max;const _11=(mix[_Y]!==undefined)?mix[_Y]:mix[0];_X[_Y]*=(1.0-_11);_X[_Y]+=(__*_11);}}return this._21;}}registerProcessor("bitcrusher-processor",_T2);class _Y2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",
automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._Z2=new Array(_K).fill(1.0);this.__2=new Array(_K).fill(0.0);this._03=new Array(_K).fill(_X1._Y1._Z1);this._13=new Array(_K);for(let _R=0;_R<_K;++_R){this._13[_R]=new _n2();this._13[_R]._v2(sampleRate);this._13[_R]._y2(this._Z2[_R]);this._13[_R]._C2(this._03[_R]);if(_R%2===1){this._13[_R]._z2(this.__2[_R]);
}}}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){_X[_Y]=_W[_Y];const _X2=(rate[_Y]!==undefined)?rate[_Y]:rate[0];const _23=(offset[_Y]!==undefined)?offset[_Y]:offset[0];const _33=(shape[_Y]!==undefined)?shape[_Y]:shape[0];this._43(_R,_X2,
_23,_33);const _53=this._13[_R]._f2();const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0.0){continue;}const _S=(intensity[_Y]!==undefined)?intensity[_Y]:intensity[0];const out=_W[_Y]*_53*_S;_X[_Y]*=(1.0-_S);_X[_Y]+=out;}}return this._21;}_43(_M2,_63,_A2,_D2){if(_63!==this._Z2[_M2]){this._13[_M2]._y2(_63);this._Z2[_M2]=_63;}if(_A2!==this.__2[_M2]){if(_M2%2===1){this._13[_M2]._z2(_A2);}this.__2[_M2]=_A2;}if(_D2!==this._03[_M2]){this._13[_M2]._C2(_D2);this._03[_M2]=_D2;}}}registerProcessor("tremolo-processor",
_Y2);class _73{constructor(_N2=1e-3){this.setTime(_N2);}setTime(_N2){this._83=Math.exp(-1/(_N2*sampleRate));}process(_93,_a3){return _93+this._83*(_a3-_93);}}class _b3{constructor(_c3,_d3){this._e3=new _73(_c3);this._f3=new _73(_d3);this._g3=_c3;this._h3=_d3;}_i3(_N2){if(_N2===this._g3)return;this._e3.setTime(_N2);this._g3=_N2;}_j3(_N2){if(_N2===this._h3)return;this._f3.setTime(_N2);this._h3=_N2;}process(_93,_a3){if(_93>_a3)return this._e3.process(_93,_a3);else return this._f3.process(_93,_a3);}}class _k3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1}
,{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_l3){super();this._J();const _e3=_k3.parameterDescriptors.find(_m3=>_m3.name==="attack");const _f3=_k3.parameterDescriptors.find(_m3=>_m3.name==="release");this._n3=new _b3(_e3.defaultValue,_f3.defaultValue);this._o3=0;}process(_p3,_q3,_r3){const input=_p3[0];const output=_q3[0];const bypass=_r3.bypass;const ingain=_r3.ingain;const outgain=_r3.outgain;const threshold=_r3.threshold;const ratio=_r3.ratio;const attack=_r3.attack;
const release=_r3.release;if(input.length===0)return this._21;for(let _Y=0;_Y<input[0].length;++_Y){let _s3=input.map(_t3=>_t3[_Y]);output.forEach((_t3,_u3)=>{_t3[_Y]=_s3[_u3];});const _v3=(ingain[_Y]!==undefined)?ingain[_Y]:ingain[0];_s3=_s3.map(_w3=>_w3*=_v3);const rect=_s3.map(_w3=>Math.abs(_w3));const max=Math.max(...rect);const _x3=_y3(max);const _J2=(threshold[_Y]!==undefined)?threshold[_Y]:threshold[0];const _z3=_y3(_J2);const _A3=Math.max(0,_x3-_z3);const _e3=(attack[_Y]!==undefined)?attack[_Y]:attack[0];
const _f3=(release[_Y]!==undefined)?release[_Y]:release[0];this._n3._i3(_e3);this._n3._j3(_f3);this._o3=this._n3.process(_A3,this._o3);const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];if(_01>0)continue;const _X2=(ratio[_Y]!==undefined)?ratio[_Y]:ratio[0];const _B3=(this._o3/_X2)-this._o3;const _H1=_C3(_B3);_s3=_s3.map(_w3=>_w3*=_H1);const _D3=(outgain[_Y]!==undefined)?outgain[_Y]:outgain[0];_s3=_s3.map(_w3=>_w3*=_D3);output.forEach((_t3,_u3)=>{_t3[_Y]=_s3[_u3];});}return this._21;}}function _y3(_E3){
return 20*Math.log10(_E3);}function _C3(_E3){return Math.pow(10,_E3/20);}registerProcessor("compressor-processor",_k3);class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _D1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_D1),minValue:10.0,maxValue:_D1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",
automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_I){super();this._J();const _K=_I.outputChannelCount[0];this._i1=0;this._j1=0;this._k1=0;this._l1=0;this._m1=0;this._n1=new Float32Array(_K);this._o1=new Float32Array(_K);this._p1=new Float32Array(_K);this._q1=new Float32Array(_K);this._E1=-1;this._s1=-1;this._F1=-1;}process(_U,_V,parameters){const input=_U[0];const output=_V[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _t1=(freq.length===1&&q.length===1&&gain.length===1);
if(_t1)this._u1(freq[0],q[0],gain[0]);for(let _R=0;_R<input.length;++_R){const _W=input[_R];const _X=output[_R];for(let _Y=0;_Y<_W.length;++_Y){if(_t1===!1){const _G1=(freq[_Y]!==undefined)?freq[_Y]:freq[0];const _v1=(q[_Y]!==undefined)?q[_Y]:q[0];const _H1=(gain[_Y]!==undefined)?gain[_Y]:gain[0];this._u1(_G1,_v1,_H1);}const _w1=this._k1*_W[_Y]+this._l1*this._n1[_R]+this._m1*this._o1[_R]-this._i1*this._p1[_R]-this._j1*this._q1[_R];this._o1[_R]=this._n1[_R];this._n1[_R]=_W[_Y];this._q1[_R]=this._p1[_R];this._p1[_R]=_w1;
const _01=(bypass[_Y]!==undefined)?bypass[_Y]:bypass[0];_X[_Y]=(_01>0)?_W[_Y]:_w1;}}return this._21;}_u1(_I1,_y1,_J1){if(_I1===this._E1&&_y1===this._s1&&_J1===this._F1)return;const _z1=2*Math.PI*_I1/sampleRate;const _A1=Math.cos(_z1);const _K1=Math.sqrt(_J1);const _Q1=_K1+1;const _R1=_K1-1;const _S1=_Q1*_A1;const _T1=_R1*_A1;const _U1=_Q1-_T1;const _V1=_Q1+_T1;const alpha=Math.sin(_z1)/(2*_y1);const _W1=(2*Math.sqrt(_K1)*alpha);const _B1=_V1+_W1;const _i1=-2*(_R1+_S1);const _j1=_V1-_W1;const _k1=_K1*(_U1+_W1);const _l1=2*_K1*(_R1-_S1);
const _m1=_K1*(_U1-_W1);this._i1=_i1/_B1;this._j1=_j1/_B1;this._k1=_k1/_B1;this._l1=_l1/_B1;this._m1=_m1/_B1;this._E1=_I1;this._s1=_y1;this._F1=_J1;}}registerProcessor("lo-shelf-processor",_F3);