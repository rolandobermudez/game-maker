class _r1{constructor(_s1){this._t1=0;this._u1=0;this.feedback=0;this._v1=0;this.buffer=new Float32Array(_s1);this._w1=0;}process(_x1){const out=this.buffer[this._w1];this._v1=(this._v1*this._t1)+(out*this._u1);this.buffer[this._w1]=_x1+(this._v1*this.feedback);++this._w1;this._w1%=this.buffer.length;return out;}_y1(_z1){this.feedback=Math.min(Math.max(0,_z1),1);}_A1(_B1){this._t1=Math.min(Math.max(0,_B1),1);this._u1=1-this._t1;}}class _C1{constructor(_s1){this.feedback=0;this.buffer=new Float32Array(_s1);
this._w1=0;}process(_x1){const out=this.buffer[this._w1];this.buffer[this._w1]=_x1+(out*this.feedback);++this._w1;this._w1%=this.buffer.length;return(out-_x1);}_y1(_z1){this.feedback=Math.min(Math.max(0,_z1),1);}}class _D1 extends AudioWorkletProcessor{static _E1=8;static _F1=4;static _G1=0.015;static _H1=0.4;static _I1=0.28;static _J1=0.7;static _K1=[1116,1188,1277,1356,1422,1491,1557,1617];static _L1=[1139,1211,1300,1379,1445,1514,1580,1640];static _M1=[556,441,341,225];static _N1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._R1=-1;this._S1=-1;this._T1=new Array(_Q1);this._U1=new Array(_Q1);const _V1=[_D1._K1,_D1._L1];const _W1=[_D1._M1,
_D1._N1];for(let _X1=0;_X1<_Q1;++_X1){this._T1[_X1]=new Array(_D1._E1);this._U1[_X1]=new Array(_D1._F1);for(let _Y1=0;_Y1<_D1._E1;++_Y1)this._T1[_X1][_Y1]=new _r1(_V1[_X1%_V1.length][_Y1]);for(let _Y1=0;_Y1<_D1._F1;++_Y1)this._U1[_X1][_Y1]=new _C1(_W1[_X1%_W1.length][_Y1]);}this._Z1(0.5);this._A1(0.5);for(let _X1=0;_X1<_Q1;++_X1)for(let _Y1=0;_Y1<_D1._F1;++_Y1)this._U1[_X1][_Y1]._y1(0.5);}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){const _32=(size[_32]!==undefined)?size[_32]:size[0];const _42=(damp[_32]!==undefined)?damp[_32]:damp[0];this._Z1(_32);this._A1(_42);_22[_32]=_12[_32];let out=0;const _52=_12[_32]*_D1._G1;for(let _Y1=0;_Y1<_D1._E1;++_Y1)out+=this._T1[_X1][_Y1].process(_52);for(let _Y1=0;_Y1<_D1._F1;++_Y1)out=this._U1[_X1][_Y1].process(out);const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];
if(_62>0.0){continue;}const _72=(mix[_32]!==undefined)?mix[_32]:mix[0];_22[_32]*=(1-_72);_22[_32]+=(out*_72);}}return this._82;}_Z1(_s1){if(_s1===this._R1)return;const size=(_s1*_D1._I1)+_D1._J1;for(let _X1=0;_X1<this._T1.length;++_X1)for(let _Y1=0;_Y1<_D1._E1;++_Y1)this._T1[_X1][_Y1]._y1(size);this._R1=_s1;}_A1(_B1){if(_B1===this._S1)return;const damp=_B1*_D1._H1;for(let _X1=0;_X1<this._T1.length;++_X1)for(let _Y1=0;_Y1<_D1._E1;++_Y1)this._T1[_X1][_Y1]._A1(damp);this._S1=_B1;}}registerProcessor("reverb1-processor",
_D1);class _92 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._P1();}process(_a2,_b2,_c2){const input=_a2[0];const _d2=_b2[0];const _e2=_b2[1];for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _f2=_d2[_X1];const _g2=_e2[_X1];for(let _32=0;_32<_12.length;++_32){_f2[_32]=_12[_32];_g2[_32]=_12[_32];}}return this._82;}}class _h2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._P1();}process(_a2,_b2,_c2){const _i2=_a2[0];const _j2=_a2[1];const output=_b2[0];const bypass=_c2.bypass;for(let _X1=0;_X1<_j2.length;++_X1){const _k2=_i2[_X1];const _l2=_j2[_X1];const _22=output[_X1];for(let _32=0;_32<_k2.length;++_32){const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0){_22[_32]=_l2[_32];}else {_22[_32]=_k2[_32];}}}return this._82;}}registerProcessor("eq-input",_92);registerProcessor("eq-output",_h2);class _m2 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _n2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_n2),minValue:10.0,maxValue:_n2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._o2=0;this._p2=0;this._q2=0;this._r2=0;this._s2=0;this._t2=new Float32Array(_Q1);this._u2=new Float32Array(_Q1);
this._v2=new Float32Array(_Q1);this._w2=new Float32Array(_Q1);this._x2=-1;this._y2=-1;}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _z2=(cutoff.length===1&&q.length===1);if(_z2)this._A2(cutoff[0],q[0]);for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){if(_z2===!1){const _X1=(cutoff[_32]!==undefined)?cutoff[_32]:cutoff[0];const _B2=(q[_32]!==undefined)?q[_32]:q[0];
this._A2(_X1,_B2);}const _C2=this._q2*_12[_32]+this._r2*this._t2[_X1]+this._s2*this._u2[_X1]-this._o2*this._v2[_X1]-this._p2*this._w2[_X1];this._u2[_X1]=this._t2[_X1];this._t2[_X1]=_12[_32];this._w2[_X1]=this._v2[_X1];this._v2[_X1]=_C2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_22[_32]=(_62>0)?_12[_32]:_C2;}}return this._82;}_A2(_D2,_E2){if(_D2===this._x2&&_E2===this._y2)return;const _F2=2*Math.PI*_D2/sampleRate;const alpha=Math.sin(_F2)/(2*_E2);const _G2=Math.cos(_F2);const _H2=1+alpha;
const _o2=-2*_G2;const _p2=1-alpha;const _q2=(1-_G2)/2;const _r2=1-_G2;const _s2=(1-_G2)/2;this._o2=_o2/_H2;this._p2=_p2/_H2;this._q2=_q2/_H2;this._r2=_r2/_H2;this._s2=_s2/_H2;this._x2=_D2;this._y2=_E2;}}registerProcessor("lpf2-processor",_m2);class _I2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_J2),minValue:10.0,maxValue:_J2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._o2=0;this._p2=0;this._q2=0;this._r2=0;this._s2=0;this._t2=new Float32Array(_Q1);this._u2=new Float32Array(_Q1);this._v2=new Float32Array(_Q1);this._w2=new Float32Array(_Q1);this._K2=-1;this._y2=-1;this._L2=-1;}process(__1,_02,parameters){const input=__1[0];
const output=_02[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _z2=(freq.length===1&&q.length===1&&gain.length===1);if(_z2)this._A2(freq[0],q[0],gain[0]);for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){if(_z2===!1){const _M2=(freq[_32]!==undefined)?freq[_32]:freq[0];const _B2=(q[_32]!==undefined)?q[_32]:q[0];const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];this._A2(_M2,
_B2,_N2);}const _C2=this._q2*_12[_32]+this._r2*this._t2[_X1]+this._s2*this._u2[_X1]-this._o2*this._v2[_X1]-this._p2*this._w2[_X1];this._u2[_X1]=this._t2[_X1];this._t2[_X1]=_12[_32];this._w2[_X1]=this._v2[_X1];this._v2[_X1]=_C2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_22[_32]=(_62>0)?_12[_32]:_C2;}}return this._82;}_A2(_O2,_E2,_P2){if(_O2===this._K2&&_E2===this._y2&&_P2===this._L2)return;const _F2=2*Math.PI*_O2/sampleRate;const _G2=Math.cos(_F2);const _Q2=Math.sqrt(_P2);const alpha=Math.sin(_F2)/(2*_E2);
const _R2=alpha/_Q2;const _S2=alpha*_Q2;const _H2=1+_R2;const _o2=-2*_G2;const _p2=1-_R2;const _q2=1+_S2;const _r2=_o2;const _s2=1-_S2;this._o2=_o2/_H2;this._p2=_p2/_H2;this._q2=_q2/_H2;this._r2=_r2/_H2;this._s2=_s2/_H2;this._K2=_O2;this._y2=_E2;this._L2=_P2;}}registerProcessor("peak-eq-processor",_I2);class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._P1();}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){_22[_32]=_12[_32];const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0.0){continue;}const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];_22[_32]*=_N2;}}return this._82;}}registerProcessor("gain-processor",
_T2);class _U2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _n2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_n2),minValue:10.0,maxValue:_n2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._o2=0;this._p2=0;this._q2=0;this._r2=0;this._s2=0;
this._t2=new Float32Array(_Q1);this._u2=new Float32Array(_Q1);this._v2=new Float32Array(_Q1);this._w2=new Float32Array(_Q1);this._x2=-1;this._y2=-1;}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _z2=(cutoff.length===1&&q.length===1);if(_z2)this._A2(cutoff[0],q[0]);for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){if(_z2===!1){const _X1=(cutoff[_32]!==undefined)?cutoff[_32]:cutoff[0];
const _B2=(q[_32]!==undefined)?q[_32]:q[0];this._A2(_X1,_B2);}const _C2=this._q2*_12[_32]+this._r2*this._t2[_X1]+this._s2*this._u2[_X1]-this._o2*this._v2[_X1]-this._p2*this._w2[_X1];this._u2[_X1]=this._t2[_X1];this._t2[_X1]=_12[_32];this._w2[_X1]=this._v2[_X1];this._v2[_X1]=_C2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_22[_32]=(_62>0)?_12[_32]:_C2;}}return this._82;}_A2(_D2,_E2){if(_D2===this._x2&&_E2===this._y2)return;const _F2=2*Math.PI*_D2/sampleRate;const alpha=Math.sin(_F2)/(2*_E2);
const _G2=Math.cos(_F2);const _H2=1+alpha;const _o2=-2*_G2;const _p2=1-alpha;const _q2=(1+_G2)/2;const _r2=-1-_G2;const _s2=(1+_G2)/2;this._o2=_o2/_H2;this._p2=_p2/_H2;this._q2=_q2/_H2;this._r2=_r2/_H2;this._s2=_s2/_H2;this._x2=_D2;this._y2=_E2;}}registerProcessor("hpf2-processor",_U2);class _V2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_J2),minValue:10.0,maxValue:_J2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._o2=0;this._p2=0;this._q2=0;this._r2=0;this._s2=0;this._t2=new Float32Array(_Q1);this._u2=new Float32Array(_Q1);this._v2=new Float32Array(_Q1);this._w2=new Float32Array(_Q1);this._K2=-1;this._y2=-1;this._L2=-1;}process(__1,
_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _z2=(freq.length===1&&q.length===1&&gain.length===1);if(_z2)this._A2(freq[0],q[0],gain[0]);for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){if(_z2===!1){const _M2=(freq[_32]!==undefined)?freq[_32]:freq[0];const _B2=(q[_32]!==undefined)?q[_32]:q[0];const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];
this._A2(_M2,_B2,_N2);}const _C2=this._q2*_12[_32]+this._r2*this._t2[_X1]+this._s2*this._u2[_X1]-this._o2*this._v2[_X1]-this._p2*this._w2[_X1];this._u2[_X1]=this._t2[_X1];this._t2[_X1]=_12[_32];this._w2[_X1]=this._v2[_X1];this._v2[_X1]=_C2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_22[_32]=(_62>0)?_12[_32]:_C2;}}return this._82;}_A2(_O2,_E2,_P2){if(_O2===this._K2&&_E2===this._y2&&_P2===this._L2)return;const _F2=2*Math.PI*_O2/sampleRate;const _G2=Math.cos(_F2);const _Q2=Math.sqrt(_P2);const _W2=_Q2+1;
const _X2=_Q2-1;const _Y2=_W2*_G2;const _Z2=_X2*_G2;const __2=_W2-_Z2;const _03=_W2+_Z2;const alpha=Math.sin(_F2)/(2*_E2);const _13=(2*Math.sqrt(_Q2)*alpha);const _H2=__2+_13;const _o2=2*(_X2-_Y2);const _p2=__2-_13;const _q2=_Q2*(_03+_13);const _r2=-2*_Q2*(_X2+_Y2);const _s2=_Q2*(_03-_13);this._o2=_o2/_H2;this._p2=_p2/_H2;this._q2=_q2/_H2;this._r2=_r2/_H2;this._s2=_s2/_H2;this._K2=_O2;this._y2=_E2;this._L2=_P2;}}registerProcessor("hi-shelf-processor",_V2);function _23(){}_23._33={_43:0,_53:1,_63:2,_73:3,_83:4,
_93:5};_23._a3=function(_b3){return 1.0-_b3;};_23._c3=function(_b3){return _b3;};_23._d3=function(_b3){return 0.5*(Math.sin((_b3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_23._e3=function(_b3){if(_b3<0.5){return 0.0;}return 1.0;};_23._f3=function(_b3){if(_b3<0.5){return 2.0*_b3;}return 2.0-(2.0*_b3);};_23._g3=[_23._a3,_23._c3,_23._d3,_23._e3,_23._f3];_h3._i3=512;_h3._j3=1.0/_h3._i3;function _h3(_k3){this.data=new Float32Array(_h3._i3);for(let _Y1=0;_Y1<_h3._i3;++_Y1){this.data[_Y1]=_k3(_Y1*_h3._j3);}}_h3.prototype._l3=function(_b3){
_b3=Math.max(0.0,_b3);_b3=Math.min(_b3,1.0);const _m3=_b3*_h3._i3;const _n3=~~_m3;const _o3=_m3-_n3;let _p3=_n3;let _q3=_p3+1;if(_p3>=_h3._i3){_p3-=_h3._i3;}if(_q3>=_h3._i3){_q3-=_h3._i3;}const _r3=this.data[_p3];const _s3=this.data[_q3];return _r3+(_s3-_r3)*_o3;};;_t3._u3=[];_t3._v3=!1;_t3._w3=0.0;_t3._J2=20.0;function _t3(){this._x3=48000;this.shape=_23._33._63;this.freq=1.0;this._y3=0.0;this._j3=0.0;this._z3=0.0;if(_t3._v3==true){return;}for(let _Y1=0;_Y1<_23._33._93;++_Y1){_t3._u3[_Y1]=new _h3(_23._g3[_Y1]);
}_t3._v3=true;}_t3._A3=function(){return(_t3._v3==!0);};_t3.prototype._B3=function(_C3){this._x3=_C3;this._D3();};;_t3.prototype._E3=function(_O2){_O2=Math.max(_t3._w3,_O2);_O2=Math.min(_O2,_t3._J2);this.freq=_O2;this._D3();};;_t3.prototype._F3=function(_G3){_G3=Math.max(0.0,_G3);_G3=Math.min(_G3,1.0);const _H3=_G3-this._z3;this._z3=_G3;this._y3+=_H3;while(this._y3>=1.0){this._y3-=1.0;}while(this._y3<0.0){this._y3+=1.0;}};;_t3.prototype._I3=function(_J3){_J3=Math.max(0,_J3);_J3=Math.min(_J3,_23._33._93-1);
this.shape=_J3;};;_t3.prototype._l3=function(){const _K3=_t3._u3[this.shape]._l3(this._y3);this._y3+=this._j3;while(this._y3>=1.0){this._y3-=1.0;}return _K3;};;_t3.prototype._D3=function(){this._j3=this.freq/this._x3;};;class _L3 extends AudioWorkletProcessor{static _M3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_L3._M3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];const _N3=(_L3._M3*sampleRate)+1;this.buffer=new Array(_Q1);this._O3=new Uint32Array(_Q1);for(let _X1=0;_X1<_Q1;++_X1)this.buffer[_X1]=new Float32Array(_N3);}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){_22[_32]=_12[_32];const _P3=(time[_32]!==undefined)?time[_32]:time[0];const _Q3=this._l3(_X1,_P3);const _M2=(feedback[_32]!==undefined)?feedback[_32]:feedback[0];const _R3=_12[_32]+(_Q3*_M2);this.write(_X1,_R3);const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0.0){continue;}const _72=(mix[_32]!==undefined)?mix[_32]:mix[0];_22[_32]*=(1-_72);_22[_32]+=(_Q3*_72);
}}return this._82;}_l3(_S3,_T3){const _U3=_T3*sampleRate;let _p3=(this._O3[_S3]-~~_U3);let _q3=(_p3-1);while(_p3<0)_p3+=this.buffer[_S3].length;while(_q3<0)_q3+=this.buffer[_S3].length;const _V3=_U3-~~_U3;const _r3=this.buffer[_S3][_p3];const _s3=this.buffer[_S3][_q3];return _r3+(_s3-_r3)*_V3;}write(_S3,_x1){++this._O3[_S3];this._O3[_S3]%=this.buffer[_S3].length;this.buffer[_S3][this._O3[_S3]]=_x1;}}registerProcessor("delay-processor",_L3);AudioWorkletProcessor.prototype._P1=function(){this._82=true;this.port.onmessage=(_W3)=>{
if(_W3.data==="kill")this._82=false;};};;class _X3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._P1();}process(__1,_02,parameters){const input=__1[0];const bypass=parameters.bypass;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];for(let _32=0;_32<_12.length;++_32){const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_02[_62][_X1][_32]=_12[_32];}}return this._82;
}}class _Y3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._P1();}process(__1,_02,parameters){const _i2=__1[0];const _j2=__1[1];const output=_02[0];const gain=parameters.gain;for(let _X1=0;_X1<_j2.length;++_X1){const _12=_j2[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32)_22[_32]=_12[_32];}for(let _X1=0;_X1<_i2.length;++_X1){const _12=_i2[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;
++_32){const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];_22[_32]+=_12[_32]*_N2;}}return this._82;}}registerProcessor("audio-bus-input",_X3);registerProcessor("audio-bus-output",_Y3);class _Z3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static __3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._04=new Float32Array(_Q1);this._14=new Uint32Array(_Q1);}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){_22[_32]=_12[_32];if(this._14[_X1]===0)this._04[_X1]=_12[_32];const _M2=(factor[_32]!==undefined)?factor[_32]:factor[0];++this._14[_X1];this._14[_X1]%=_M2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0.0){continue;}let _52=this._04[_X1];const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];_52*=_N2;_52=Math.max(Math.min(_52,
1.0),-1.0);const _24=(resolution[_32]!==undefined)?resolution[_32]:resolution[0];const max=(_52>0.0)?_Z3.__3[_24]-1:_Z3.__3[_24];_52=Math.round(_52*max)/max;const _72=(mix[_32]!==undefined)?mix[_32]:mix[0];_22[_32]*=(1.0-_72);_22[_32]+=(_52*_72);}}return this._82;}}registerProcessor("bitcrusher-processor",_Z3);class _34 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._44=new Array(_Q1).fill(1.0);this._54=new Array(_Q1).fill(0.0);this._64=new Array(_Q1).fill(_23._33._43);this._74=new Array(_Q1);for(let _X1=0;_X1<_Q1;++_X1){
this._74[_X1]=new _t3();this._74[_X1]._B3(sampleRate);this._74[_X1]._E3(this._44[_X1]);this._74[_X1]._I3(this._64[_X1]);if(_X1%2===1){this._74[_X1]._F3(this._54[_X1]);}}}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){_22[_32]=_12[_32];
const _24=(rate[_32]!==undefined)?rate[_32]:rate[0];const _84=(offset[_32]!==undefined)?offset[_32]:offset[0];const _94=(shape[_32]!==undefined)?shape[_32]:shape[0];this._a4(_X1,_24,_84,_94);const _b4=this._74[_X1]._l3();const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0.0){continue;}const _Y1=(intensity[_32]!==undefined)?intensity[_32]:intensity[0];const out=_12[_32]*_b4*_Y1;_22[_32]*=(1.0-_Y1);_22[_32]+=out;}}return this._82;}_a4(_S3,_c4,_G3,_J3){if(_c4!==this._44[_S3]){this._74[_S3]._E3(_c4);
this._44[_S3]=_c4;}if(_G3!==this._54[_S3]){if(_S3%2===1){this._74[_S3]._F3(_G3);}this._54[_S3]=_G3;}if(_J3!==this._64[_S3]){this._74[_S3]._I3(_J3);this._64[_S3]=_J3;}}}registerProcessor("tremolo-processor",_34);class _d4{constructor(_T3=1e-3){this.setTime(_T3);}setTime(_T3){this._e4=Math.exp(-1/(_T3*sampleRate));}process(_f4,_g4){return _f4+this._e4*(_g4-_f4);}}class _h4{constructor(_i4,_j4){this._k4=new _d4(_i4);this._l4=new _d4(_j4);this._m4=_i4;this._n4=_j4;}_o4(_T3){if(_T3===this._m4)return;this._k4.setTime(_T3);
this._m4=_T3;}_p4(_T3){if(_T3===this._n4)return;this._l4.setTime(_T3);this._n4=_T3;}process(_f4,_g4){if(_f4>_g4)return this._k4.process(_f4,_g4);else return this._l4.process(_f4,_g4);}}class _q4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_r4){super();this._P1();const _k4=_q4.parameterDescriptors.find(_s4=>_s4.name==="attack");const _l4=_q4.parameterDescriptors.find(_s4=>_s4.name==="release");this._t4=new _h4(_k4.defaultValue,_l4.defaultValue);
this._u4=0;}process(_v4,_w4,_x4){const input=_v4[0];const output=_w4[0];const bypass=_x4.bypass;const ingain=_x4.ingain;const outgain=_x4.outgain;const threshold=_x4.threshold;const ratio=_x4.ratio;const attack=_x4.attack;const release=_x4.release;if(input.length===0)return this._82;for(let _32=0;_32<input[0].length;++_32){let _y4=input.map(_z4=>_z4[_32]);output.forEach((_z4,_A4)=>{_z4[_32]=_y4[_A4];});const _B4=(ingain[_32]!==undefined)?ingain[_32]:ingain[0];_y4=_y4.map(_C4=>_C4*=_B4);const rect=_y4.map(_C4=>Math.abs(_C4));
const max=Math.max(...rect);const _D4=_E4(max);const _P3=(threshold[_32]!==undefined)?threshold[_32]:threshold[0];const _F4=_E4(_P3);const _G4=Math.max(0,_D4-_F4);const _k4=(attack[_32]!==undefined)?attack[_32]:attack[0];const _l4=(release[_32]!==undefined)?release[_32]:release[0];this._t4._o4(_k4);this._t4._p4(_l4);this._u4=this._t4.process(_G4,this._u4);const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];if(_62>0)continue;const _24=(ratio[_32]!==undefined)?ratio[_32]:ratio[0];const _H4=(this._u4/_24)-this._u4;
const _N2=_I4(_H4);_y4=_y4.map(_C4=>_C4*=_N2);const _J4=(outgain[_32]!==undefined)?outgain[_32]:outgain[0];_y4=_y4.map(_C4=>_C4*=_J4);output.forEach((_z4,_A4)=>{_z4[_32]=_y4[_A4];});}return this._82;}}function _E4(_K4){return 20*Math.log10(_K4);}function _I4(_K4){return Math.pow(10,_K4/20);}registerProcessor("compressor-processor",_q4);class _L4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_J2),minValue:10.0,maxValue:_J2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._P1();const _Q1=_O1.outputChannelCount[0];this._o2=0;this._p2=0;this._q2=0;this._r2=0;this._s2=0;this._t2=new Float32Array(_Q1);this._u2=new Float32Array(_Q1);this._v2=new Float32Array(_Q1);this._w2=new Float32Array(_Q1);
this._K2=-1;this._y2=-1;this._L2=-1;}process(__1,_02,parameters){const input=__1[0];const output=_02[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _z2=(freq.length===1&&q.length===1&&gain.length===1);if(_z2)this._A2(freq[0],q[0],gain[0]);for(let _X1=0;_X1<input.length;++_X1){const _12=input[_X1];const _22=output[_X1];for(let _32=0;_32<_12.length;++_32){if(_z2===!1){const _M2=(freq[_32]!==undefined)?freq[_32]:freq[0];const _B2=(q[_32]!==undefined)?q[_32]:q[0];
const _N2=(gain[_32]!==undefined)?gain[_32]:gain[0];this._A2(_M2,_B2,_N2);}const _C2=this._q2*_12[_32]+this._r2*this._t2[_X1]+this._s2*this._u2[_X1]-this._o2*this._v2[_X1]-this._p2*this._w2[_X1];this._u2[_X1]=this._t2[_X1];this._t2[_X1]=_12[_32];this._w2[_X1]=this._v2[_X1];this._v2[_X1]=_C2;const _62=(bypass[_32]!==undefined)?bypass[_32]:bypass[0];_22[_32]=(_62>0)?_12[_32]:_C2;}}return this._82;}_A2(_O2,_E2,_P2){if(_O2===this._K2&&_E2===this._y2&&_P2===this._L2)return;const _F2=2*Math.PI*_O2/sampleRate;
const _G2=Math.cos(_F2);const _Q2=Math.sqrt(_P2);const _W2=_Q2+1;const _X2=_Q2-1;const _Y2=_W2*_G2;const _Z2=_X2*_G2;const __2=_W2-_Z2;const _03=_W2+_Z2;const alpha=Math.sin(_F2)/(2*_E2);const _13=(2*Math.sqrt(_Q2)*alpha);const _H2=_03+_13;const _o2=-2*(_X2+_Y2);const _p2=_03-_13;const _q2=_Q2*(__2+_13);const _r2=2*_Q2*(_X2-_Y2);const _s2=_Q2*(__2-_13);this._o2=_o2/_H2;this._p2=_p2/_H2;this._q2=_q2/_H2;this._r2=_r2/_H2;this._s2=_s2/_H2;this._K2=_O2;this._y2=_E2;this._L2=_P2;}}registerProcessor("lo-shelf-processor",
_L4);