class _N{constructor(_O){this._P=0;this._Q=0;this.feedback=0;this._R=0;this.buffer=new Float32Array(_O);this._S=0;}process(_T){const out=this.buffer[this._S];this._R=(this._R*this._P)+(out*this._Q);this.buffer[this._S]=_T+(this._R*this.feedback);++this._S;this._S%=this.buffer.length;return out;}_U(_V){this.feedback=Math.min(Math.max(0,_V),1);}_W(_X){this._P=Math.min(Math.max(0,_X),1);this._Q=1-this._P;}}class _Y{constructor(_O){this.feedback=0;this.buffer=new Float32Array(_O);this._S=0;}process(_T){const out=this.buffer[this._S];
this.buffer[this._S]=_T+(out*this.feedback);++this._S;this._S%=this.buffer.length;return(out-_T);}_U(_V){this.feedback=Math.min(Math.max(0,_V),1);}}class _Z extends AudioWorkletProcessor{static __=8;static _01=4;static _11=0.015;static _21=0.4;static _31=0.28;static _41=0.7;static _51=[1116,1188,1277,1356,1422,1491,1557,1617];static _61=[1139,1211,1300,1379,1445,1514,1580,1640];static _71=[556,441,341,225];static _81=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._c1=-1;this._d1=-1;this._e1=new Array(_b1);this._f1=new Array(_b1);const _g1=[_Z._51,_Z._61];const _h1=[_Z._71,_Z._81];for(let _i1=0;_i1<_b1;++_i1){
this._e1[_i1]=new Array(_Z.__);this._f1[_i1]=new Array(_Z._01);for(let _j1=0;_j1<_Z.__;++_j1)this._e1[_i1][_j1]=new _N(_g1[_i1%_g1.length][_j1]);for(let _j1=0;_j1<_Z._01;++_j1)this._f1[_i1][_j1]=new _Y(_h1[_i1%_h1.length][_j1]);}this._k1(0.5);this._W(0.5);for(let _i1=0;_i1<_b1;++_i1)for(let _j1=0;_j1<_Z._01;++_j1)this._f1[_i1][_j1]._U(0.5);}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){const _p1=(size[_p1]!==undefined)?size[_p1]:size[0];const _q1=(damp[_p1]!==undefined)?damp[_p1]:damp[0];this._k1(_p1);this._W(_q1);_o1[_p1]=_n1[_p1];let out=0;const _r1=_n1[_p1]*_Z._11;for(let _j1=0;_j1<_Z.__;++_j1)out+=this._e1[_i1][_j1].process(_r1);for(let _j1=0;_j1<_Z._01;++_j1)out=this._f1[_i1][_j1].process(out);const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0.0){continue;
}const _t1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];_o1[_p1]*=(1-_t1);_o1[_p1]+=(out*_t1);}}return this._u1;}_k1(_O){if(_O===this._c1)return;const size=(_O*_Z._31)+_Z._41;for(let _i1=0;_i1<this._e1.length;++_i1)for(let _j1=0;_j1<_Z.__;++_j1)this._e1[_i1][_j1]._U(size);this._c1=_O;}_W(_X){if(_X===this._d1)return;const damp=_X*_Z._21;for(let _i1=0;_i1<this._e1.length;++_i1)for(let _j1=0;_j1<_Z.__;++_j1)this._e1[_i1][_j1]._W(damp);this._d1=_X;}}registerProcessor("reverb1-processor",_Z);class _v1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [];}constructor(){super();this._a1();}process(_w1,_x1,_y1){const input=_w1[0];const _z1=_x1[0];const _A1=_x1[1];for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _B1=_z1[_i1];const _C1=_A1[_i1];for(let _p1=0;_p1<_n1.length;++_p1){_B1[_p1]=_n1[_p1];_C1[_p1]=_n1[_p1];}}return this._u1;}}class _D1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();
this._a1();}process(_w1,_x1,_y1){const _E1=_w1[0];const _F1=_w1[1];const output=_x1[0];const bypass=_y1.bypass;for(let _i1=0;_i1<_F1.length;++_i1){const _G1=_E1[_i1];const _H1=_F1[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_G1.length;++_p1){const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0){_o1[_p1]=_H1[_p1];}else {_o1[_p1]=_G1[_p1];}}}return this._u1;}}registerProcessor("eq-input",_v1);registerProcessor("eq-output",_D1);class _I1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _J1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_J1),minValue:10.0,maxValue:_J1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=new Float32Array(_b1);this._Q1=new Float32Array(_b1);this._R1=new Float32Array(_b1);
this._S1=new Float32Array(_b1);this._T1=-1;this._U1=-1;}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _V1=(cutoff.length===1&&q.length===1);if(_V1)this._W1(cutoff[0],q[0]);for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){if(_V1===!1){const _i1=(cutoff[_p1]!==undefined)?cutoff[_p1]:cutoff[0];const _X1=(q[_p1]!==undefined)?q[_p1]:q[0];
this._W1(_i1,_X1);}const _Y1=this._M1*_n1[_p1]+this._N1*this._P1[_i1]+this._O1*this._Q1[_i1]-this._K1*this._R1[_i1]-this._L1*this._S1[_i1];this._Q1[_i1]=this._P1[_i1];this._P1[_i1]=_n1[_p1];this._S1[_i1]=this._R1[_i1];this._R1[_i1]=_Y1;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_o1[_p1]=(_s1>0)?_n1[_p1]:_Y1;}}return this._u1;}_W1(_Z1,__1){if(_Z1===this._T1&&__1===this._U1)return;const _02=2*Math.PI*_Z1/sampleRate;const alpha=Math.sin(_02)/(2*__1);const _12=Math.cos(_02);const _22=1+alpha;
const _K1=-2*_12;const _L1=1-alpha;const _M1=(1-_12)/2;const _N1=1-_12;const _O1=(1-_12)/2;this._K1=_K1/_22;this._L1=_L1/_22;this._M1=_M1/_22;this._N1=_N1/_22;this._O1=_O1/_22;this._T1=_Z1;this._U1=__1;}}registerProcessor("lpf2-processor",_I1);class _32 extends AudioWorkletProcessor{static get parameterDescriptors(){const _42=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_42),minValue:10.0,maxValue:_42},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=new Float32Array(_b1);this._Q1=new Float32Array(_b1);this._R1=new Float32Array(_b1);this._S1=new Float32Array(_b1);this._52=-1;this._U1=-1;this._62=-1;}process(_l1,_m1,parameters){const input=_l1[0];
const output=_m1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){if(_V1===!1){const _72=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _X1=(q[_p1]!==undefined)?q[_p1]:q[0];const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];this._W1(_72,
_X1,_82);}const _Y1=this._M1*_n1[_p1]+this._N1*this._P1[_i1]+this._O1*this._Q1[_i1]-this._K1*this._R1[_i1]-this._L1*this._S1[_i1];this._Q1[_i1]=this._P1[_i1];this._P1[_i1]=_n1[_p1];this._S1[_i1]=this._R1[_i1];this._R1[_i1]=_Y1;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_o1[_p1]=(_s1>0)?_n1[_p1]:_Y1;}}return this._u1;}_W1(_92,__1,_a2){if(_92===this._52&&__1===this._U1&&_a2===this._62)return;const _02=2*Math.PI*_92/sampleRate;const _12=Math.cos(_02);const _b2=Math.sqrt(_a2);const alpha=Math.sin(_02)/(2*__1);
const _c2=alpha/_b2;const _d2=alpha*_b2;const _22=1+_c2;const _K1=-2*_12;const _L1=1-_c2;const _M1=1+_d2;const _N1=_K1;const _O1=1-_d2;this._K1=_K1/_22;this._L1=_L1/_22;this._M1=_M1/_22;this._N1=_N1/_22;this._O1=_O1/_22;this._52=_92;this._U1=__1;this._62=_a2;}}registerProcessor("peak-eq-processor",_32);class _e2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._a1();}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){_o1[_p1]=_n1[_p1];const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0.0){continue;}const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];_o1[_p1]*=_82;}}return this._u1;}}registerProcessor("gain-processor",
_e2);class _f2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _J1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_J1),minValue:10.0,maxValue:_J1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=0;
this._P1=new Float32Array(_b1);this._Q1=new Float32Array(_b1);this._R1=new Float32Array(_b1);this._S1=new Float32Array(_b1);this._T1=-1;this._U1=-1;}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _V1=(cutoff.length===1&&q.length===1);if(_V1)this._W1(cutoff[0],q[0]);for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){if(_V1===!1){const _i1=(cutoff[_p1]!==undefined)?cutoff[_p1]:cutoff[0];
const _X1=(q[_p1]!==undefined)?q[_p1]:q[0];this._W1(_i1,_X1);}const _Y1=this._M1*_n1[_p1]+this._N1*this._P1[_i1]+this._O1*this._Q1[_i1]-this._K1*this._R1[_i1]-this._L1*this._S1[_i1];this._Q1[_i1]=this._P1[_i1];this._P1[_i1]=_n1[_p1];this._S1[_i1]=this._R1[_i1];this._R1[_i1]=_Y1;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_o1[_p1]=(_s1>0)?_n1[_p1]:_Y1;}}return this._u1;}_W1(_Z1,__1){if(_Z1===this._T1&&__1===this._U1)return;const _02=2*Math.PI*_Z1/sampleRate;const alpha=Math.sin(_02)/(2*__1);
const _12=Math.cos(_02);const _22=1+alpha;const _K1=-2*_12;const _L1=1-alpha;const _M1=(1+_12)/2;const _N1=-1-_12;const _O1=(1+_12)/2;this._K1=_K1/_22;this._L1=_L1/_22;this._M1=_M1/_22;this._N1=_N1/_22;this._O1=_O1/_22;this._T1=_Z1;this._U1=__1;}}registerProcessor("hpf2-processor",_f2);class _g2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _42=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_42),minValue:10.0,maxValue:_42},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=new Float32Array(_b1);this._Q1=new Float32Array(_b1);this._R1=new Float32Array(_b1);this._S1=new Float32Array(_b1);this._52=-1;this._U1=-1;this._62=-1;}process(_l1,
_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){if(_V1===!1){const _72=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _X1=(q[_p1]!==undefined)?q[_p1]:q[0];const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];
this._W1(_72,_X1,_82);}const _Y1=this._M1*_n1[_p1]+this._N1*this._P1[_i1]+this._O1*this._Q1[_i1]-this._K1*this._R1[_i1]-this._L1*this._S1[_i1];this._Q1[_i1]=this._P1[_i1];this._P1[_i1]=_n1[_p1];this._S1[_i1]=this._R1[_i1];this._R1[_i1]=_Y1;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_o1[_p1]=(_s1>0)?_n1[_p1]:_Y1;}}return this._u1;}_W1(_92,__1,_a2){if(_92===this._52&&__1===this._U1&&_a2===this._62)return;const _02=2*Math.PI*_92/sampleRate;const _12=Math.cos(_02);const _b2=Math.sqrt(_a2);const _h2=_b2+1;
const _i2=_b2-1;const _j2=_h2*_12;const _k2=_i2*_12;const _l2=_h2-_k2;const _m2=_h2+_k2;const alpha=Math.sin(_02)/(2*__1);const _n2=(2*Math.sqrt(_b2)*alpha);const _22=_l2+_n2;const _K1=2*(_i2-_j2);const _L1=_l2-_n2;const _M1=_b2*(_m2+_n2);const _N1=-2*_b2*(_i2+_j2);const _O1=_b2*(_m2-_n2);this._K1=_K1/_22;this._L1=_L1/_22;this._M1=_M1/_22;this._N1=_N1/_22;this._O1=_O1/_22;this._52=_92;this._U1=__1;this._62=_a2;}}registerProcessor("hi-shelf-processor",_g2);function _o2(){}_o2._p2={_q2:0,_r2:1,_s2:2,_t2:3,_u2:4,
_v2:5};_o2._w2=function(_x2){return 1.0-_x2;};_o2._y2=function(_x2){return _x2;};_o2._z2=function(_x2){return 0.5*(Math.sin((_x2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_o2._A2=function(_x2){if(_x2<0.5){return 0.0;}return 1.0;};_o2._B2=function(_x2){if(_x2<0.5){return 2.0*_x2;}return 2.0-(2.0*_x2);};_o2._C2=[_o2._w2,_o2._y2,_o2._z2,_o2._A2,_o2._B2];_D2._E2=512;_D2._F2=1.0/_D2._E2;function _D2(_G2){this.data=new Float32Array(_D2._E2);for(let _j1=0;_j1<_D2._E2;++_j1){this.data[_j1]=_G2(_j1*_D2._F2);}}_D2.prototype._H2=function(_x2){
_x2=Math.max(0.0,_x2);_x2=Math.min(_x2,1.0);const _I2=_x2*_D2._E2;const _J2=~~_I2;const _K2=_I2-_J2;let _L2=_J2;let _M2=_L2+1;if(_L2>=_D2._E2){_L2-=_D2._E2;}if(_M2>=_D2._E2){_M2-=_D2._E2;}const _N2=this.data[_L2];const _O2=this.data[_M2];return _N2+(_O2-_N2)*_K2;};;_P2._Q2=[];_P2._R2=!1;_P2._S2=0.0;_P2._42=20.0;function _P2(){this._T2=48000;this.shape=_o2._p2._s2;this.freq=1.0;this._U2=0.0;this._F2=0.0;this._V2=0.0;if(_P2._R2==true){return;}for(let _j1=0;_j1<_o2._p2._v2;++_j1){_P2._Q2[_j1]=new _D2(_o2._C2[_j1]);
}_P2._R2=true;}_P2._W2=function(){return(_P2._R2==!0);};_P2.prototype._X2=function(_Y2){this._T2=_Y2;this._Z2();};;_P2.prototype.__2=function(_92){_92=Math.max(_P2._S2,_92);_92=Math.min(_92,_P2._42);this.freq=_92;this._Z2();};;_P2.prototype._03=function(_13){_13=Math.max(0.0,_13);_13=Math.min(_13,1.0);const _23=_13-this._V2;this._V2=_13;this._U2+=_23;while(this._U2>=1.0){this._U2-=1.0;}while(this._U2<0.0){this._U2+=1.0;}};;_P2.prototype._33=function(_43){_43=Math.max(0,_43);_43=Math.min(_43,_o2._p2._v2-1);
this.shape=_43;};;_P2.prototype._H2=function(){const _53=_P2._Q2[this.shape]._H2(this._U2);this._U2+=this._F2;while(this._U2>=1.0){this._U2-=1.0;}return _53;};;_P2.prototype._Z2=function(){this._F2=this.freq/this._T2;};;class _63 extends AudioWorkletProcessor{static _73=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_63._73},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];const _83=(_63._73*sampleRate)+1;this.buffer=new Array(_b1);this._93=new Uint32Array(_b1);for(let _i1=0;_i1<_b1;++_i1)this.buffer[_i1]=new Float32Array(_83);}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){_o1[_p1]=_n1[_p1];const _a3=(time[_p1]!==undefined)?time[_p1]:time[0];const _b3=this._H2(_i1,_a3);const _72=(feedback[_p1]!==undefined)?feedback[_p1]:feedback[0];const _c3=_n1[_p1]+(_b3*_72);this.write(_i1,_c3);const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0.0){continue;}const _t1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];_o1[_p1]*=(1-_t1);_o1[_p1]+=(_b3*_t1);
}}return this._u1;}_H2(_d3,_e3){const _f3=_e3*sampleRate;let _L2=(this._93[_d3]-~~_f3);let _M2=(_L2-1);while(_L2<0)_L2+=this.buffer[_d3].length;while(_M2<0)_M2+=this.buffer[_d3].length;const _g3=_f3-~~_f3;const _N2=this.buffer[_d3][_L2];const _O2=this.buffer[_d3][_M2];return _N2+(_O2-_N2)*_g3;}write(_d3,_T){++this._93[_d3];this._93[_d3]%=this.buffer[_d3].length;this.buffer[_d3][this._93[_d3]]=_T;}}registerProcessor("delay-processor",_63);AudioWorkletProcessor.prototype._a1=function(){this._u1=true;this.port.onmessage=(_h3)=>{
if(_h3.data==="kill")this._u1=false;};};;class _i3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._a1();}process(_l1,_m1,parameters){const input=_l1[0];const bypass=parameters.bypass;for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];for(let _p1=0;_p1<_n1.length;++_p1){const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_m1[_s1][_i1][_p1]=_n1[_p1];}}return this._u1;
}}class _j3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._a1();}process(_l1,_m1,parameters){const _E1=_l1[0];const _F1=_l1[1];const output=_m1[0];const gain=parameters.gain;for(let _i1=0;_i1<_F1.length;++_i1){const _n1=_F1[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1)_o1[_p1]=_n1[_p1];}for(let _i1=0;_i1<_E1.length;++_i1){const _n1=_E1[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;
++_p1){const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];_o1[_p1]+=_n1[_p1]*_82;}}return this._u1;}}registerProcessor("audio-bus-input",_i3);registerProcessor("audio-bus-output",_j3);class _k3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _l3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._m3=new Float32Array(_b1);this._n3=new Uint32Array(_b1);}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){_o1[_p1]=_n1[_p1];if(this._n3[_i1]===0)this._m3[_i1]=_n1[_p1];const _72=(factor[_p1]!==undefined)?factor[_p1]:factor[0];++this._n3[_i1];this._n3[_i1]%=_72;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0.0){continue;}let _r1=this._m3[_i1];const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];_r1*=_82;_r1=Math.max(Math.min(_r1,
1.0),-1.0);const _o3=(resolution[_p1]!==undefined)?resolution[_p1]:resolution[0];const max=(_r1>0.0)?_k3._l3[_o3]-1:_k3._l3[_o3];_r1=Math.round(_r1*max)/max;const _t1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];_o1[_p1]*=(1.0-_t1);_o1[_p1]+=(_r1*_t1);}}return this._u1;}}registerProcessor("bitcrusher-processor",_k3);class _p3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._q3=new Array(_b1).fill(1.0);this._r3=new Array(_b1).fill(0.0);this._s3=new Array(_b1).fill(_o2._p2._q2);this._t3=new Array(_b1);for(let _i1=0;_i1<_b1;++_i1){
this._t3[_i1]=new _P2();this._t3[_i1]._X2(sampleRate);this._t3[_i1].__2(this._q3[_i1]);this._t3[_i1]._33(this._s3[_i1]);if(_i1%2===1){this._t3[_i1]._03(this._r3[_i1]);}}}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){_o1[_p1]=_n1[_p1];
const _o3=(rate[_p1]!==undefined)?rate[_p1]:rate[0];const _u3=(offset[_p1]!==undefined)?offset[_p1]:offset[0];const _v3=(shape[_p1]!==undefined)?shape[_p1]:shape[0];this._w3(_i1,_o3,_u3,_v3);const _x3=this._t3[_i1]._H2();const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0.0){continue;}const _j1=(intensity[_p1]!==undefined)?intensity[_p1]:intensity[0];const out=_n1[_p1]*_x3*_j1;_o1[_p1]*=(1.0-_j1);_o1[_p1]+=out;}}return this._u1;}_w3(_d3,_y3,_13,_43){if(_y3!==this._q3[_d3]){this._t3[_d3].__2(_y3);
this._q3[_d3]=_y3;}if(_13!==this._r3[_d3]){if(_d3%2===1){this._t3[_d3]._03(_13);}this._r3[_d3]=_13;}if(_43!==this._s3[_d3]){this._t3[_d3]._33(_43);this._s3[_d3]=_43;}}}registerProcessor("tremolo-processor",_p3);class _z3{constructor(_e3=1e-3){this.setTime(_e3);}setTime(_e3){this._A3=Math.exp(-1/(_e3*sampleRate));}process(_B3,_C3){return _B3+this._A3*(_C3-_B3);}}class _D3{constructor(_E3,_F3){this._G3=new _z3(_E3);this._H3=new _z3(_F3);this._I3=_E3;this._J3=_F3;}_K3(_e3){if(_e3===this._I3)return;this._G3.setTime(_e3);
this._I3=_e3;}_L3(_e3){if(_e3===this._J3)return;this._H3.setTime(_e3);this._J3=_e3;}process(_B3,_C3){if(_B3>_C3)return this._G3.process(_B3,_C3);else return this._H3.process(_B3,_C3);}}class _M3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_N3){super();this._a1();const _G3=_M3.parameterDescriptors.find(_O3=>_O3.name==="attack");const _H3=_M3.parameterDescriptors.find(_O3=>_O3.name==="release");this._P3=new _D3(_G3.defaultValue,_H3.defaultValue);
this._Q3=0;}process(_R3,_S3,_T3){const input=_R3[0];const output=_S3[0];const bypass=_T3.bypass;const ingain=_T3.ingain;const outgain=_T3.outgain;const threshold=_T3.threshold;const ratio=_T3.ratio;const attack=_T3.attack;const release=_T3.release;if(input.length===0)return this._u1;for(let _p1=0;_p1<input[0].length;++_p1){let _U3=input.map(_V3=>_V3[_p1]);output.forEach((_V3,_W3)=>{_V3[_p1]=_U3[_W3];});const _X3=(ingain[_p1]!==undefined)?ingain[_p1]:ingain[0];_U3=_U3.map(_Y3=>_Y3*=_X3);const rect=_U3.map(_Y3=>Math.abs(_Y3));
const max=Math.max(...rect);const _Z3=__3(max);const _a3=(threshold[_p1]!==undefined)?threshold[_p1]:threshold[0];const _04=__3(_a3);const _14=Math.max(0,_Z3-_04);const _G3=(attack[_p1]!==undefined)?attack[_p1]:attack[0];const _H3=(release[_p1]!==undefined)?release[_p1]:release[0];this._P3._K3(_G3);this._P3._L3(_H3);this._Q3=this._P3.process(_14,this._Q3);const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_s1>0)continue;const _o3=(ratio[_p1]!==undefined)?ratio[_p1]:ratio[0];const _24=(this._Q3/_o3)-this._Q3;
const _82=_34(_24);_U3=_U3.map(_Y3=>_Y3*=_82);const _44=(outgain[_p1]!==undefined)?outgain[_p1]:outgain[0];_U3=_U3.map(_Y3=>_Y3*=_44);output.forEach((_V3,_W3)=>{_V3[_p1]=_U3[_W3];});}return this._u1;}}function __3(_54){return 20*Math.log10(_54);}function _34(_54){return Math.pow(10,_54/20);}registerProcessor("compressor-processor",_M3);class _64 extends AudioWorkletProcessor{static get parameterDescriptors(){const _42=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_42),minValue:10.0,maxValue:_42},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_91){super();this._a1();const _b1=_91.outputChannelCount[0];this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=0;this._P1=new Float32Array(_b1);this._Q1=new Float32Array(_b1);this._R1=new Float32Array(_b1);this._S1=new Float32Array(_b1);
this._52=-1;this._U1=-1;this._62=-1;}process(_l1,_m1,parameters){const input=_l1[0];const output=_m1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _i1=0;_i1<input.length;++_i1){const _n1=input[_i1];const _o1=output[_i1];for(let _p1=0;_p1<_n1.length;++_p1){if(_V1===!1){const _72=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _X1=(q[_p1]!==undefined)?q[_p1]:q[0];
const _82=(gain[_p1]!==undefined)?gain[_p1]:gain[0];this._W1(_72,_X1,_82);}const _Y1=this._M1*_n1[_p1]+this._N1*this._P1[_i1]+this._O1*this._Q1[_i1]-this._K1*this._R1[_i1]-this._L1*this._S1[_i1];this._Q1[_i1]=this._P1[_i1];this._P1[_i1]=_n1[_p1];this._S1[_i1]=this._R1[_i1];this._R1[_i1]=_Y1;const _s1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_o1[_p1]=(_s1>0)?_n1[_p1]:_Y1;}}return this._u1;}_W1(_92,__1,_a2){if(_92===this._52&&__1===this._U1&&_a2===this._62)return;const _02=2*Math.PI*_92/sampleRate;
const _12=Math.cos(_02);const _b2=Math.sqrt(_a2);const _h2=_b2+1;const _i2=_b2-1;const _j2=_h2*_12;const _k2=_i2*_12;const _l2=_h2-_k2;const _m2=_h2+_k2;const alpha=Math.sin(_02)/(2*__1);const _n2=(2*Math.sqrt(_b2)*alpha);const _22=_m2+_n2;const _K1=-2*(_i2+_j2);const _L1=_m2-_n2;const _M1=_b2*(_l2+_n2);const _N1=2*_b2*(_i2-_j2);const _O1=_b2*(_l2-_n2);this._K1=_K1/_22;this._L1=_L1/_22;this._M1=_M1/_22;this._N1=_N1/_22;this._O1=_O1/_22;this._52=_92;this._U1=__1;this._62=_a2;}}registerProcessor("lo-shelf-processor",
_64);