class _o1{constructor(_p1){this._q1=0;this._r1=0;this.feedback=0;this._s1=0;this.buffer=new Float32Array(_p1);this._t1=0;}process(_u1){const out=this.buffer[this._t1];this._s1=(this._s1*this._q1)+(out*this._r1);this.buffer[this._t1]=_u1+(this._s1*this.feedback);++this._t1;this._t1%=this.buffer.length;return out;}_v1(_w1){this.feedback=Math.min(Math.max(0,_w1),1);}_x1(_y1){this._q1=Math.min(Math.max(0,_y1),1);this._r1=1-this._q1;}}class _z1{constructor(_p1){this.feedback=0;this.buffer=new Float32Array(_p1);
this._t1=0;}process(_u1){const out=this.buffer[this._t1];this.buffer[this._t1]=_u1+(out*this.feedback);++this._t1;this._t1%=this.buffer.length;return(out-_u1);}_v1(_w1){this.feedback=Math.min(Math.max(0,_w1),1);}}class _A1 extends AudioWorkletProcessor{static _B1=8;static _C1=4;static _D1=0.015;static _E1=0.4;static _F1=0.28;static _G1=0.7;static _H1=[1116,1188,1277,1356,1422,1491,1557,1617];static _I1=[1139,1211,1300,1379,1445,1514,1580,1640];static _J1=[556,441,341,225];static _K1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._O1=-1;this._P1=-1;this._Q1=new Array(_N1);this._R1=new Array(_N1);const _S1=[_A1._H1,_A1._I1];const _T1=[_A1._J1,
_A1._K1];for(let _U1=0;_U1<_N1;++_U1){this._Q1[_U1]=new Array(_A1._B1);this._R1[_U1]=new Array(_A1._C1);for(let _V1=0;_V1<_A1._B1;++_V1)this._Q1[_U1][_V1]=new _o1(_S1[_U1%_S1.length][_V1]);for(let _V1=0;_V1<_A1._C1;++_V1)this._R1[_U1][_V1]=new _z1(_T1[_U1%_T1.length][_V1]);}this._W1(0.5);this._x1(0.5);for(let _U1=0;_U1<_N1;++_U1)for(let _V1=0;_V1<_A1._C1;++_V1)this._R1[_U1][_V1]._v1(0.5);}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){const _02=(size[_02]!==undefined)?size[_02]:size[0];const _12=(damp[_02]!==undefined)?damp[_02]:damp[0];this._W1(_02);this._x1(_12);__1[_02]=_Z1[_02];let out=0;const _22=_Z1[_02]*_A1._D1;for(let _V1=0;_V1<_A1._B1;++_V1)out+=this._Q1[_U1][_V1].process(_22);for(let _V1=0;_V1<_A1._C1;++_V1)out=this._R1[_U1][_V1].process(out);const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];
if(_32>0.0){continue;}const _42=(mix[_02]!==undefined)?mix[_02]:mix[0];__1[_02]*=(1-_42);__1[_02]+=(out*_42);}}return this._52;}_W1(_p1){if(_p1===this._O1)return;const size=(_p1*_A1._F1)+_A1._G1;for(let _U1=0;_U1<this._Q1.length;++_U1)for(let _V1=0;_V1<_A1._B1;++_V1)this._Q1[_U1][_V1]._v1(size);this._O1=_p1;}_x1(_y1){if(_y1===this._P1)return;const damp=_y1*_A1._E1;for(let _U1=0;_U1<this._Q1.length;++_U1)for(let _V1=0;_V1<_A1._B1;++_V1)this._Q1[_U1][_V1]._x1(damp);this._P1=_y1;}}registerProcessor("reverb1-processor",
_A1);class _62 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._M1();}process(_72,_82,_92){const input=_72[0];const _a2=_82[0];const _b2=_82[1];for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const _c2=_a2[_U1];const _d2=_b2[_U1];for(let _02=0;_02<_Z1.length;++_02){_c2[_02]=_Z1[_02];_d2[_02]=_Z1[_02];}}return this._52;}}class _e2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._M1();}process(_72,_82,_92){const _f2=_72[0];const _g2=_72[1];const output=_82[0];const bypass=_92.bypass;for(let _U1=0;_U1<_g2.length;++_U1){const _h2=_f2[_U1];const _i2=_g2[_U1];const __1=output[_U1];for(let _02=0;_02<_h2.length;++_02){const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0){__1[_02]=_i2[_02];}else {__1[_02]=_h2[_02];}}}return this._52;}}registerProcessor("eq-input",_62);registerProcessor("eq-output",_e2);class _j2 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _k2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_k2),minValue:10.0,maxValue:_k2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._l2=0;this._m2=0;this._n2=0;this._o2=0;this._p2=0;this._q2=new Float32Array(_N1);this._r2=new Float32Array(_N1);
this._s2=new Float32Array(_N1);this._t2=new Float32Array(_N1);this._u2=-1;this._v2=-1;}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _w2=(cutoff.length===1&&q.length===1);if(_w2)this._x2(cutoff[0],q[0]);for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){if(_w2===!1){const _U1=(cutoff[_02]!==undefined)?cutoff[_02]:cutoff[0];const _y2=(q[_02]!==undefined)?q[_02]:q[0];
this._x2(_U1,_y2);}const _z2=this._n2*_Z1[_02]+this._o2*this._q2[_U1]+this._p2*this._r2[_U1]-this._l2*this._s2[_U1]-this._m2*this._t2[_U1];this._r2[_U1]=this._q2[_U1];this._q2[_U1]=_Z1[_02];this._t2[_U1]=this._s2[_U1];this._s2[_U1]=_z2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];__1[_02]=(_32>0)?_Z1[_02]:_z2;}}return this._52;}_x2(_A2,_B2){if(_A2===this._u2&&_B2===this._v2)return;const _C2=2*Math.PI*_A2/sampleRate;const alpha=Math.sin(_C2)/(2*_B2);const _D2=Math.cos(_C2);const _E2=1+alpha;
const _l2=-2*_D2;const _m2=1-alpha;const _n2=(1-_D2)/2;const _o2=1-_D2;const _p2=(1-_D2)/2;this._l2=_l2/_E2;this._m2=_m2/_E2;this._n2=_n2/_E2;this._o2=_o2/_E2;this._p2=_p2/_E2;this._u2=_A2;this._v2=_B2;}}registerProcessor("lpf2-processor",_j2);class _F2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_G2),minValue:10.0,maxValue:_G2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._l2=0;this._m2=0;this._n2=0;this._o2=0;this._p2=0;this._q2=new Float32Array(_N1);this._r2=new Float32Array(_N1);this._s2=new Float32Array(_N1);this._t2=new Float32Array(_N1);this._H2=-1;this._v2=-1;this._I2=-1;}process(_X1,_Y1,parameters){const input=_X1[0];
const output=_Y1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w2=(freq.length===1&&q.length===1&&gain.length===1);if(_w2)this._x2(freq[0],q[0],gain[0]);for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){if(_w2===!1){const _J2=(freq[_02]!==undefined)?freq[_02]:freq[0];const _y2=(q[_02]!==undefined)?q[_02]:q[0];const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];this._x2(_J2,
_y2,_K2);}const _z2=this._n2*_Z1[_02]+this._o2*this._q2[_U1]+this._p2*this._r2[_U1]-this._l2*this._s2[_U1]-this._m2*this._t2[_U1];this._r2[_U1]=this._q2[_U1];this._q2[_U1]=_Z1[_02];this._t2[_U1]=this._s2[_U1];this._s2[_U1]=_z2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];__1[_02]=(_32>0)?_Z1[_02]:_z2;}}return this._52;}_x2(_L2,_B2,_M2){if(_L2===this._H2&&_B2===this._v2&&_M2===this._I2)return;const _C2=2*Math.PI*_L2/sampleRate;const _D2=Math.cos(_C2);const _N2=Math.sqrt(_M2);const alpha=Math.sin(_C2)/(2*_B2);
const _O2=alpha/_N2;const _P2=alpha*_N2;const _E2=1+_O2;const _l2=-2*_D2;const _m2=1-_O2;const _n2=1+_P2;const _o2=_l2;const _p2=1-_P2;this._l2=_l2/_E2;this._m2=_m2/_E2;this._n2=_n2/_E2;this._o2=_o2/_E2;this._p2=_p2/_E2;this._H2=_L2;this._v2=_B2;this._I2=_M2;}}registerProcessor("peak-eq-processor",_F2);class _Q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._M1();}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){__1[_02]=_Z1[_02];const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0.0){continue;}const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];__1[_02]*=_K2;}}return this._52;}}registerProcessor("gain-processor",
_Q2);class _R2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _k2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_k2),minValue:10.0,maxValue:_k2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._l2=0;this._m2=0;this._n2=0;this._o2=0;this._p2=0;
this._q2=new Float32Array(_N1);this._r2=new Float32Array(_N1);this._s2=new Float32Array(_N1);this._t2=new Float32Array(_N1);this._u2=-1;this._v2=-1;}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _w2=(cutoff.length===1&&q.length===1);if(_w2)this._x2(cutoff[0],q[0]);for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){if(_w2===!1){const _U1=(cutoff[_02]!==undefined)?cutoff[_02]:cutoff[0];
const _y2=(q[_02]!==undefined)?q[_02]:q[0];this._x2(_U1,_y2);}const _z2=this._n2*_Z1[_02]+this._o2*this._q2[_U1]+this._p2*this._r2[_U1]-this._l2*this._s2[_U1]-this._m2*this._t2[_U1];this._r2[_U1]=this._q2[_U1];this._q2[_U1]=_Z1[_02];this._t2[_U1]=this._s2[_U1];this._s2[_U1]=_z2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];__1[_02]=(_32>0)?_Z1[_02]:_z2;}}return this._52;}_x2(_A2,_B2){if(_A2===this._u2&&_B2===this._v2)return;const _C2=2*Math.PI*_A2/sampleRate;const alpha=Math.sin(_C2)/(2*_B2);
const _D2=Math.cos(_C2);const _E2=1+alpha;const _l2=-2*_D2;const _m2=1-alpha;const _n2=(1+_D2)/2;const _o2=-1-_D2;const _p2=(1+_D2)/2;this._l2=_l2/_E2;this._m2=_m2/_E2;this._n2=_n2/_E2;this._o2=_o2/_E2;this._p2=_p2/_E2;this._u2=_A2;this._v2=_B2;}}registerProcessor("hpf2-processor",_R2);class _S2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_G2),minValue:10.0,maxValue:_G2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._l2=0;this._m2=0;this._n2=0;this._o2=0;this._p2=0;this._q2=new Float32Array(_N1);this._r2=new Float32Array(_N1);this._s2=new Float32Array(_N1);this._t2=new Float32Array(_N1);this._H2=-1;this._v2=-1;this._I2=-1;}process(_X1,
_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w2=(freq.length===1&&q.length===1&&gain.length===1);if(_w2)this._x2(freq[0],q[0],gain[0]);for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){if(_w2===!1){const _J2=(freq[_02]!==undefined)?freq[_02]:freq[0];const _y2=(q[_02]!==undefined)?q[_02]:q[0];const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];
this._x2(_J2,_y2,_K2);}const _z2=this._n2*_Z1[_02]+this._o2*this._q2[_U1]+this._p2*this._r2[_U1]-this._l2*this._s2[_U1]-this._m2*this._t2[_U1];this._r2[_U1]=this._q2[_U1];this._q2[_U1]=_Z1[_02];this._t2[_U1]=this._s2[_U1];this._s2[_U1]=_z2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];__1[_02]=(_32>0)?_Z1[_02]:_z2;}}return this._52;}_x2(_L2,_B2,_M2){if(_L2===this._H2&&_B2===this._v2&&_M2===this._I2)return;const _C2=2*Math.PI*_L2/sampleRate;const _D2=Math.cos(_C2);const _N2=Math.sqrt(_M2);const _T2=_N2+1;
const _U2=_N2-1;const _V2=_T2*_D2;const _W2=_U2*_D2;const _X2=_T2-_W2;const _Y2=_T2+_W2;const alpha=Math.sin(_C2)/(2*_B2);const _Z2=(2*Math.sqrt(_N2)*alpha);const _E2=_X2+_Z2;const _l2=2*(_U2-_V2);const _m2=_X2-_Z2;const _n2=_N2*(_Y2+_Z2);const _o2=-2*_N2*(_U2+_V2);const _p2=_N2*(_Y2-_Z2);this._l2=_l2/_E2;this._m2=_m2/_E2;this._n2=_n2/_E2;this._o2=_o2/_E2;this._p2=_p2/_E2;this._H2=_L2;this._v2=_B2;this._I2=_M2;}}registerProcessor("hi-shelf-processor",_S2);function __2(){}__2._03={_13:0,_23:1,_33:2,_43:3,_53:4,
_63:5};__2._73=function(_83){return 1.0-_83;};__2._93=function(_83){return _83;};__2._a3=function(_83){return 0.5*(Math.sin((_83*2.0*Math.PI)-(Math.PI/2.0))+1.0);};__2._b3=function(_83){if(_83<0.5){return 0.0;}return 1.0;};__2._c3=function(_83){if(_83<0.5){return 2.0*_83;}return 2.0-(2.0*_83);};__2._d3=[__2._73,__2._93,__2._a3,__2._b3,__2._c3];_e3._f3=512;_e3._g3=1.0/_e3._f3;function _e3(_h3){this.data=new Float32Array(_e3._f3);for(let _V1=0;_V1<_e3._f3;++_V1){this.data[_V1]=_h3(_V1*_e3._g3);}}_e3.prototype._i3=function(_83){
_83=Math.max(0.0,_83);_83=Math.min(_83,1.0);const _j3=_83*_e3._f3;const _k3=~~_j3;const _l3=_j3-_k3;let _m3=_k3;let _n3=_m3+1;if(_m3>=_e3._f3){_m3-=_e3._f3;}if(_n3>=_e3._f3){_n3-=_e3._f3;}const _o3=this.data[_m3];const _p3=this.data[_n3];return _o3+(_p3-_o3)*_l3;};;_q3._r3=[];_q3._s3=!1;_q3._t3=0.0;_q3._G2=20.0;function _q3(){this._u3=48000;this.shape=__2._03._33;this.freq=1.0;this._v3=0.0;this._g3=0.0;this._w3=0.0;if(_q3._s3==true){return;}for(let _V1=0;_V1<__2._03._63;++_V1){_q3._r3[_V1]=new _e3(__2._d3[_V1]);
}_q3._s3=true;}_q3._x3=function(){return(_q3._s3==!0);};_q3.prototype._y3=function(_z3){this._u3=_z3;this._A3();};;_q3.prototype._B3=function(_L2){_L2=Math.max(_q3._t3,_L2);_L2=Math.min(_L2,_q3._G2);this.freq=_L2;this._A3();};;_q3.prototype._C3=function(_D3){_D3=Math.max(0.0,_D3);_D3=Math.min(_D3,1.0);const _E3=_D3-this._w3;this._w3=_D3;this._v3+=_E3;while(this._v3>=1.0){this._v3-=1.0;}while(this._v3<0.0){this._v3+=1.0;}};;_q3.prototype._F3=function(_G3){_G3=Math.max(0,_G3);_G3=Math.min(_G3,__2._03._63-1);
this.shape=_G3;};;_q3.prototype._i3=function(){const _H3=_q3._r3[this.shape]._i3(this._v3);this._v3+=this._g3;while(this._v3>=1.0){this._v3-=1.0;}return _H3;};;_q3.prototype._A3=function(){this._g3=this.freq/this._u3;};;class _I3 extends AudioWorkletProcessor{static _J3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_I3._J3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];const _K3=(_I3._J3*sampleRate)+1;this.buffer=new Array(_N1);this._L3=new Uint32Array(_N1);for(let _U1=0;_U1<_N1;++_U1)this.buffer[_U1]=new Float32Array(_K3);}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){__1[_02]=_Z1[_02];const _M3=(time[_02]!==undefined)?time[_02]:time[0];const _N3=this._i3(_U1,_M3);const _J2=(feedback[_02]!==undefined)?feedback[_02]:feedback[0];const _O3=_Z1[_02]+(_N3*_J2);this.write(_U1,_O3);const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0.0){continue;}const _42=(mix[_02]!==undefined)?mix[_02]:mix[0];__1[_02]*=(1-_42);__1[_02]+=(_N3*_42);
}}return this._52;}_i3(_P3,_Q3){const _R3=_Q3*sampleRate;let _m3=(this._L3[_P3]-~~_R3);let _n3=(_m3-1);while(_m3<0)_m3+=this.buffer[_P3].length;while(_n3<0)_n3+=this.buffer[_P3].length;const _S3=_R3-~~_R3;const _o3=this.buffer[_P3][_m3];const _p3=this.buffer[_P3][_n3];return _o3+(_p3-_o3)*_S3;}write(_P3,_u1){++this._L3[_P3];this._L3[_P3]%=this.buffer[_P3].length;this.buffer[_P3][this._L3[_P3]]=_u1;}}registerProcessor("delay-processor",_I3);AudioWorkletProcessor.prototype._M1=function(){this._52=true;this.port.onmessage=(_T3)=>{
if(_T3.data==="kill")this._52=false;};};;class _U3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._M1();}process(_X1,_Y1,parameters){const input=_X1[0];const bypass=parameters.bypass;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];for(let _02=0;_02<_Z1.length;++_02){const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];_Y1[_32][_U1][_02]=_Z1[_02];}}return this._52;
}}class _V3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._M1();}process(_X1,_Y1,parameters){const _f2=_X1[0];const _g2=_X1[1];const output=_Y1[0];const gain=parameters.gain;for(let _U1=0;_U1<_g2.length;++_U1){const _Z1=_g2[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02)__1[_02]=_Z1[_02];}for(let _U1=0;_U1<_f2.length;++_U1){const _Z1=_f2[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;
++_02){const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];__1[_02]+=_Z1[_02]*_K2;}}return this._52;}}registerProcessor("audio-bus-input",_U3);registerProcessor("audio-bus-output",_V3);class _W3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _X3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._Y3=new Float32Array(_N1);this._Z3=new Uint32Array(_N1);}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){__1[_02]=_Z1[_02];if(this._Z3[_U1]===0)this._Y3[_U1]=_Z1[_02];const _J2=(factor[_02]!==undefined)?factor[_02]:factor[0];++this._Z3[_U1];this._Z3[_U1]%=_J2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0.0){continue;}let _22=this._Y3[_U1];const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];_22*=_K2;_22=Math.max(Math.min(_22,
1.0),-1.0);const __3=(resolution[_02]!==undefined)?resolution[_02]:resolution[0];const max=(_22>0.0)?_W3._X3[__3]-1:_W3._X3[__3];_22=Math.round(_22*max)/max;const _42=(mix[_02]!==undefined)?mix[_02]:mix[0];__1[_02]*=(1.0-_42);__1[_02]+=(_22*_42);}}return this._52;}}registerProcessor("bitcrusher-processor",_W3);class _04 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._14=new Array(_N1).fill(1.0);this._24=new Array(_N1).fill(0.0);this._34=new Array(_N1).fill(__2._03._13);this._44=new Array(_N1);for(let _U1=0;_U1<_N1;++_U1){
this._44[_U1]=new _q3();this._44[_U1]._y3(sampleRate);this._44[_U1]._B3(this._14[_U1]);this._44[_U1]._F3(this._34[_U1]);if(_U1%2===1){this._44[_U1]._C3(this._24[_U1]);}}}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){__1[_02]=_Z1[_02];
const __3=(rate[_02]!==undefined)?rate[_02]:rate[0];const _54=(offset[_02]!==undefined)?offset[_02]:offset[0];const _64=(shape[_02]!==undefined)?shape[_02]:shape[0];this._74(_U1,__3,_54,_64);const _84=this._44[_U1]._i3();const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0.0){continue;}const _V1=(intensity[_02]!==undefined)?intensity[_02]:intensity[0];const out=_Z1[_02]*_84*_V1;__1[_02]*=(1.0-_V1);__1[_02]+=out;}}return this._52;}_74(_P3,_94,_D3,_G3){if(_94!==this._14[_P3]){this._44[_P3]._B3(_94);
this._14[_P3]=_94;}if(_D3!==this._24[_P3]){if(_P3%2===1){this._44[_P3]._C3(_D3);}this._24[_P3]=_D3;}if(_G3!==this._34[_P3]){this._44[_P3]._F3(_G3);this._34[_P3]=_G3;}}}registerProcessor("tremolo-processor",_04);class _a4{constructor(_Q3=1e-3){this.setTime(_Q3);}setTime(_Q3){this._b4=Math.exp(-1/(_Q3*sampleRate));}process(_c4,_d4){return _c4+this._b4*(_d4-_c4);}}class _e4{constructor(_f4,_g4){this._h4=new _a4(_f4);this._i4=new _a4(_g4);this._j4=_f4;this._k4=_g4;}_l4(_Q3){if(_Q3===this._j4)return;this._h4.setTime(_Q3);
this._j4=_Q3;}_m4(_Q3){if(_Q3===this._k4)return;this._i4.setTime(_Q3);this._k4=_Q3;}process(_c4,_d4){if(_c4>_d4)return this._h4.process(_c4,_d4);else return this._i4.process(_c4,_d4);}}class _n4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_o4){super();this._M1();const _h4=_n4.parameterDescriptors.find(_p4=>_p4.name==="attack");const _i4=_n4.parameterDescriptors.find(_p4=>_p4.name==="release");this._q4=new _e4(_h4.defaultValue,_i4.defaultValue);
this._r4=0;}process(_s4,_t4,_u4){const input=_s4[0];const output=_t4[0];const bypass=_u4.bypass;const ingain=_u4.ingain;const outgain=_u4.outgain;const threshold=_u4.threshold;const ratio=_u4.ratio;const attack=_u4.attack;const release=_u4.release;if(input.length===0)return this._52;for(let _02=0;_02<input[0].length;++_02){let _v4=input.map(_w4=>_w4[_02]);output.forEach((_w4,_x4)=>{_w4[_02]=_v4[_x4];});const _y4=(ingain[_02]!==undefined)?ingain[_02]:ingain[0];_v4=_v4.map(_z4=>_z4*=_y4);const rect=_v4.map(_z4=>Math.abs(_z4));
const max=Math.max(...rect);const _A4=_B4(max);const _M3=(threshold[_02]!==undefined)?threshold[_02]:threshold[0];const _C4=_B4(_M3);const _D4=Math.max(0,_A4-_C4);const _h4=(attack[_02]!==undefined)?attack[_02]:attack[0];const _i4=(release[_02]!==undefined)?release[_02]:release[0];this._q4._l4(_h4);this._q4._m4(_i4);this._r4=this._q4.process(_D4,this._r4);const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];if(_32>0)continue;const __3=(ratio[_02]!==undefined)?ratio[_02]:ratio[0];const _E4=(this._r4/__3)-this._r4;
const _K2=_F4(_E4);_v4=_v4.map(_z4=>_z4*=_K2);const _G4=(outgain[_02]!==undefined)?outgain[_02]:outgain[0];_v4=_v4.map(_z4=>_z4*=_G4);output.forEach((_w4,_x4)=>{_w4[_02]=_v4[_x4];});}return this._52;}}function _B4(_H4){return 20*Math.log10(_H4);}function _F4(_H4){return Math.pow(10,_H4/20);}registerProcessor("compressor-processor",_n4);class _I4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_G2),minValue:10.0,maxValue:_G2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L1){super();this._M1();const _N1=_L1.outputChannelCount[0];this._l2=0;this._m2=0;this._n2=0;this._o2=0;this._p2=0;this._q2=new Float32Array(_N1);this._r2=new Float32Array(_N1);this._s2=new Float32Array(_N1);this._t2=new Float32Array(_N1);
this._H2=-1;this._v2=-1;this._I2=-1;}process(_X1,_Y1,parameters){const input=_X1[0];const output=_Y1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w2=(freq.length===1&&q.length===1&&gain.length===1);if(_w2)this._x2(freq[0],q[0],gain[0]);for(let _U1=0;_U1<input.length;++_U1){const _Z1=input[_U1];const __1=output[_U1];for(let _02=0;_02<_Z1.length;++_02){if(_w2===!1){const _J2=(freq[_02]!==undefined)?freq[_02]:freq[0];const _y2=(q[_02]!==undefined)?q[_02]:q[0];
const _K2=(gain[_02]!==undefined)?gain[_02]:gain[0];this._x2(_J2,_y2,_K2);}const _z2=this._n2*_Z1[_02]+this._o2*this._q2[_U1]+this._p2*this._r2[_U1]-this._l2*this._s2[_U1]-this._m2*this._t2[_U1];this._r2[_U1]=this._q2[_U1];this._q2[_U1]=_Z1[_02];this._t2[_U1]=this._s2[_U1];this._s2[_U1]=_z2;const _32=(bypass[_02]!==undefined)?bypass[_02]:bypass[0];__1[_02]=(_32>0)?_Z1[_02]:_z2;}}return this._52;}_x2(_L2,_B2,_M2){if(_L2===this._H2&&_B2===this._v2&&_M2===this._I2)return;const _C2=2*Math.PI*_L2/sampleRate;
const _D2=Math.cos(_C2);const _N2=Math.sqrt(_M2);const _T2=_N2+1;const _U2=_N2-1;const _V2=_T2*_D2;const _W2=_U2*_D2;const _X2=_T2-_W2;const _Y2=_T2+_W2;const alpha=Math.sin(_C2)/(2*_B2);const _Z2=(2*Math.sqrt(_N2)*alpha);const _E2=_Y2+_Z2;const _l2=-2*(_U2+_V2);const _m2=_Y2-_Z2;const _n2=_N2*(_X2+_Z2);const _o2=2*_N2*(_U2-_V2);const _p2=_N2*(_X2-_Z2);this._l2=_l2/_E2;this._m2=_m2/_E2;this._n2=_n2/_E2;this._o2=_o2/_E2;this._p2=_p2/_E2;this._H2=_L2;this._v2=_B2;this._I2=_M2;}}registerProcessor("lo-shelf-processor",
_I4);