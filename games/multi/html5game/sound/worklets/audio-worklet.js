class _C{constructor(_D){this._E=0;this._F=0;this.feedback=0;this._G=0;this.buffer=new Float32Array(_D);this._H=0;}process(_I){const out=this.buffer[this._H];this._G=(this._G*this._E)+(out*this._F);this.buffer[this._H]=_I+(this._G*this.feedback);++this._H;this._H%=this.buffer.length;return out;}_J(_K){this.feedback=Math.min(Math.max(0,_K),1);}_L(_M){this._E=Math.min(Math.max(0,_M),1);this._F=1-this._E;}}class _N{constructor(_D){this.feedback=0;this.buffer=new Float32Array(_D);this._H=0;}process(_I){const out=this.buffer[this._H];
this.buffer[this._H]=_I+(out*this.feedback);++this._H;this._H%=this.buffer.length;return(out-_I);}_J(_K){this.feedback=Math.min(Math.max(0,_K),1);}}class _O extends AudioWorkletProcessor{static _P=8;static _Q=4;static _R=0.015;static _S=0.4;static _T=0.28;static _U=0.7;static _V=[1116,1188,1277,1356,1422,1491,1557,1617];static _W=[1139,1211,1300,1379,1445,1514,1580,1640];static _X=[556,441,341,225];static _Y=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._11=-1;this._21=-1;this._31=new Array(_01);this._41=new Array(_01);const _51=[_O._V,_O._W];const _61=[_O._X,_O._Y];for(let _71=0;_71<_01;++_71){this._31[_71]=new Array(_O._P);
this._41[_71]=new Array(_O._Q);for(let _81=0;_81<_O._P;++_81)this._31[_71][_81]=new _C(_51[_71%_51.length][_81]);for(let _81=0;_81<_O._Q;++_81)this._41[_71][_81]=new _N(_61[_71%_61.length][_81]);}this._91(0.5);this._L(0.5);for(let _71=0;_71<_01;++_71)for(let _81=0;_81<_O._Q;++_81)this._41[_71][_81]._J(0.5);}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _71=0;_71<input.length;
++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){const _e1=(size[_e1]!==undefined)?size[_e1]:size[0];const _f1=(damp[_e1]!==undefined)?damp[_e1]:damp[0];this._91(_e1);this._L(_f1);_d1[_e1]=_c1[_e1];let out=0;const _g1=_c1[_e1]*_O._R;for(let _81=0;_81<_O._P;++_81)out+=this._31[_71][_81].process(_g1);for(let _81=0;_81<_O._Q;++_81)out=this._41[_71][_81].process(out);const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0.0){continue;}const _i1=(mix[_e1]!==undefined)?mix[_e1]:mix[0];
_d1[_e1]*=(1-_i1);_d1[_e1]+=(out*_i1);}}return this._j1;}_91(_D){if(_D===this._11)return;const size=(_D*_O._T)+_O._U;for(let _71=0;_71<this._31.length;++_71)for(let _81=0;_81<_O._P;++_81)this._31[_71][_81]._J(size);this._11=_D;}_L(_M){if(_M===this._21)return;const damp=_M*_O._S;for(let _71=0;_71<this._31.length;++_71)for(let _81=0;_81<_O._P;++_81)this._31[_71][_81]._L(damp);this._21=_M;}}registerProcessor("reverb1-processor",_O);class _k1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];
}constructor(){super();this.__();}process(_l1,_m1,_n1){const input=_l1[0];const _o1=_m1[0];const _p1=_m1[1];for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _q1=_o1[_71];const _r1=_p1[_71];for(let _e1=0;_e1<_c1.length;++_e1){_q1[_e1]=_c1[_e1];_r1[_e1]=_c1[_e1];}}return this._j1;}}class _s1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this.__();}process(_l1,_m1,_n1){const _t1=_l1[0];
const _u1=_l1[1];const output=_m1[0];const bypass=_n1.bypass;for(let _71=0;_71<_u1.length;++_71){const _v1=_t1[_71];const _w1=_u1[_71];const _d1=output[_71];for(let _e1=0;_e1<_v1.length;++_e1){const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0){_d1[_e1]=_w1[_e1];}else {_d1[_e1]=_v1[_e1];}}}return this._j1;}}registerProcessor("eq-input",_k1);registerProcessor("eq-output",_s1);class _x1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y1=Math.min(sampleRate/2.0,20000.0);return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_y1),minValue:10.0,maxValue:_y1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._z1=0;this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=new Float32Array(_01);this._F1=new Float32Array(_01);this._G1=new Float32Array(_01);this._H1=new Float32Array(_01);
this._I1=-1;this._J1=-1;}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _K1=(cutoff.length===1&&q.length===1);if(_K1)this._L1(cutoff[0],q[0]);for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){if(_K1===!1){const _71=(cutoff[_e1]!==undefined)?cutoff[_e1]:cutoff[0];const _M1=(q[_e1]!==undefined)?q[_e1]:q[0];this._L1(_71,_M1);}const _N1=this._B1*_c1[_e1]+this._C1*this._E1[_71]+this._D1*this._F1[_71]-this._z1*this._G1[_71]-this._A1*this._H1[_71];
this._F1[_71]=this._E1[_71];this._E1[_71]=_c1[_e1];this._H1[_71]=this._G1[_71];this._G1[_71]=_N1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_d1[_e1]=(_h1>0)?_c1[_e1]:_N1;}}return this._j1;}_L1(_O1,_P1){if(_O1===this._I1&&_P1===this._J1)return;const _Q1=2*Math.PI*_O1/sampleRate;const alpha=Math.sin(_Q1)/(2*_P1);const _R1=Math.cos(_Q1);const _S1=1+alpha;const _z1=-2*_R1;const _A1=1-alpha;const _B1=(1-_R1)/2;const _C1=1-_R1;const _D1=(1-_R1)/2;this._z1=_z1/_S1;this._A1=_A1/_S1;this._B1=_B1/_S1;
this._C1=_C1/_S1;this._D1=_D1/_S1;this._I1=_O1;this._J1=_P1;}}registerProcessor("lpf2-processor",_x1);class _T1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._z1=0;this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=new Float32Array(_01);this._F1=new Float32Array(_01);this._G1=new Float32Array(_01);this._H1=new Float32Array(_01);this._V1=-1;this._J1=-1;this._W1=-1;}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K1=(freq.length===1&&q.length===1&&gain.length===1);
if(_K1)this._L1(freq[0],q[0],gain[0]);for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){if(_K1===!1){const _X1=(freq[_e1]!==undefined)?freq[_e1]:freq[0];const _M1=(q[_e1]!==undefined)?q[_e1]:q[0];const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];this._L1(_X1,_M1,_Y1);}const _N1=this._B1*_c1[_e1]+this._C1*this._E1[_71]+this._D1*this._F1[_71]-this._z1*this._G1[_71]-this._A1*this._H1[_71];this._F1[_71]=this._E1[_71];this._E1[_71]=_c1[_e1];
this._H1[_71]=this._G1[_71];this._G1[_71]=_N1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_d1[_e1]=(_h1>0)?_c1[_e1]:_N1;}}return this._j1;}_L1(_Z1,_P1,__1){if(_Z1===this._V1&&_P1===this._J1&&__1===this._W1)return;const _Q1=2*Math.PI*_Z1/sampleRate;const _R1=Math.cos(_Q1);const _02=Math.sqrt(__1);const alpha=Math.sin(_Q1)/(2*_P1);const _12=alpha/_02;const _22=alpha*_02;const _S1=1+_12;const _z1=-2*_R1;const _A1=1-_12;const _B1=1+_22;const _C1=_z1;const _D1=1-_22;this._z1=_z1/_S1;this._A1=_A1/_S1;
this._B1=_B1/_S1;this._C1=_C1/_S1;this._D1=_D1/_S1;this._V1=_Z1;this._J1=_P1;this._W1=__1;}}registerProcessor("peak-eq-processor",_T1);class _32 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this.__();}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const gain=parameters.gain;
for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){_d1[_e1]=_c1[_e1];const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0.0){continue;}const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];_d1[_e1]*=_Y1;}}return this._j1;}}registerProcessor("gain-processor",_32);class _42 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_y1),minValue:10.0,maxValue:_y1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._z1=0;this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=new Float32Array(_01);this._F1=new Float32Array(_01);this._G1=new Float32Array(_01);this._H1=new Float32Array(_01);this._I1=-1;this._J1=-1;}process(_a1,_b1,parameters){
const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _K1=(cutoff.length===1&&q.length===1);if(_K1)this._L1(cutoff[0],q[0]);for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){if(_K1===!1){const _71=(cutoff[_e1]!==undefined)?cutoff[_e1]:cutoff[0];const _M1=(q[_e1]!==undefined)?q[_e1]:q[0];this._L1(_71,_M1);}const _N1=this._B1*_c1[_e1]+this._C1*this._E1[_71]+this._D1*this._F1[_71]-this._z1*this._G1[_71]-this._A1*this._H1[_71];
this._F1[_71]=this._E1[_71];this._E1[_71]=_c1[_e1];this._H1[_71]=this._G1[_71];this._G1[_71]=_N1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_d1[_e1]=(_h1>0)?_c1[_e1]:_N1;}}return this._j1;}_L1(_O1,_P1){if(_O1===this._I1&&_P1===this._J1)return;const _Q1=2*Math.PI*_O1/sampleRate;const alpha=Math.sin(_Q1)/(2*_P1);const _R1=Math.cos(_Q1);const _S1=1+alpha;const _z1=-2*_R1;const _A1=1-alpha;const _B1=(1+_R1)/2;const _C1=-1-_R1;const _D1=(1+_R1)/2;this._z1=_z1/_S1;this._A1=_A1/_S1;this._B1=_B1/_S1;
this._C1=_C1/_S1;this._D1=_D1/_S1;this._I1=_O1;this._J1=_P1;}}registerProcessor("hpf2-processor",_42);class _52 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._z1=0;this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=new Float32Array(_01);this._F1=new Float32Array(_01);this._G1=new Float32Array(_01);this._H1=new Float32Array(_01);this._V1=-1;this._J1=-1;this._W1=-1;}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K1=(freq.length===1&&q.length===1&&gain.length===1);
if(_K1)this._L1(freq[0],q[0],gain[0]);for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){if(_K1===!1){const _X1=(freq[_e1]!==undefined)?freq[_e1]:freq[0];const _M1=(q[_e1]!==undefined)?q[_e1]:q[0];const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];this._L1(_X1,_M1,_Y1);}const _N1=this._B1*_c1[_e1]+this._C1*this._E1[_71]+this._D1*this._F1[_71]-this._z1*this._G1[_71]-this._A1*this._H1[_71];this._F1[_71]=this._E1[_71];this._E1[_71]=_c1[_e1];
this._H1[_71]=this._G1[_71];this._G1[_71]=_N1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_d1[_e1]=(_h1>0)?_c1[_e1]:_N1;}}return this._j1;}_L1(_Z1,_P1,__1){if(_Z1===this._V1&&_P1===this._J1&&__1===this._W1)return;const _Q1=2*Math.PI*_Z1/sampleRate;const _R1=Math.cos(_Q1);const _02=Math.sqrt(__1);const _62=_02+1;const _72=_02-1;const _82=_62*_R1;const _92=_72*_R1;const _a2=_62-_92;const _b2=_62+_92;const alpha=Math.sin(_Q1)/(2*_P1);const _c2=(2*Math.sqrt(_02)*alpha);const _S1=_a2+_c2;const _z1=2*(_72-_82);
const _A1=_a2-_c2;const _B1=_02*(_b2+_c2);const _C1=-2*_02*(_72+_82);const _D1=_02*(_b2-_c2);this._z1=_z1/_S1;this._A1=_A1/_S1;this._B1=_B1/_S1;this._C1=_C1/_S1;this._D1=_D1/_S1;this._V1=_Z1;this._J1=_P1;this._W1=__1;}}registerProcessor("hi-shelf-processor",_52);function _d2(){}_d2._e2={_f2:0,_g2:1,_h2:2,_i2:3,_j2:4,_k2:5};_d2._l2=function(_m2){return 1.0-_m2;};_d2._n2=function(_m2){return _m2;};_d2._o2=function(_m2){return 0.5*(Math.sin((_m2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_d2._p2=function(_m2){if(_m2<0.5){
return 0.0;}return 1.0;};_d2._q2=function(_m2){if(_m2<0.5){return 2.0*_m2;}return 2.0-(2.0*_m2);};_d2._r2=[_d2._l2,_d2._n2,_d2._o2,_d2._p2,_d2._q2];_s2._t2=512;_s2._u2=1.0/_s2._t2;function _s2(_v2){this.data=new Float32Array(_s2._t2);for(let _81=0;_81<_s2._t2;++_81){this.data[_81]=_v2(_81*_s2._u2);}}_s2.prototype._w2=function(_m2){_m2=Math.max(0.0,_m2);_m2=Math.min(_m2,1.0);const _x2=_m2*_s2._t2;const _y2=~~_x2;const _z2=_x2-_y2;let _A2=_y2;let _B2=_A2+1;if(_A2>=_s2._t2){_A2-=_s2._t2;}if(_B2>=_s2._t2){_B2-=_s2._t2;
}const _C2=this.data[_A2];const _D2=this.data[_B2];return _C2+(_D2-_C2)*_z2;};;_E2._F2=[];_E2._G2=!1;_E2._H2=0.0;_E2._U1=20.0;function _E2(){this._I2=48000;this.shape=_d2._e2._h2;this.freq=1.0;this._J2=0.0;this._u2=0.0;this._K2=0.0;if(_E2._G2==true){return;}for(let _81=0;_81<_d2._e2._k2;++_81){_E2._F2[_81]=new _s2(_d2._r2[_81]);}_E2._G2=true;}_E2._L2=function(){return(_E2._G2==!0);};_E2.prototype._M2=function(_N2){this._I2=_N2;this._O2();};;_E2.prototype._P2=function(_Z1){_Z1=Math.max(_E2._H2,_Z1);_Z1=Math.min(_Z1,
_E2._U1);this.freq=_Z1;this._O2();};;_E2.prototype._Q2=function(_R2){_R2=Math.max(0.0,_R2);_R2=Math.min(_R2,1.0);const _S2=_R2-this._K2;this._K2=_R2;this._J2+=_S2;while(this._J2>=1.0){this._J2-=1.0;}while(this._J2<0.0){this._J2+=1.0;}};;_E2.prototype._T2=function(_U2){_U2=Math.max(0,_U2);_U2=Math.min(_U2,_d2._e2._k2-1);this.shape=_U2;};;_E2.prototype._w2=function(){const _V2=_E2._F2[this.shape]._w2(this._J2);this._J2+=this._u2;while(this._J2>=1.0){this._J2-=1.0;}return _V2;};;_E2.prototype._O2=function(){
this._u2=this.freq/this._I2;};;class _W2 extends AudioWorkletProcessor{static _X2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_W2._X2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];
const _Y2=(_W2._X2*sampleRate)+1;this.buffer=new Array(_01);this._Z2=new Uint32Array(_01);for(let _71=0;_71<_01;++_71)this.buffer[_71]=new Float32Array(_Y2);}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){_d1[_e1]=_c1[_e1];const __2=(time[_e1]!==undefined)?time[_e1]:time[0];
const _03=this._w2(_71,__2);const _X1=(feedback[_e1]!==undefined)?feedback[_e1]:feedback[0];const _13=_c1[_e1]+(_03*_X1);this.write(_71,_13);const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0.0){continue;}const _i1=(mix[_e1]!==undefined)?mix[_e1]:mix[0];_d1[_e1]*=(1-_i1);_d1[_e1]+=(_03*_i1);}}return this._j1;}_w2(_23,_33){const _43=_33*sampleRate;let _A2=(this._Z2[_23]-~~_43);let _B2=(_A2-1);while(_A2<0)_A2+=this.buffer[_23].length;while(_B2<0)_B2+=this.buffer[_23].length;const _53=_43-~~_43;
const _C2=this.buffer[_23][_A2];const _D2=this.buffer[_23][_B2];return _C2+(_D2-_C2)*_53;}write(_23,_I){++this._Z2[_23];this._Z2[_23]%=this.buffer[_23].length;this.buffer[_23][this._Z2[_23]]=_I;}}registerProcessor("delay-processor",_W2);AudioWorkletProcessor.prototype.__=function(){this._j1=true;this.port.onmessage=(_63)=>{if(_63.data==="kill")this._j1=false;};};;class _73 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,
maxValue:1}];}constructor(){super();this.__();}process(_a1,_b1,parameters){const input=_a1[0];const bypass=parameters.bypass;for(let _71=0;_71<input.length;++_71){const _c1=input[_71];for(let _e1=0;_e1<_c1.length;++_e1){const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_b1[_h1][_71][_e1]=_c1[_e1];}}return this._j1;}}class _83 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this.__();}process(_a1,
_b1,parameters){const _t1=_a1[0];const _u1=_a1[1];const output=_b1[0];const gain=parameters.gain;for(let _71=0;_71<_u1.length;++_71){const _c1=_u1[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1)_d1[_e1]=_c1[_e1];}for(let _71=0;_71<_t1.length;++_71){const _c1=_t1[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];_d1[_e1]+=_c1[_e1]*_Y1;}}return this._j1;}}registerProcessor("audio-bus-input",_73);registerProcessor("audio-bus-output",
_83);class _93 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _a3=[undefined,undefined,
2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._b3=new Float32Array(_01);this._c3=new Uint32Array(_01);}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;
++_e1){_d1[_e1]=_c1[_e1];if(this._c3[_71]===0)this._b3[_71]=_c1[_e1];const _X1=(factor[_e1]!==undefined)?factor[_e1]:factor[0];++this._c3[_71];this._c3[_71]%=_X1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0.0){continue;}let _g1=this._b3[_71];const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];_g1*=_Y1;_g1=Math.max(Math.min(_g1,1.0),-1.0);const _d3=(resolution[_e1]!==undefined)?resolution[_e1]:resolution[0];const max=(_g1>0.0)?_93._a3[_d3]-1:_93._a3[_d3];_g1=Math.round(_g1*max)/max;
const _i1=(mix[_e1]!==undefined)?mix[_e1]:mix[0];_d1[_e1]*=(1.0-_i1);_d1[_e1]+=(_g1*_i1);}}return this._j1;}}registerProcessor("bitcrusher-processor",_93);class _e3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",
defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._f3=new Array(_01).fill(1.0);this._g3=new Array(_01).fill(0.0);this._h3=new Array(_01).fill(_d2._e2._f2);this._i3=new Array(_01);for(let _71=0;_71<_01;++_71){this._i3[_71]=new _E2();this._i3[_71]._M2(sampleRate);this._i3[_71]._P2(this._f3[_71]);this._i3[_71]._T2(this._h3[_71]);if(_71%2===1){this._i3[_71]._Q2(this._g3[_71]);
}}}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){_d1[_e1]=_c1[_e1];const _d3=(rate[_e1]!==undefined)?rate[_e1]:rate[0];const _j3=(offset[_e1]!==undefined)?offset[_e1]:offset[0];const _k3=(shape[_e1]!==undefined)?shape[_e1]:shape[0];
this._l3(_71,_d3,_j3,_k3);const _m3=this._i3[_71]._w2();const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0.0){continue;}const _81=(intensity[_e1]!==undefined)?intensity[_e1]:intensity[0];const out=_c1[_e1]*_m3*_81;_d1[_e1]*=(1.0-_81);_d1[_e1]+=out;}}return this._j1;}_l3(_23,_n3,_R2,_U2){if(_n3!==this._f3[_23]){this._i3[_23]._P2(_n3);this._f3[_23]=_n3;}if(_R2!==this._g3[_23]){if(_23%2===1){this._i3[_23]._Q2(_R2);}this._g3[_23]=_R2;}if(_U2!==this._h3[_23]){this._i3[_23]._T2(_U2);this._h3[_23]=_U2;
}}}registerProcessor("tremolo-processor",_e3);class _o3{constructor(_33=1e-3){this.setTime(_33);}setTime(_33){this._p3=Math.exp(-1/(_33*sampleRate));}process(_q3,_r3){return _q3+this._p3*(_r3-_q3);}}class _s3{constructor(_t3,_u3){this._v3=new _o3(_t3);this._w3=new _o3(_u3);this._x3=_t3;this._y3=_u3;}_z3(_33){if(_33===this._x3)return;this._v3.setTime(_33);this._x3=_33;}_A3(_33){if(_33===this._y3)return;this._w3.setTime(_33);this._y3=_33;}process(_q3,_r3){if(_q3>_r3)return this._v3.process(_q3,_r3);else return this._w3.process(_q3,
_r3);}}class _B3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",
defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_C3){super();this.__();const _v3=_B3.parameterDescriptors.find(_D3=>_D3.name==="attack");const _w3=_B3.parameterDescriptors.find(_D3=>_D3.name==="release");this._E3=new _s3(_v3.defaultValue,_w3.defaultValue);this._F3=0;}process(_G3,_H3,_I3){const input=_G3[0];const output=_H3[0];const bypass=_I3.bypass;const ingain=_I3.ingain;const outgain=_I3.outgain;const threshold=_I3.threshold;
const ratio=_I3.ratio;const attack=_I3.attack;const release=_I3.release;if(input.length===0)return this._j1;for(let _e1=0;_e1<input[0].length;++_e1){let _J3=input.map(_K3=>_K3[_e1]);output.forEach((_K3,_L3)=>{_K3[_e1]=_J3[_L3];});const _M3=(ingain[_e1]!==undefined)?ingain[_e1]:ingain[0];_J3=_J3.map(_N3=>_N3*=_M3);const rect=_J3.map(_N3=>Math.abs(_N3));const max=Math.max(...rect);const _O3=_P3(max);const __2=(threshold[_e1]!==undefined)?threshold[_e1]:threshold[0];const _Q3=_P3(__2);const _R3=Math.max(0,_O3-_Q3);
const _v3=(attack[_e1]!==undefined)?attack[_e1]:attack[0];const _w3=(release[_e1]!==undefined)?release[_e1]:release[0];this._E3._z3(_v3);this._E3._A3(_w3);this._F3=this._E3.process(_R3,this._F3);const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];if(_h1>0)continue;const _d3=(ratio[_e1]!==undefined)?ratio[_e1]:ratio[0];const _S3=(this._F3/_d3)-this._F3;const _Y1=_T3(_S3);_J3=_J3.map(_N3=>_N3*=_Y1);const _U3=(outgain[_e1]!==undefined)?outgain[_e1]:outgain[0];_J3=_J3.map(_N3=>_N3*=_U3);output.forEach((_K3,
_L3)=>{_K3[_e1]=_J3[_L3];});}return this._j1;}}function _P3(_V3){return 20*Math.log10(_V3);}function _T3(_V3){return Math.pow(10,_V3/20);}registerProcessor("compressor-processor",_B3);class _W3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",
defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_Z){super();this.__();const _01=_Z.outputChannelCount[0];this._z1=0;this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=new Float32Array(_01);this._F1=new Float32Array(_01);this._G1=new Float32Array(_01);this._H1=new Float32Array(_01);this._V1=-1;this._J1=-1;this._W1=-1;}process(_a1,_b1,parameters){const input=_a1[0];const output=_b1[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _K1=(freq.length===1&&q.length===1&&gain.length===1);if(_K1)this._L1(freq[0],q[0],gain[0]);for(let _71=0;_71<input.length;++_71){const _c1=input[_71];const _d1=output[_71];for(let _e1=0;_e1<_c1.length;++_e1){if(_K1===!1){const _X1=(freq[_e1]!==undefined)?freq[_e1]:freq[0];const _M1=(q[_e1]!==undefined)?q[_e1]:q[0];const _Y1=(gain[_e1]!==undefined)?gain[_e1]:gain[0];this._L1(_X1,_M1,_Y1);}const _N1=this._B1*_c1[_e1]+this._C1*this._E1[_71]+this._D1*this._F1[_71]-this._z1*this._G1[_71]-this._A1*this._H1[_71];
this._F1[_71]=this._E1[_71];this._E1[_71]=_c1[_e1];this._H1[_71]=this._G1[_71];this._G1[_71]=_N1;const _h1=(bypass[_e1]!==undefined)?bypass[_e1]:bypass[0];_d1[_e1]=(_h1>0)?_c1[_e1]:_N1;}}return this._j1;}_L1(_Z1,_P1,__1){if(_Z1===this._V1&&_P1===this._J1&&__1===this._W1)return;const _Q1=2*Math.PI*_Z1/sampleRate;const _R1=Math.cos(_Q1);const _02=Math.sqrt(__1);const _62=_02+1;const _72=_02-1;const _82=_62*_R1;const _92=_72*_R1;const _a2=_62-_92;const _b2=_62+_92;const alpha=Math.sin(_Q1)/(2*_P1);const _c2=(2*Math.sqrt(_02)*alpha);
const _S1=_b2+_c2;const _z1=-2*(_72+_82);const _A1=_b2-_c2;const _B1=_02*(_a2+_c2);const _C1=2*_02*(_72-_82);const _D1=_02*(_a2-_c2);this._z1=_z1/_S1;this._A1=_A1/_S1;this._B1=_B1/_S1;this._C1=_C1/_S1;this._D1=_D1/_S1;this._V1=_Z1;this._J1=_P1;this._W1=__1;}}registerProcessor("lo-shelf-processor",_W3);