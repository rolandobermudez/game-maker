class _X{constructor(_Y){this._Z=0;this.__=0;this.feedback=0;this._01=0;this.buffer=new Float32Array(_Y);this._11=0;}process(_21){const out=this.buffer[this._11];this._01=(this._01*this._Z)+(out*this.__);this.buffer[this._11]=_21+(this._01*this.feedback);++this._11;this._11%=this.buffer.length;return out;}_31(_41){this.feedback=Math.min(Math.max(0,_41),1);}_51(_61){this._Z=Math.min(Math.max(0,_61),1);this.__=1-this._Z;}}class _71{constructor(_Y){this.feedback=0;this.buffer=new Float32Array(_Y);this._11=0;
}process(_21){const out=this.buffer[this._11];this.buffer[this._11]=_21+(out*this.feedback);++this._11;this._11%=this.buffer.length;return(out-_21);}_31(_41){this.feedback=Math.min(Math.max(0,_41),1);}}class _81 extends AudioWorkletProcessor{static _91=8;static _a1=4;static _b1=0.015;static _c1=0.4;static _d1=0.28;static _e1=0.7;static _f1=[1116,1188,1277,1356,1422,1491,1557,1617];static _g1=[1139,1211,1300,1379,1445,1514,1580,1640];static _h1=[556,441,341,225];static _i1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._m1=-1;this._n1=-1;this._o1=new Array(_l1);this._p1=new Array(_l1);const _q1=[_81._f1,_81._g1];const _r1=[_81._h1,
_81._i1];for(let _s1=0;_s1<_l1;++_s1){this._o1[_s1]=new Array(_81._91);this._p1[_s1]=new Array(_81._a1);for(let _t1=0;_t1<_81._91;++_t1)this._o1[_s1][_t1]=new _X(_q1[_s1%_q1.length][_t1]);for(let _t1=0;_t1<_81._a1;++_t1)this._p1[_s1][_t1]=new _71(_r1[_s1%_r1.length][_t1]);}this._u1(0.5);this._51(0.5);for(let _s1=0;_s1<_l1;++_s1)for(let _t1=0;_t1<_81._a1;++_t1)this._p1[_s1][_t1]._31(0.5);}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){const _z1=(size[_z1]!==undefined)?size[_z1]:size[0];const _A1=(damp[_z1]!==undefined)?damp[_z1]:damp[0];this._u1(_z1);this._51(_A1);_y1[_z1]=_x1[_z1];let out=0;const _B1=_x1[_z1]*_81._b1;for(let _t1=0;_t1<_81._91;++_t1)out+=this._o1[_s1][_t1].process(_B1);for(let _t1=0;_t1<_81._a1;++_t1)out=this._p1[_s1][_t1].process(out);const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];
if(_C1>0.0){continue;}const _D1=(mix[_z1]!==undefined)?mix[_z1]:mix[0];_y1[_z1]*=(1-_D1);_y1[_z1]+=(out*_D1);}}return this._E1;}_u1(_Y){if(_Y===this._m1)return;const size=(_Y*_81._d1)+_81._e1;for(let _s1=0;_s1<this._o1.length;++_s1)for(let _t1=0;_t1<_81._91;++_t1)this._o1[_s1][_t1]._31(size);this._m1=_Y;}_51(_61){if(_61===this._n1)return;const damp=_61*_81._c1;for(let _s1=0;_s1<this._o1.length;++_s1)for(let _t1=0;_t1<_81._91;++_t1)this._o1[_s1][_t1]._51(damp);this._n1=_61;}}registerProcessor("reverb1-processor",
_81);class _F1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._k1();}process(_G1,_H1,_I1){const input=_G1[0];const _J1=_H1[0];const _K1=_H1[1];for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _L1=_J1[_s1];const _M1=_K1[_s1];for(let _z1=0;_z1<_x1.length;++_z1){_L1[_z1]=_x1[_z1];_M1[_z1]=_x1[_z1];}}return this._E1;}}class _N1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._k1();}process(_G1,_H1,_I1){const _O1=_G1[0];const _P1=_G1[1];const output=_H1[0];const bypass=_I1.bypass;for(let _s1=0;_s1<_P1.length;++_s1){const _Q1=_O1[_s1];const _R1=_P1[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_Q1.length;++_z1){const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0){_y1[_z1]=_R1[_z1];}else {_y1[_z1]=_Q1[_z1];}}}return this._E1;}}registerProcessor("eq-input",_F1);registerProcessor("eq-output",_N1);class _S1 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _T1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_T1),minValue:10.0,maxValue:_T1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=new Float32Array(_l1);this.__1=new Float32Array(_l1);
this._02=new Float32Array(_l1);this._12=new Float32Array(_l1);this._22=-1;this._32=-1;}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _42=(cutoff.length===1&&q.length===1);if(_42)this._52(cutoff[0],q[0]);for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){if(_42===!1){const _s1=(cutoff[_z1]!==undefined)?cutoff[_z1]:cutoff[0];const _62=(q[_z1]!==undefined)?q[_z1]:q[0];
this._52(_s1,_62);}const _72=this._W1*_x1[_z1]+this._X1*this._Z1[_s1]+this._Y1*this.__1[_s1]-this._U1*this._02[_s1]-this._V1*this._12[_s1];this.__1[_s1]=this._Z1[_s1];this._Z1[_s1]=_x1[_z1];this._12[_s1]=this._02[_s1];this._02[_s1]=_72;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_y1[_z1]=(_C1>0)?_x1[_z1]:_72;}}return this._E1;}_52(_82,_92){if(_82===this._22&&_92===this._32)return;const _a2=2*Math.PI*_82/sampleRate;const alpha=Math.sin(_a2)/(2*_92);const _b2=Math.cos(_a2);const _c2=1+alpha;
const _U1=-2*_b2;const _V1=1-alpha;const _W1=(1-_b2)/2;const _X1=1-_b2;const _Y1=(1-_b2)/2;this._U1=_U1/_c2;this._V1=_V1/_c2;this._W1=_W1/_c2;this._X1=_X1/_c2;this._Y1=_Y1/_c2;this._22=_82;this._32=_92;}}registerProcessor("lpf2-processor",_S1);class _d2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _e2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_e2),minValue:10.0,maxValue:_e2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=new Float32Array(_l1);this.__1=new Float32Array(_l1);this._02=new Float32Array(_l1);this._12=new Float32Array(_l1);this._f2=-1;this._32=-1;this._g2=-1;}process(_v1,_w1,parameters){const input=_v1[0];
const output=_w1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],q[0],gain[0]);for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){if(_42===!1){const _h2=(freq[_z1]!==undefined)?freq[_z1]:freq[0];const _62=(q[_z1]!==undefined)?q[_z1]:q[0];const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];this._52(_h2,
_62,_i2);}const _72=this._W1*_x1[_z1]+this._X1*this._Z1[_s1]+this._Y1*this.__1[_s1]-this._U1*this._02[_s1]-this._V1*this._12[_s1];this.__1[_s1]=this._Z1[_s1];this._Z1[_s1]=_x1[_z1];this._12[_s1]=this._02[_s1];this._02[_s1]=_72;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_y1[_z1]=(_C1>0)?_x1[_z1]:_72;}}return this._E1;}_52(_j2,_92,_k2){if(_j2===this._f2&&_92===this._32&&_k2===this._g2)return;const _a2=2*Math.PI*_j2/sampleRate;const _b2=Math.cos(_a2);const _l2=Math.sqrt(_k2);const alpha=Math.sin(_a2)/(2*_92);
const _m2=alpha/_l2;const _n2=alpha*_l2;const _c2=1+_m2;const _U1=-2*_b2;const _V1=1-_m2;const _W1=1+_n2;const _X1=_U1;const _Y1=1-_n2;this._U1=_U1/_c2;this._V1=_V1/_c2;this._W1=_W1/_c2;this._X1=_X1/_c2;this._Y1=_Y1/_c2;this._f2=_j2;this._32=_92;this._g2=_k2;}}registerProcessor("peak-eq-processor",_d2);class _o2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._k1();}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){_y1[_z1]=_x1[_z1];const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0.0){continue;}const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];_y1[_z1]*=_i2;}}return this._E1;}}registerProcessor("gain-processor",
_o2);class _p2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _T1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_T1),minValue:10.0,maxValue:_T1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=0;
this._Z1=new Float32Array(_l1);this.__1=new Float32Array(_l1);this._02=new Float32Array(_l1);this._12=new Float32Array(_l1);this._22=-1;this._32=-1;}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _42=(cutoff.length===1&&q.length===1);if(_42)this._52(cutoff[0],q[0]);for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){if(_42===!1){const _s1=(cutoff[_z1]!==undefined)?cutoff[_z1]:cutoff[0];
const _62=(q[_z1]!==undefined)?q[_z1]:q[0];this._52(_s1,_62);}const _72=this._W1*_x1[_z1]+this._X1*this._Z1[_s1]+this._Y1*this.__1[_s1]-this._U1*this._02[_s1]-this._V1*this._12[_s1];this.__1[_s1]=this._Z1[_s1];this._Z1[_s1]=_x1[_z1];this._12[_s1]=this._02[_s1];this._02[_s1]=_72;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_y1[_z1]=(_C1>0)?_x1[_z1]:_72;}}return this._E1;}_52(_82,_92){if(_82===this._22&&_92===this._32)return;const _a2=2*Math.PI*_82/sampleRate;const alpha=Math.sin(_a2)/(2*_92);
const _b2=Math.cos(_a2);const _c2=1+alpha;const _U1=-2*_b2;const _V1=1-alpha;const _W1=(1+_b2)/2;const _X1=-1-_b2;const _Y1=(1+_b2)/2;this._U1=_U1/_c2;this._V1=_V1/_c2;this._W1=_W1/_c2;this._X1=_X1/_c2;this._Y1=_Y1/_c2;this._22=_82;this._32=_92;}}registerProcessor("hpf2-processor",_p2);class _q2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _e2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_e2),minValue:10.0,maxValue:_e2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=new Float32Array(_l1);this.__1=new Float32Array(_l1);this._02=new Float32Array(_l1);this._12=new Float32Array(_l1);this._f2=-1;this._32=-1;this._g2=-1;}process(_v1,
_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],q[0],gain[0]);for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){if(_42===!1){const _h2=(freq[_z1]!==undefined)?freq[_z1]:freq[0];const _62=(q[_z1]!==undefined)?q[_z1]:q[0];const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];
this._52(_h2,_62,_i2);}const _72=this._W1*_x1[_z1]+this._X1*this._Z1[_s1]+this._Y1*this.__1[_s1]-this._U1*this._02[_s1]-this._V1*this._12[_s1];this.__1[_s1]=this._Z1[_s1];this._Z1[_s1]=_x1[_z1];this._12[_s1]=this._02[_s1];this._02[_s1]=_72;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_y1[_z1]=(_C1>0)?_x1[_z1]:_72;}}return this._E1;}_52(_j2,_92,_k2){if(_j2===this._f2&&_92===this._32&&_k2===this._g2)return;const _a2=2*Math.PI*_j2/sampleRate;const _b2=Math.cos(_a2);const _l2=Math.sqrt(_k2);const _r2=_l2+1;
const _s2=_l2-1;const _t2=_r2*_b2;const _u2=_s2*_b2;const _v2=_r2-_u2;const _w2=_r2+_u2;const alpha=Math.sin(_a2)/(2*_92);const _x2=(2*Math.sqrt(_l2)*alpha);const _c2=_v2+_x2;const _U1=2*(_s2-_t2);const _V1=_v2-_x2;const _W1=_l2*(_w2+_x2);const _X1=-2*_l2*(_s2+_t2);const _Y1=_l2*(_w2-_x2);this._U1=_U1/_c2;this._V1=_V1/_c2;this._W1=_W1/_c2;this._X1=_X1/_c2;this._Y1=_Y1/_c2;this._f2=_j2;this._32=_92;this._g2=_k2;}}registerProcessor("hi-shelf-processor",_q2);function _y2(){}_y2._z2={_A2:0,_B2:1,_C2:2,_D2:3,_E2:4,
_F2:5};_y2._G2=function(_H2){return 1.0-_H2;};_y2._I2=function(_H2){return _H2;};_y2._J2=function(_H2){return 0.5*(Math.sin((_H2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_y2._K2=function(_H2){if(_H2<0.5){return 0.0;}return 1.0;};_y2._L2=function(_H2){if(_H2<0.5){return 2.0*_H2;}return 2.0-(2.0*_H2);};_y2._M2=[_y2._G2,_y2._I2,_y2._J2,_y2._K2,_y2._L2];_N2._O2=512;_N2._P2=1.0/_N2._O2;function _N2(_Q2){this.data=new Float32Array(_N2._O2);for(let _t1=0;_t1<_N2._O2;++_t1){this.data[_t1]=_Q2(_t1*_N2._P2);}}_N2.prototype._R2=function(_H2){
_H2=Math.max(0.0,_H2);_H2=Math.min(_H2,1.0);const _S2=_H2*_N2._O2;const _T2=~~_S2;const _U2=_S2-_T2;let _V2=_T2;let _W2=_V2+1;if(_V2>=_N2._O2){_V2-=_N2._O2;}if(_W2>=_N2._O2){_W2-=_N2._O2;}const _X2=this.data[_V2];const _Y2=this.data[_W2];return _X2+(_Y2-_X2)*_U2;};;_Z2.__2=[];_Z2._03=!1;_Z2._13=0.0;_Z2._e2=20.0;function _Z2(){this._23=48000;this.shape=_y2._z2._C2;this.freq=1.0;this._33=0.0;this._P2=0.0;this._43=0.0;if(_Z2._03==true){return;}for(let _t1=0;_t1<_y2._z2._F2;++_t1){_Z2.__2[_t1]=new _N2(_y2._M2[_t1]);
}_Z2._03=true;}_Z2._53=function(){return(_Z2._03==!0);};_Z2.prototype._63=function(_73){this._23=_73;this._83();};;_Z2.prototype._93=function(_j2){_j2=Math.max(_Z2._13,_j2);_j2=Math.min(_j2,_Z2._e2);this.freq=_j2;this._83();};;_Z2.prototype._a3=function(_b3){_b3=Math.max(0.0,_b3);_b3=Math.min(_b3,1.0);const _c3=_b3-this._43;this._43=_b3;this._33+=_c3;while(this._33>=1.0){this._33-=1.0;}while(this._33<0.0){this._33+=1.0;}};;_Z2.prototype._d3=function(_e3){_e3=Math.max(0,_e3);_e3=Math.min(_e3,_y2._z2._F2-1);
this.shape=_e3;};;_Z2.prototype._R2=function(){const _f3=_Z2.__2[this.shape]._R2(this._33);this._33+=this._P2;while(this._33>=1.0){this._33-=1.0;}return _f3;};;_Z2.prototype._83=function(){this._P2=this.freq/this._23;};;class _g3 extends AudioWorkletProcessor{static _h3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_g3._h3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];const _i3=(_g3._h3*sampleRate)+1;this.buffer=new Array(_l1);this._j3=new Uint32Array(_l1);for(let _s1=0;_s1<_l1;++_s1)this.buffer[_s1]=new Float32Array(_i3);}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){_y1[_z1]=_x1[_z1];const _k3=(time[_z1]!==undefined)?time[_z1]:time[0];const _l3=this._R2(_s1,_k3);const _h2=(feedback[_z1]!==undefined)?feedback[_z1]:feedback[0];const _m3=_x1[_z1]+(_l3*_h2);this.write(_s1,_m3);const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0.0){continue;}const _D1=(mix[_z1]!==undefined)?mix[_z1]:mix[0];_y1[_z1]*=(1-_D1);_y1[_z1]+=(_l3*_D1);
}}return this._E1;}_R2(_n3,_o3){const _p3=_o3*sampleRate;let _V2=(this._j3[_n3]-~~_p3);let _W2=(_V2-1);while(_V2<0)_V2+=this.buffer[_n3].length;while(_W2<0)_W2+=this.buffer[_n3].length;const _q3=_p3-~~_p3;const _X2=this.buffer[_n3][_V2];const _Y2=this.buffer[_n3][_W2];return _X2+(_Y2-_X2)*_q3;}write(_n3,_21){++this._j3[_n3];this._j3[_n3]%=this.buffer[_n3].length;this.buffer[_n3][this._j3[_n3]]=_21;}}registerProcessor("delay-processor",_g3);AudioWorkletProcessor.prototype._k1=function(){this._E1=true;this.port.onmessage=(_r3)=>{
if(_r3.data==="kill")this._E1=false;};};;class _s3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._k1();}process(_v1,_w1,parameters){const input=_v1[0];const bypass=parameters.bypass;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];for(let _z1=0;_z1<_x1.length;++_z1){const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_w1[_C1][_s1][_z1]=_x1[_z1];}}return this._E1;
}}class _t3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._k1();}process(_v1,_w1,parameters){const _O1=_v1[0];const _P1=_v1[1];const output=_w1[0];const gain=parameters.gain;for(let _s1=0;_s1<_P1.length;++_s1){const _x1=_P1[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1)_y1[_z1]=_x1[_z1];}for(let _s1=0;_s1<_O1.length;++_s1){const _x1=_O1[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;
++_z1){const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];_y1[_z1]+=_x1[_z1]*_i2;}}return this._E1;}}registerProcessor("audio-bus-input",_s3);registerProcessor("audio-bus-output",_t3);class _u3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _v3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._w3=new Float32Array(_l1);this._x3=new Uint32Array(_l1);}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){_y1[_z1]=_x1[_z1];if(this._x3[_s1]===0)this._w3[_s1]=_x1[_z1];const _h2=(factor[_z1]!==undefined)?factor[_z1]:factor[0];++this._x3[_s1];this._x3[_s1]%=_h2;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0.0){continue;}let _B1=this._w3[_s1];const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];_B1*=_i2;_B1=Math.max(Math.min(_B1,
1.0),-1.0);const _y3=(resolution[_z1]!==undefined)?resolution[_z1]:resolution[0];const max=(_B1>0.0)?_u3._v3[_y3]-1:_u3._v3[_y3];_B1=Math.round(_B1*max)/max;const _D1=(mix[_z1]!==undefined)?mix[_z1]:mix[0];_y1[_z1]*=(1.0-_D1);_y1[_z1]+=(_B1*_D1);}}return this._E1;}}registerProcessor("bitcrusher-processor",_u3);class _z3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._A3=new Array(_l1).fill(1.0);this._B3=new Array(_l1).fill(0.0);this._C3=new Array(_l1).fill(_y2._z2._A2);this._D3=new Array(_l1);for(let _s1=0;_s1<_l1;++_s1){
this._D3[_s1]=new _Z2();this._D3[_s1]._63(sampleRate);this._D3[_s1]._93(this._A3[_s1]);this._D3[_s1]._d3(this._C3[_s1]);if(_s1%2===1){this._D3[_s1]._a3(this._B3[_s1]);}}}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){_y1[_z1]=_x1[_z1];
const _y3=(rate[_z1]!==undefined)?rate[_z1]:rate[0];const _E3=(offset[_z1]!==undefined)?offset[_z1]:offset[0];const _F3=(shape[_z1]!==undefined)?shape[_z1]:shape[0];this._G3(_s1,_y3,_E3,_F3);const _H3=this._D3[_s1]._R2();const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0.0){continue;}const _t1=(intensity[_z1]!==undefined)?intensity[_z1]:intensity[0];const out=_x1[_z1]*_H3*_t1;_y1[_z1]*=(1.0-_t1);_y1[_z1]+=out;}}return this._E1;}_G3(_n3,_I3,_b3,_e3){if(_I3!==this._A3[_n3]){this._D3[_n3]._93(_I3);
this._A3[_n3]=_I3;}if(_b3!==this._B3[_n3]){if(_n3%2===1){this._D3[_n3]._a3(_b3);}this._B3[_n3]=_b3;}if(_e3!==this._C3[_n3]){this._D3[_n3]._d3(_e3);this._C3[_n3]=_e3;}}}registerProcessor("tremolo-processor",_z3);class _J3{constructor(_o3=1e-3){this.setTime(_o3);}setTime(_o3){this._K3=Math.exp(-1/(_o3*sampleRate));}process(_L3,_M3){return _L3+this._K3*(_M3-_L3);}}class _N3{constructor(_O3,_P3){this._Q3=new _J3(_O3);this._R3=new _J3(_P3);this._S3=_O3;this._T3=_P3;}_U3(_o3){if(_o3===this._S3)return;this._Q3.setTime(_o3);
this._S3=_o3;}_V3(_o3){if(_o3===this._T3)return;this._R3.setTime(_o3);this._T3=_o3;}process(_L3,_M3){if(_L3>_M3)return this._Q3.process(_L3,_M3);else return this._R3.process(_L3,_M3);}}class _W3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_X3){super();this._k1();const _Q3=_W3.parameterDescriptors.find(_Y3=>_Y3.name==="attack");const _R3=_W3.parameterDescriptors.find(_Y3=>_Y3.name==="release");this._Z3=new _N3(_Q3.defaultValue,_R3.defaultValue);
this.__3=0;}process(_04,_14,_24){const input=_04[0];const output=_14[0];const bypass=_24.bypass;const ingain=_24.ingain;const outgain=_24.outgain;const threshold=_24.threshold;const ratio=_24.ratio;const attack=_24.attack;const release=_24.release;if(input.length===0)return this._E1;for(let _z1=0;_z1<input[0].length;++_z1){let _34=input.map(_44=>_44[_z1]);output.forEach((_44,_54)=>{_44[_z1]=_34[_54];});const _64=(ingain[_z1]!==undefined)?ingain[_z1]:ingain[0];_34=_34.map(_74=>_74*=_64);const rect=_34.map(_74=>Math.abs(_74));
const max=Math.max(...rect);const _84=_94(max);const _k3=(threshold[_z1]!==undefined)?threshold[_z1]:threshold[0];const _a4=_94(_k3);const _b4=Math.max(0,_84-_a4);const _Q3=(attack[_z1]!==undefined)?attack[_z1]:attack[0];const _R3=(release[_z1]!==undefined)?release[_z1]:release[0];this._Z3._U3(_Q3);this._Z3._V3(_R3);this.__3=this._Z3.process(_b4,this.__3);const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];if(_C1>0)continue;const _y3=(ratio[_z1]!==undefined)?ratio[_z1]:ratio[0];const _c4=(this.__3/_y3)-this.__3;
const _i2=_d4(_c4);_34=_34.map(_74=>_74*=_i2);const _e4=(outgain[_z1]!==undefined)?outgain[_z1]:outgain[0];_34=_34.map(_74=>_74*=_e4);output.forEach((_44,_54)=>{_44[_z1]=_34[_54];});}return this._E1;}}function _94(_f4){return 20*Math.log10(_f4);}function _d4(_f4){return Math.pow(10,_f4/20);}registerProcessor("compressor-processor",_W3);class _g4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _e2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_e2),minValue:10.0,maxValue:_e2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_j1){super();this._k1();const _l1=_j1.outputChannelCount[0];this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=new Float32Array(_l1);this.__1=new Float32Array(_l1);this._02=new Float32Array(_l1);this._12=new Float32Array(_l1);
this._f2=-1;this._32=-1;this._g2=-1;}process(_v1,_w1,parameters){const input=_v1[0];const output=_w1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],q[0],gain[0]);for(let _s1=0;_s1<input.length;++_s1){const _x1=input[_s1];const _y1=output[_s1];for(let _z1=0;_z1<_x1.length;++_z1){if(_42===!1){const _h2=(freq[_z1]!==undefined)?freq[_z1]:freq[0];const _62=(q[_z1]!==undefined)?q[_z1]:q[0];
const _i2=(gain[_z1]!==undefined)?gain[_z1]:gain[0];this._52(_h2,_62,_i2);}const _72=this._W1*_x1[_z1]+this._X1*this._Z1[_s1]+this._Y1*this.__1[_s1]-this._U1*this._02[_s1]-this._V1*this._12[_s1];this.__1[_s1]=this._Z1[_s1];this._Z1[_s1]=_x1[_z1];this._12[_s1]=this._02[_s1];this._02[_s1]=_72;const _C1=(bypass[_z1]!==undefined)?bypass[_z1]:bypass[0];_y1[_z1]=(_C1>0)?_x1[_z1]:_72;}}return this._E1;}_52(_j2,_92,_k2){if(_j2===this._f2&&_92===this._32&&_k2===this._g2)return;const _a2=2*Math.PI*_j2/sampleRate;
const _b2=Math.cos(_a2);const _l2=Math.sqrt(_k2);const _r2=_l2+1;const _s2=_l2-1;const _t2=_r2*_b2;const _u2=_s2*_b2;const _v2=_r2-_u2;const _w2=_r2+_u2;const alpha=Math.sin(_a2)/(2*_92);const _x2=(2*Math.sqrt(_l2)*alpha);const _c2=_w2+_x2;const _U1=-2*(_s2+_t2);const _V1=_w2-_x2;const _W1=_l2*(_v2+_x2);const _X1=2*_l2*(_s2-_t2);const _Y1=_l2*(_v2-_x2);this._U1=_U1/_c2;this._V1=_V1/_c2;this._W1=_W1/_c2;this._X1=_X1/_c2;this._Y1=_Y1/_c2;this._f2=_j2;this._32=_92;this._g2=_k2;}}registerProcessor("lo-shelf-processor",
_g4);