class _z{constructor(_A){this._B=0;this._C=0;this.feedback=0;this._D=0;this.buffer=new Float32Array(_A);this._E=0;}process(_F){const out=this.buffer[this._E];this._D=(this._D*this._B)+(out*this._C);this.buffer[this._E]=_F+(this._D*this.feedback);++this._E;this._E%=this.buffer.length;return out;}_G(_H){this.feedback=Math.min(Math.max(0,_H),1);}_I(_J){this._B=Math.min(Math.max(0,_J),1);this._C=1-this._B;}}class _K{constructor(_A){this.feedback=0;this.buffer=new Float32Array(_A);this._E=0;}process(_F){const out=this.buffer[this._E];
this.buffer[this._E]=_F+(out*this.feedback);++this._E;this._E%=this.buffer.length;return(out-_F);}_G(_H){this.feedback=Math.min(Math.max(0,_H),1);}}class _L extends AudioWorkletProcessor{static _M=8;static _N=4;static _O=0.015;static _P=0.4;static _Q=0.28;static _R=0.7;static _S=[1116,1188,1277,1356,1422,1491,1557,1617];static _T=[1139,1211,1300,1379,1445,1514,1580,1640];static _U=[556,441,341,225];static _V=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._Z=-1;this.__=-1;this._01=new Array(_Y);this._11=new Array(_Y);const _21=[_L._S,_L._T];const _31=[_L._U,_L._V];for(let _41=0;_41<_Y;++_41){this._01[_41]=new Array(_L._M);
this._11[_41]=new Array(_L._N);for(let _51=0;_51<_L._M;++_51)this._01[_41][_51]=new _z(_21[_41%_21.length][_51]);for(let _51=0;_51<_L._N;++_51)this._11[_41][_51]=new _K(_31[_41%_31.length][_51]);}this._61(0.5);this._I(0.5);for(let _41=0;_41<_Y;++_41)for(let _51=0;_51<_L._N;++_51)this._11[_41][_51]._G(0.5);}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _41=0;_41<input.length;
++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){const _b1=(size[_b1]!==undefined)?size[_b1]:size[0];const _c1=(damp[_b1]!==undefined)?damp[_b1]:damp[0];this._61(_b1);this._I(_c1);_a1[_b1]=_91[_b1];let out=0;const _d1=_91[_b1]*_L._O;for(let _51=0;_51<_L._M;++_51)out+=this._01[_41][_51].process(_d1);for(let _51=0;_51<_L._N;++_51)out=this._11[_41][_51].process(out);const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0.0){continue;}const _f1=(mix[_b1]!==undefined)?mix[_b1]:mix[0];
_a1[_b1]*=(1-_f1);_a1[_b1]+=(out*_f1);}}return this._g1;}_61(_A){if(_A===this._Z)return;const size=(_A*_L._Q)+_L._R;for(let _41=0;_41<this._01.length;++_41)for(let _51=0;_51<_L._M;++_51)this._01[_41][_51]._G(size);this._Z=_A;}_I(_J){if(_J===this.__)return;const damp=_J*_L._P;for(let _41=0;_41<this._01.length;++_41)for(let _51=0;_51<_L._M;++_51)this._01[_41][_51]._I(damp);this.__=_J;}}registerProcessor("reverb1-processor",_L);class _h1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];
}constructor(){super();this._X();}process(_i1,_j1,_k1){const input=_i1[0];const _l1=_j1[0];const _m1=_j1[1];for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _n1=_l1[_41];const _o1=_m1[_41];for(let _b1=0;_b1<_91.length;++_b1){_n1[_b1]=_91[_b1];_o1[_b1]=_91[_b1];}}return this._g1;}}class _p1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._X();}process(_i1,_j1,_k1){const _q1=_i1[0];
const _r1=_i1[1];const output=_j1[0];const bypass=_k1.bypass;for(let _41=0;_41<_r1.length;++_41){const _s1=_q1[_41];const _t1=_r1[_41];const _a1=output[_41];for(let _b1=0;_b1<_s1.length;++_b1){const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0){_a1[_b1]=_t1[_b1];}else {_a1[_b1]=_s1[_b1];}}}return this._g1;}}registerProcessor("eq-input",_h1);registerProcessor("eq-output",_p1);class _u1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _v1=Math.min(sampleRate/2.0,20000.0);return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_v1),minValue:10.0,maxValue:_v1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_Y);this._C1=new Float32Array(_Y);this._D1=new Float32Array(_Y);this._E1=new Float32Array(_Y);this._F1=-1;
this._G1=-1;}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _H1=(cutoff.length===1&&q.length===1);if(_H1)this._I1(cutoff[0],q[0]);for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){if(_H1===!1){const _41=(cutoff[_b1]!==undefined)?cutoff[_b1]:cutoff[0];const _J1=(q[_b1]!==undefined)?q[_b1]:q[0];this._I1(_41,_J1);}const _K1=this._y1*_91[_b1]+this._z1*this._B1[_41]+this._A1*this._C1[_41]-this._w1*this._D1[_41]-this._x1*this._E1[_41];
this._C1[_41]=this._B1[_41];this._B1[_41]=_91[_b1];this._E1[_41]=this._D1[_41];this._D1[_41]=_K1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_a1[_b1]=(_e1>0)?_91[_b1]:_K1;}}return this._g1;}_I1(_L1,_M1){if(_L1===this._F1&&_M1===this._G1)return;const _N1=2*Math.PI*_L1/sampleRate;const alpha=Math.sin(_N1)/(2*_M1);const _O1=Math.cos(_N1);const _P1=1+alpha;const _w1=-2*_O1;const _x1=1-alpha;const _y1=(1-_O1)/2;const _z1=1-_O1;const _A1=(1-_O1)/2;this._w1=_w1/_P1;this._x1=_x1/_P1;this._y1=_y1/_P1;
this._z1=_z1/_P1;this._A1=_A1/_P1;this._F1=_L1;this._G1=_M1;}}registerProcessor("lpf2-processor",_u1);class _Q1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _R1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_R1),minValue:10.0,maxValue:_R1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_Y);this._C1=new Float32Array(_Y);this._D1=new Float32Array(_Y);this._E1=new Float32Array(_Y);this._S1=-1;this._G1=-1;this._T1=-1;}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _H1=(freq.length===1&&q.length===1&&gain.length===1);
if(_H1)this._I1(freq[0],q[0],gain[0]);for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){if(_H1===!1){const _U1=(freq[_b1]!==undefined)?freq[_b1]:freq[0];const _J1=(q[_b1]!==undefined)?q[_b1]:q[0];const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];this._I1(_U1,_J1,_V1);}const _K1=this._y1*_91[_b1]+this._z1*this._B1[_41]+this._A1*this._C1[_41]-this._w1*this._D1[_41]-this._x1*this._E1[_41];this._C1[_41]=this._B1[_41];this._B1[_41]=_91[_b1];
this._E1[_41]=this._D1[_41];this._D1[_41]=_K1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_a1[_b1]=(_e1>0)?_91[_b1]:_K1;}}return this._g1;}_I1(_W1,_M1,_X1){if(_W1===this._S1&&_M1===this._G1&&_X1===this._T1)return;const _N1=2*Math.PI*_W1/sampleRate;const _O1=Math.cos(_N1);const _Y1=Math.sqrt(_X1);const alpha=Math.sin(_N1)/(2*_M1);const _Z1=alpha/_Y1;const __1=alpha*_Y1;const _P1=1+_Z1;const _w1=-2*_O1;const _x1=1-_Z1;const _y1=1+__1;const _z1=_w1;const _A1=1-__1;this._w1=_w1/_P1;this._x1=_x1/_P1;
this._y1=_y1/_P1;this._z1=_z1/_P1;this._A1=_A1/_P1;this._S1=_W1;this._G1=_M1;this._T1=_X1;}}registerProcessor("peak-eq-processor",_Q1);class _02 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._X();}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const gain=parameters.gain;
for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){_a1[_b1]=_91[_b1];const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0.0){continue;}const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];_a1[_b1]*=_V1;}}return this._g1;}}registerProcessor("gain-processor",_02);class _12 extends AudioWorkletProcessor{static get parameterDescriptors(){const _v1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_v1),minValue:10.0,maxValue:_v1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_Y);this._C1=new Float32Array(_Y);this._D1=new Float32Array(_Y);this._E1=new Float32Array(_Y);this._F1=-1;this._G1=-1;}process(_71,_81,parameters){const input=_71[0];
const output=_81[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _H1=(cutoff.length===1&&q.length===1);if(_H1)this._I1(cutoff[0],q[0]);for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){if(_H1===!1){const _41=(cutoff[_b1]!==undefined)?cutoff[_b1]:cutoff[0];const _J1=(q[_b1]!==undefined)?q[_b1]:q[0];this._I1(_41,_J1);}const _K1=this._y1*_91[_b1]+this._z1*this._B1[_41]+this._A1*this._C1[_41]-this._w1*this._D1[_41]-this._x1*this._E1[_41];
this._C1[_41]=this._B1[_41];this._B1[_41]=_91[_b1];this._E1[_41]=this._D1[_41];this._D1[_41]=_K1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_a1[_b1]=(_e1>0)?_91[_b1]:_K1;}}return this._g1;}_I1(_L1,_M1){if(_L1===this._F1&&_M1===this._G1)return;const _N1=2*Math.PI*_L1/sampleRate;const alpha=Math.sin(_N1)/(2*_M1);const _O1=Math.cos(_N1);const _P1=1+alpha;const _w1=-2*_O1;const _x1=1-alpha;const _y1=(1+_O1)/2;const _z1=-1-_O1;const _A1=(1+_O1)/2;this._w1=_w1/_P1;this._x1=_x1/_P1;this._y1=_y1/_P1;
this._z1=_z1/_P1;this._A1=_A1/_P1;this._F1=_L1;this._G1=_M1;}}registerProcessor("hpf2-processor",_12);class _22 extends AudioWorkletProcessor{static get parameterDescriptors(){const _R1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_R1),minValue:10.0,maxValue:_R1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_Y);this._C1=new Float32Array(_Y);this._D1=new Float32Array(_Y);this._E1=new Float32Array(_Y);this._S1=-1;this._G1=-1;this._T1=-1;}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _H1=(freq.length===1&&q.length===1&&gain.length===1);
if(_H1)this._I1(freq[0],q[0],gain[0]);for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){if(_H1===!1){const _U1=(freq[_b1]!==undefined)?freq[_b1]:freq[0];const _J1=(q[_b1]!==undefined)?q[_b1]:q[0];const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];this._I1(_U1,_J1,_V1);}const _K1=this._y1*_91[_b1]+this._z1*this._B1[_41]+this._A1*this._C1[_41]-this._w1*this._D1[_41]-this._x1*this._E1[_41];this._C1[_41]=this._B1[_41];this._B1[_41]=_91[_b1];
this._E1[_41]=this._D1[_41];this._D1[_41]=_K1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_a1[_b1]=(_e1>0)?_91[_b1]:_K1;}}return this._g1;}_I1(_W1,_M1,_X1){if(_W1===this._S1&&_M1===this._G1&&_X1===this._T1)return;const _N1=2*Math.PI*_W1/sampleRate;const _O1=Math.cos(_N1);const _Y1=Math.sqrt(_X1);const _32=_Y1+1;const _42=_Y1-1;const _52=_32*_O1;const _62=_42*_O1;const _72=_32-_62;const _82=_32+_62;const alpha=Math.sin(_N1)/(2*_M1);const _92=(2*Math.sqrt(_Y1)*alpha);const _P1=_72+_92;const _w1=2*(_42-_52);
const _x1=_72-_92;const _y1=_Y1*(_82+_92);const _z1=-2*_Y1*(_42+_52);const _A1=_Y1*(_82-_92);this._w1=_w1/_P1;this._x1=_x1/_P1;this._y1=_y1/_P1;this._z1=_z1/_P1;this._A1=_A1/_P1;this._S1=_W1;this._G1=_M1;this._T1=_X1;}}registerProcessor("hi-shelf-processor",_22);function _a2(){}_a2._b2={_c2:0,_d2:1,_e2:2,_f2:3,_g2:4,_h2:5};_a2._i2=function(_j2){return 1.0-_j2;};_a2._k2=function(_j2){return _j2;};_a2._l2=function(_j2){return 0.5*(Math.sin((_j2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_a2._m2=function(_j2){if(_j2<0.5){
return 0.0;}return 1.0;};_a2._n2=function(_j2){if(_j2<0.5){return 2.0*_j2;}return 2.0-(2.0*_j2);};_a2._o2=[_a2._i2,_a2._k2,_a2._l2,_a2._m2,_a2._n2];_p2._q2=512;_p2._r2=1.0/_p2._q2;function _p2(_s2){this.data=new Float32Array(_p2._q2);for(let _51=0;_51<_p2._q2;++_51){this.data[_51]=_s2(_51*_p2._r2);}}_p2.prototype._t2=function(_j2){_j2=Math.max(0.0,_j2);_j2=Math.min(_j2,1.0);const _u2=_j2*_p2._q2;const _v2=~~_u2;const _w2=_u2-_v2;let _x2=_v2;let _y2=_x2+1;if(_x2>=_p2._q2){_x2-=_p2._q2;}if(_y2>=_p2._q2){_y2-=_p2._q2;
}const _z2=this.data[_x2];const _A2=this.data[_y2];return _z2+(_A2-_z2)*_w2;};;_B2._C2=[];_B2._D2=!1;_B2._E2=0.0;_B2._R1=20.0;function _B2(){this._F2=48000;this.shape=_a2._b2._e2;this.freq=1.0;this._G2=0.0;this._r2=0.0;this._H2=0.0;if(_B2._D2==true){return;}for(let _51=0;_51<_a2._b2._h2;++_51){_B2._C2[_51]=new _p2(_a2._o2[_51]);}_B2._D2=true;}_B2._I2=function(){return(_B2._D2==!0);};_B2.prototype._J2=function(_K2){this._F2=_K2;this._L2();};;_B2.prototype._M2=function(_W1){_W1=Math.max(_B2._E2,_W1);_W1=Math.min(_W1,
_B2._R1);this.freq=_W1;this._L2();};;_B2.prototype._N2=function(_O2){_O2=Math.max(0.0,_O2);_O2=Math.min(_O2,1.0);const _P2=_O2-this._H2;this._H2=_O2;this._G2+=_P2;while(this._G2>=1.0){this._G2-=1.0;}while(this._G2<0.0){this._G2+=1.0;}};;_B2.prototype._Q2=function(_R2){_R2=Math.max(0,_R2);_R2=Math.min(_R2,_a2._b2._h2-1);this.shape=_R2;};;_B2.prototype._t2=function(){const _S2=_B2._C2[this.shape]._t2(this._G2);this._G2+=this._r2;while(this._G2>=1.0){this._G2-=1.0;}return _S2;};;_B2.prototype._L2=function(){
this._r2=this.freq/this._F2;};;class _T2 extends AudioWorkletProcessor{static _U2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_T2._U2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];
const _V2=(_T2._U2*sampleRate)+1;this.buffer=new Array(_Y);this._W2=new Uint32Array(_Y);for(let _41=0;_41<_Y;++_41)this.buffer[_41]=new Float32Array(_V2);}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){_a1[_b1]=_91[_b1];const _X2=(time[_b1]!==undefined)?time[_b1]:time[0];
const _Y2=this._t2(_41,_X2);const _U1=(feedback[_b1]!==undefined)?feedback[_b1]:feedback[0];const _Z2=_91[_b1]+(_Y2*_U1);this.write(_41,_Z2);const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0.0){continue;}const _f1=(mix[_b1]!==undefined)?mix[_b1]:mix[0];_a1[_b1]*=(1-_f1);_a1[_b1]+=(_Y2*_f1);}}return this._g1;}_t2(__2,_03){const _13=_03*sampleRate;let _x2=(this._W2[__2]-~~_13);let _y2=(_x2-1);while(_x2<0)_x2+=this.buffer[__2].length;while(_y2<0)_y2+=this.buffer[__2].length;const _23=_13-~~_13;
const _z2=this.buffer[__2][_x2];const _A2=this.buffer[__2][_y2];return _z2+(_A2-_z2)*_23;}write(__2,_F){++this._W2[__2];this._W2[__2]%=this.buffer[__2].length;this.buffer[__2][this._W2[__2]]=_F;}}registerProcessor("delay-processor",_T2);AudioWorkletProcessor.prototype._X=function(){this._g1=true;this.port.onmessage=(_33)=>{if(_33.data==="kill")this._g1=false;};};;class _43 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,
maxValue:1}];}constructor(){super();this._X();}process(_71,_81,parameters){const input=_71[0];const bypass=parameters.bypass;for(let _41=0;_41<input.length;++_41){const _91=input[_41];for(let _b1=0;_b1<_91.length;++_b1){const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_81[_e1][_41][_b1]=_91[_b1];}}return this._g1;}}class _53 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._X();}process(_71,
_81,parameters){const _q1=_71[0];const _r1=_71[1];const output=_81[0];const gain=parameters.gain;for(let _41=0;_41<_r1.length;++_41){const _91=_r1[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1)_a1[_b1]=_91[_b1];}for(let _41=0;_41<_q1.length;++_41){const _91=_q1[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];_a1[_b1]+=_91[_b1]*_V1;}}return this._g1;}}registerProcessor("audio-bus-input",_43);registerProcessor("audio-bus-output",
_53);class _63 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _73=[undefined,undefined,
2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._83=new Float32Array(_Y);this._93=new Uint32Array(_Y);}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;
++_b1){_a1[_b1]=_91[_b1];if(this._93[_41]===0)this._83[_41]=_91[_b1];const _U1=(factor[_b1]!==undefined)?factor[_b1]:factor[0];++this._93[_41];this._93[_41]%=_U1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0.0){continue;}let _d1=this._83[_41];const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];_d1*=_V1;_d1=Math.max(Math.min(_d1,1.0),-1.0);const _a3=(resolution[_b1]!==undefined)?resolution[_b1]:resolution[0];const max=(_d1>0.0)?_63._73[_a3]-1:_63._73[_a3];_d1=Math.round(_d1*max)/max;
const _f1=(mix[_b1]!==undefined)?mix[_b1]:mix[0];_a1[_b1]*=(1.0-_f1);_a1[_b1]+=(_d1*_f1);}}return this._g1;}}registerProcessor("bitcrusher-processor",_63);class _b3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",
defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._c3=new Array(_Y).fill(1.0);this._d3=new Array(_Y).fill(0.0);this._e3=new Array(_Y).fill(_a2._b2._c2);this._f3=new Array(_Y);for(let _41=0;_41<_Y;++_41){this._f3[_41]=new _B2();this._f3[_41]._J2(sampleRate);this._f3[_41]._M2(this._c3[_41]);this._f3[_41]._Q2(this._e3[_41]);if(_41%2===1){this._f3[_41]._N2(this._d3[_41]);
}}}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){_a1[_b1]=_91[_b1];const _a3=(rate[_b1]!==undefined)?rate[_b1]:rate[0];const _g3=(offset[_b1]!==undefined)?offset[_b1]:offset[0];const _h3=(shape[_b1]!==undefined)?shape[_b1]:shape[0];
this._i3(_41,_a3,_g3,_h3);const _j3=this._f3[_41]._t2();const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0.0){continue;}const _51=(intensity[_b1]!==undefined)?intensity[_b1]:intensity[0];const out=_91[_b1]*_j3*_51;_a1[_b1]*=(1.0-_51);_a1[_b1]+=out;}}return this._g1;}_i3(__2,_k3,_O2,_R2){if(_k3!==this._c3[__2]){this._f3[__2]._M2(_k3);this._c3[__2]=_k3;}if(_O2!==this._d3[__2]){if(__2%2===1){this._f3[__2]._N2(_O2);}this._d3[__2]=_O2;}if(_R2!==this._e3[__2]){this._f3[__2]._Q2(_R2);this._e3[__2]=_R2;
}}}registerProcessor("tremolo-processor",_b3);class _l3{constructor(_03=1e-3){this.setTime(_03);}setTime(_03){this._m3=Math.exp(-1/(_03*sampleRate));}process(_n3,_o3){return _n3+this._m3*(_o3-_n3);}}class _p3{constructor(_q3,_r3){this._s3=new _l3(_q3);this._t3=new _l3(_r3);this._u3=_q3;this._v3=_r3;}_w3(_03){if(_03===this._u3)return;this._s3.setTime(_03);this._u3=_03;}_x3(_03){if(_03===this._v3)return;this._t3.setTime(_03);this._v3=_03;}process(_n3,_o3){if(_n3>_o3)return this._s3.process(_n3,_o3);else return this._t3.process(_n3,
_o3);}}class _y3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",
defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_z3){super();this._X();const _s3=_y3.parameterDescriptors.find(_A3=>_A3.name==="attack");const _t3=_y3.parameterDescriptors.find(_A3=>_A3.name==="release");this._B3=new _p3(_s3.defaultValue,_t3.defaultValue);this._C3=0;}process(_D3,_E3,_F3){const input=_D3[0];const output=_E3[0];const bypass=_F3.bypass;const ingain=_F3.ingain;const outgain=_F3.outgain;const threshold=_F3.threshold;
const ratio=_F3.ratio;const attack=_F3.attack;const release=_F3.release;if(input.length===0)return this._g1;for(let _b1=0;_b1<input[0].length;++_b1){let _G3=input.map(_H3=>_H3[_b1]);output.forEach((_H3,_I3)=>{_H3[_b1]=_G3[_I3];});const _J3=(ingain[_b1]!==undefined)?ingain[_b1]:ingain[0];_G3=_G3.map(_K3=>_K3*=_J3);const rect=_G3.map(_K3=>Math.abs(_K3));const max=Math.max(...rect);const _L3=_M3(max);const _X2=(threshold[_b1]!==undefined)?threshold[_b1]:threshold[0];const _N3=_M3(_X2);const _O3=Math.max(0,_L3-_N3);
const _s3=(attack[_b1]!==undefined)?attack[_b1]:attack[0];const _t3=(release[_b1]!==undefined)?release[_b1]:release[0];this._B3._w3(_s3);this._B3._x3(_t3);this._C3=this._B3.process(_O3,this._C3);const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];if(_e1>0)continue;const _a3=(ratio[_b1]!==undefined)?ratio[_b1]:ratio[0];const _P3=(this._C3/_a3)-this._C3;const _V1=_Q3(_P3);_G3=_G3.map(_K3=>_K3*=_V1);const _R3=(outgain[_b1]!==undefined)?outgain[_b1]:outgain[0];_G3=_G3.map(_K3=>_K3*=_R3);output.forEach((_H3,
_I3)=>{_H3[_b1]=_G3[_I3];});}return this._g1;}}function _M3(_S3){return 20*Math.log10(_S3);}function _Q3(_S3){return Math.pow(10,_S3/20);}registerProcessor("compressor-processor",_y3);class _T3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _R1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_R1),minValue:10.0,maxValue:_R1},{name:"q",automationRate:"a-rate",
defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_W){super();this._X();const _Y=_W.outputChannelCount[0];this._w1=0;this._x1=0;this._y1=0;this._z1=0;this._A1=0;this._B1=new Float32Array(_Y);this._C1=new Float32Array(_Y);this._D1=new Float32Array(_Y);this._E1=new Float32Array(_Y);this._S1=-1;this._G1=-1;this._T1=-1;}process(_71,_81,parameters){const input=_71[0];const output=_81[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _H1=(freq.length===1&&q.length===1&&gain.length===1);if(_H1)this._I1(freq[0],q[0],gain[0]);for(let _41=0;_41<input.length;++_41){const _91=input[_41];const _a1=output[_41];for(let _b1=0;_b1<_91.length;++_b1){if(_H1===!1){const _U1=(freq[_b1]!==undefined)?freq[_b1]:freq[0];const _J1=(q[_b1]!==undefined)?q[_b1]:q[0];const _V1=(gain[_b1]!==undefined)?gain[_b1]:gain[0];this._I1(_U1,_J1,_V1);}const _K1=this._y1*_91[_b1]+this._z1*this._B1[_41]+this._A1*this._C1[_41]-this._w1*this._D1[_41]-this._x1*this._E1[_41];
this._C1[_41]=this._B1[_41];this._B1[_41]=_91[_b1];this._E1[_41]=this._D1[_41];this._D1[_41]=_K1;const _e1=(bypass[_b1]!==undefined)?bypass[_b1]:bypass[0];_a1[_b1]=(_e1>0)?_91[_b1]:_K1;}}return this._g1;}_I1(_W1,_M1,_X1){if(_W1===this._S1&&_M1===this._G1&&_X1===this._T1)return;const _N1=2*Math.PI*_W1/sampleRate;const _O1=Math.cos(_N1);const _Y1=Math.sqrt(_X1);const _32=_Y1+1;const _42=_Y1-1;const _52=_32*_O1;const _62=_42*_O1;const _72=_32-_62;const _82=_32+_62;const alpha=Math.sin(_N1)/(2*_M1);const _92=(2*Math.sqrt(_Y1)*alpha);
const _P1=_82+_92;const _w1=-2*(_42+_52);const _x1=_82-_92;const _y1=_Y1*(_72+_92);const _z1=2*_Y1*(_42-_52);const _A1=_Y1*(_72-_92);this._w1=_w1/_P1;this._x1=_x1/_P1;this._y1=_y1/_P1;this._z1=_z1/_P1;this._A1=_A1/_P1;this._S1=_W1;this._G1=_M1;this._T1=_X1;}}registerProcessor("lo-shelf-processor",_T3);