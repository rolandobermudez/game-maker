class _11{constructor(_21){this._31=0;this._41=0;this.feedback=0;this._51=0;this.buffer=new Float32Array(_21);this._61=0;}process(_71){const out=this.buffer[this._61];this._51=(this._51*this._31)+(out*this._41);this.buffer[this._61]=_71+(this._51*this.feedback);++this._61;this._61%=this.buffer.length;return out;}_81(_91){this.feedback=Math.min(Math.max(0,_91),1);}_a1(_b1){this._31=Math.min(Math.max(0,_b1),1);this._41=1-this._31;}}class _c1{constructor(_21){this.feedback=0;this.buffer=new Float32Array(_21);
this._61=0;}process(_71){const out=this.buffer[this._61];this.buffer[this._61]=_71+(out*this.feedback);++this._61;this._61%=this.buffer.length;return(out-_71);}_81(_91){this.feedback=Math.min(Math.max(0,_91),1);}}class _d1 extends AudioWorkletProcessor{static _e1=8;static _f1=4;static _g1=0.015;static _h1=0.4;static _i1=0.28;static _j1=0.7;static _k1=[1116,1188,1277,1356,1422,1491,1557,1617];static _l1=[1139,1211,1300,1379,1445,1514,1580,1640];static _m1=[556,441,341,225];static _n1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._r1=-1;this._s1=-1;this._t1=new Array(_q1);this._u1=new Array(_q1);const _v1=[_d1._k1,_d1._l1];const _w1=[_d1._m1,
_d1._n1];for(let _x1=0;_x1<_q1;++_x1){this._t1[_x1]=new Array(_d1._e1);this._u1[_x1]=new Array(_d1._f1);for(let _y1=0;_y1<_d1._e1;++_y1)this._t1[_x1][_y1]=new _11(_v1[_x1%_v1.length][_y1]);for(let _y1=0;_y1<_d1._f1;++_y1)this._u1[_x1][_y1]=new _c1(_w1[_x1%_w1.length][_y1]);}this._z1(0.5);this._a1(0.5);for(let _x1=0;_x1<_q1;++_x1)for(let _y1=0;_y1<_d1._f1;++_y1)this._u1[_x1][_y1]._81(0.5);}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){const _E1=(size[_E1]!==undefined)?size[_E1]:size[0];const _F1=(damp[_E1]!==undefined)?damp[_E1]:damp[0];this._z1(_E1);this._a1(_F1);_D1[_E1]=_C1[_E1];let out=0;const _G1=_C1[_E1]*_d1._g1;for(let _y1=0;_y1<_d1._e1;++_y1)out+=this._t1[_x1][_y1].process(_G1);for(let _y1=0;_y1<_d1._f1;++_y1)out=this._u1[_x1][_y1].process(out);const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];
if(_H1>0.0){continue;}const _I1=(mix[_E1]!==undefined)?mix[_E1]:mix[0];_D1[_E1]*=(1-_I1);_D1[_E1]+=(out*_I1);}}return this._J1;}_z1(_21){if(_21===this._r1)return;const size=(_21*_d1._i1)+_d1._j1;for(let _x1=0;_x1<this._t1.length;++_x1)for(let _y1=0;_y1<_d1._e1;++_y1)this._t1[_x1][_y1]._81(size);this._r1=_21;}_a1(_b1){if(_b1===this._s1)return;const damp=_b1*_d1._h1;for(let _x1=0;_x1<this._t1.length;++_x1)for(let _y1=0;_y1<_d1._e1;++_y1)this._t1[_x1][_y1]._a1(damp);this._s1=_b1;}}registerProcessor("reverb1-processor",
_d1);class _K1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._p1();}process(_L1,_M1,_N1){const input=_L1[0];const _O1=_M1[0];const _P1=_M1[1];for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _Q1=_O1[_x1];const _R1=_P1[_x1];for(let _E1=0;_E1<_C1.length;++_E1){_Q1[_E1]=_C1[_E1];_R1[_E1]=_C1[_E1];}}return this._J1;}}class _S1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._p1();}process(_L1,_M1,_N1){const _T1=_L1[0];const _U1=_L1[1];const output=_M1[0];const bypass=_N1.bypass;for(let _x1=0;_x1<_U1.length;++_x1){const _V1=_T1[_x1];const _W1=_U1[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_V1.length;++_E1){const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0){_D1[_E1]=_W1[_E1];}else {_D1[_E1]=_V1[_E1];}}}return this._J1;}}registerProcessor("eq-input",_K1);registerProcessor("eq-output",_S1);class _X1 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _Y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_Y1),minValue:10.0,maxValue:_Y1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._Z1=0;this.__1=0;this._02=0;this._12=0;this._22=0;this._32=new Float32Array(_q1);this._42=new Float32Array(_q1);
this._52=new Float32Array(_q1);this._62=new Float32Array(_q1);this._72=-1;this._82=-1;}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _92=(cutoff.length===1&&q.length===1);if(_92)this._a2(cutoff[0],q[0]);for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){if(_92===!1){const _x1=(cutoff[_E1]!==undefined)?cutoff[_E1]:cutoff[0];const _b2=(q[_E1]!==undefined)?q[_E1]:q[0];
this._a2(_x1,_b2);}const _c2=this._02*_C1[_E1]+this._12*this._32[_x1]+this._22*this._42[_x1]-this._Z1*this._52[_x1]-this.__1*this._62[_x1];this._42[_x1]=this._32[_x1];this._32[_x1]=_C1[_E1];this._62[_x1]=this._52[_x1];this._52[_x1]=_c2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_D1[_E1]=(_H1>0)?_C1[_E1]:_c2;}}return this._J1;}_a2(_d2,_e2){if(_d2===this._72&&_e2===this._82)return;const _f2=2*Math.PI*_d2/sampleRate;const alpha=Math.sin(_f2)/(2*_e2);const _g2=Math.cos(_f2);const _h2=1+alpha;
const _Z1=-2*_g2;const __1=1-alpha;const _02=(1-_g2)/2;const _12=1-_g2;const _22=(1-_g2)/2;this._Z1=_Z1/_h2;this.__1=__1/_h2;this._02=_02/_h2;this._12=_12/_h2;this._22=_22/_h2;this._72=_d2;this._82=_e2;}}registerProcessor("lpf2-processor",_X1);class _i2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _j2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_j2),minValue:10.0,maxValue:_j2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._Z1=0;this.__1=0;this._02=0;this._12=0;this._22=0;this._32=new Float32Array(_q1);this._42=new Float32Array(_q1);this._52=new Float32Array(_q1);this._62=new Float32Array(_q1);this._k2=-1;this._82=-1;this._l2=-1;}process(_A1,_B1,parameters){const input=_A1[0];
const output=_B1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _92=(freq.length===1&&q.length===1&&gain.length===1);if(_92)this._a2(freq[0],q[0],gain[0]);for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){if(_92===!1){const _m2=(freq[_E1]!==undefined)?freq[_E1]:freq[0];const _b2=(q[_E1]!==undefined)?q[_E1]:q[0];const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];this._a2(_m2,
_b2,_n2);}const _c2=this._02*_C1[_E1]+this._12*this._32[_x1]+this._22*this._42[_x1]-this._Z1*this._52[_x1]-this.__1*this._62[_x1];this._42[_x1]=this._32[_x1];this._32[_x1]=_C1[_E1];this._62[_x1]=this._52[_x1];this._52[_x1]=_c2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_D1[_E1]=(_H1>0)?_C1[_E1]:_c2;}}return this._J1;}_a2(_o2,_e2,_p2){if(_o2===this._k2&&_e2===this._82&&_p2===this._l2)return;const _f2=2*Math.PI*_o2/sampleRate;const _g2=Math.cos(_f2);const _q2=Math.sqrt(_p2);const alpha=Math.sin(_f2)/(2*_e2);
const _r2=alpha/_q2;const _s2=alpha*_q2;const _h2=1+_r2;const _Z1=-2*_g2;const __1=1-_r2;const _02=1+_s2;const _12=_Z1;const _22=1-_s2;this._Z1=_Z1/_h2;this.__1=__1/_h2;this._02=_02/_h2;this._12=_12/_h2;this._22=_22/_h2;this._k2=_o2;this._82=_e2;this._l2=_p2;}}registerProcessor("peak-eq-processor",_i2);class _t2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._p1();}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){_D1[_E1]=_C1[_E1];const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0.0){continue;}const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_D1[_E1]*=_n2;}}return this._J1;}}registerProcessor("gain-processor",
_t2);class _u2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_Y1),minValue:10.0,maxValue:_Y1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._Z1=0;this.__1=0;this._02=0;this._12=0;this._22=0;
this._32=new Float32Array(_q1);this._42=new Float32Array(_q1);this._52=new Float32Array(_q1);this._62=new Float32Array(_q1);this._72=-1;this._82=-1;}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _92=(cutoff.length===1&&q.length===1);if(_92)this._a2(cutoff[0],q[0]);for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){if(_92===!1){const _x1=(cutoff[_E1]!==undefined)?cutoff[_E1]:cutoff[0];
const _b2=(q[_E1]!==undefined)?q[_E1]:q[0];this._a2(_x1,_b2);}const _c2=this._02*_C1[_E1]+this._12*this._32[_x1]+this._22*this._42[_x1]-this._Z1*this._52[_x1]-this.__1*this._62[_x1];this._42[_x1]=this._32[_x1];this._32[_x1]=_C1[_E1];this._62[_x1]=this._52[_x1];this._52[_x1]=_c2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_D1[_E1]=(_H1>0)?_C1[_E1]:_c2;}}return this._J1;}_a2(_d2,_e2){if(_d2===this._72&&_e2===this._82)return;const _f2=2*Math.PI*_d2/sampleRate;const alpha=Math.sin(_f2)/(2*_e2);
const _g2=Math.cos(_f2);const _h2=1+alpha;const _Z1=-2*_g2;const __1=1-alpha;const _02=(1+_g2)/2;const _12=-1-_g2;const _22=(1+_g2)/2;this._Z1=_Z1/_h2;this.__1=__1/_h2;this._02=_02/_h2;this._12=_12/_h2;this._22=_22/_h2;this._72=_d2;this._82=_e2;}}registerProcessor("hpf2-processor",_u2);class _v2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _j2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_j2),minValue:10.0,maxValue:_j2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._Z1=0;this.__1=0;this._02=0;this._12=0;this._22=0;this._32=new Float32Array(_q1);this._42=new Float32Array(_q1);this._52=new Float32Array(_q1);this._62=new Float32Array(_q1);this._k2=-1;this._82=-1;this._l2=-1;}process(_A1,
_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _92=(freq.length===1&&q.length===1&&gain.length===1);if(_92)this._a2(freq[0],q[0],gain[0]);for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){if(_92===!1){const _m2=(freq[_E1]!==undefined)?freq[_E1]:freq[0];const _b2=(q[_E1]!==undefined)?q[_E1]:q[0];const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];
this._a2(_m2,_b2,_n2);}const _c2=this._02*_C1[_E1]+this._12*this._32[_x1]+this._22*this._42[_x1]-this._Z1*this._52[_x1]-this.__1*this._62[_x1];this._42[_x1]=this._32[_x1];this._32[_x1]=_C1[_E1];this._62[_x1]=this._52[_x1];this._52[_x1]=_c2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_D1[_E1]=(_H1>0)?_C1[_E1]:_c2;}}return this._J1;}_a2(_o2,_e2,_p2){if(_o2===this._k2&&_e2===this._82&&_p2===this._l2)return;const _f2=2*Math.PI*_o2/sampleRate;const _g2=Math.cos(_f2);const _q2=Math.sqrt(_p2);const _w2=_q2+1;
const _x2=_q2-1;const _y2=_w2*_g2;const _z2=_x2*_g2;const _A2=_w2-_z2;const _B2=_w2+_z2;const alpha=Math.sin(_f2)/(2*_e2);const _C2=(2*Math.sqrt(_q2)*alpha);const _h2=_A2+_C2;const _Z1=2*(_x2-_y2);const __1=_A2-_C2;const _02=_q2*(_B2+_C2);const _12=-2*_q2*(_x2+_y2);const _22=_q2*(_B2-_C2);this._Z1=_Z1/_h2;this.__1=__1/_h2;this._02=_02/_h2;this._12=_12/_h2;this._22=_22/_h2;this._k2=_o2;this._82=_e2;this._l2=_p2;}}registerProcessor("hi-shelf-processor",_v2);function _D2(){}_D2._E2={_F2:0,_G2:1,_H2:2,_I2:3,_J2:4,
_K2:5};_D2._L2=function(_M2){return 1.0-_M2;};_D2._N2=function(_M2){return _M2;};_D2._O2=function(_M2){return 0.5*(Math.sin((_M2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_D2._P2=function(_M2){if(_M2<0.5){return 0.0;}return 1.0;};_D2._Q2=function(_M2){if(_M2<0.5){return 2.0*_M2;}return 2.0-(2.0*_M2);};_D2._R2=[_D2._L2,_D2._N2,_D2._O2,_D2._P2,_D2._Q2];_S2._T2=512;_S2._U2=1.0/_S2._T2;function _S2(_V2){this.data=new Float32Array(_S2._T2);for(let _y1=0;_y1<_S2._T2;++_y1){this.data[_y1]=_V2(_y1*_S2._U2);}}_S2.prototype._W2=function(_M2){
_M2=Math.max(0.0,_M2);_M2=Math.min(_M2,1.0);const _X2=_M2*_S2._T2;const _Y2=~~_X2;const _Z2=_X2-_Y2;let __2=_Y2;let _03=__2+1;if(__2>=_S2._T2){__2-=_S2._T2;}if(_03>=_S2._T2){_03-=_S2._T2;}const _13=this.data[__2];const _23=this.data[_03];return _13+(_23-_13)*_Z2;};;_33._43=[];_33._53=!1;_33._63=0.0;_33._j2=20.0;function _33(){this._73=48000;this.shape=_D2._E2._H2;this.freq=1.0;this._83=0.0;this._U2=0.0;this._93=0.0;if(_33._53==true){return;}for(let _y1=0;_y1<_D2._E2._K2;++_y1){_33._43[_y1]=new _S2(_D2._R2[_y1]);
}_33._53=true;}_33._a3=function(){return(_33._53==!0);};_33.prototype._b3=function(_c3){this._73=_c3;this._d3();};;_33.prototype._e3=function(_o2){_o2=Math.max(_33._63,_o2);_o2=Math.min(_o2,_33._j2);this.freq=_o2;this._d3();};;_33.prototype._f3=function(_g3){_g3=Math.max(0.0,_g3);_g3=Math.min(_g3,1.0);const _h3=_g3-this._93;this._93=_g3;this._83+=_h3;while(this._83>=1.0){this._83-=1.0;}while(this._83<0.0){this._83+=1.0;}};;_33.prototype._i3=function(_j3){_j3=Math.max(0,_j3);_j3=Math.min(_j3,_D2._E2._K2-1);
this.shape=_j3;};;_33.prototype._W2=function(){const _k3=_33._43[this.shape]._W2(this._83);this._83+=this._U2;while(this._83>=1.0){this._83-=1.0;}return _k3;};;_33.prototype._d3=function(){this._U2=this.freq/this._73;};;class _l3 extends AudioWorkletProcessor{static _m3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_l3._m3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];const _n3=(_l3._m3*sampleRate)+1;this.buffer=new Array(_q1);this._o3=new Uint32Array(_q1);for(let _x1=0;_x1<_q1;++_x1)this.buffer[_x1]=new Float32Array(_n3);}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){_D1[_E1]=_C1[_E1];const _p3=(time[_E1]!==undefined)?time[_E1]:time[0];const _q3=this._W2(_x1,_p3);const _m2=(feedback[_E1]!==undefined)?feedback[_E1]:feedback[0];const _r3=_C1[_E1]+(_q3*_m2);this.write(_x1,_r3);const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0.0){continue;}const _I1=(mix[_E1]!==undefined)?mix[_E1]:mix[0];_D1[_E1]*=(1-_I1);_D1[_E1]+=(_q3*_I1);
}}return this._J1;}_W2(_s3,_t3){const _u3=_t3*sampleRate;let __2=(this._o3[_s3]-~~_u3);let _03=(__2-1);while(__2<0)__2+=this.buffer[_s3].length;while(_03<0)_03+=this.buffer[_s3].length;const _v3=_u3-~~_u3;const _13=this.buffer[_s3][__2];const _23=this.buffer[_s3][_03];return _13+(_23-_13)*_v3;}write(_s3,_71){++this._o3[_s3];this._o3[_s3]%=this.buffer[_s3].length;this.buffer[_s3][this._o3[_s3]]=_71;}}registerProcessor("delay-processor",_l3);AudioWorkletProcessor.prototype._p1=function(){this._J1=true;this.port.onmessage=(_w3)=>{
if(_w3.data==="kill")this._J1=false;};};;class _x3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._p1();}process(_A1,_B1,parameters){const input=_A1[0];const bypass=parameters.bypass;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];for(let _E1=0;_E1<_C1.length;++_E1){const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_B1[_H1][_x1][_E1]=_C1[_E1];}}return this._J1;
}}class _y3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._p1();}process(_A1,_B1,parameters){const _T1=_A1[0];const _U1=_A1[1];const output=_B1[0];const gain=parameters.gain;for(let _x1=0;_x1<_U1.length;++_x1){const _C1=_U1[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1)_D1[_E1]=_C1[_E1];}for(let _x1=0;_x1<_T1.length;++_x1){const _C1=_T1[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;
++_E1){const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_D1[_E1]+=_C1[_E1]*_n2;}}return this._J1;}}registerProcessor("audio-bus-input",_x3);registerProcessor("audio-bus-output",_y3);class _z3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _A3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._B3=new Float32Array(_q1);this._C3=new Uint32Array(_q1);}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){_D1[_E1]=_C1[_E1];if(this._C3[_x1]===0)this._B3[_x1]=_C1[_E1];const _m2=(factor[_E1]!==undefined)?factor[_E1]:factor[0];++this._C3[_x1];this._C3[_x1]%=_m2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0.0){continue;}let _G1=this._B3[_x1];const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_G1*=_n2;_G1=Math.max(Math.min(_G1,
1.0),-1.0);const _D3=(resolution[_E1]!==undefined)?resolution[_E1]:resolution[0];const max=(_G1>0.0)?_z3._A3[_D3]-1:_z3._A3[_D3];_G1=Math.round(_G1*max)/max;const _I1=(mix[_E1]!==undefined)?mix[_E1]:mix[0];_D1[_E1]*=(1.0-_I1);_D1[_E1]+=(_G1*_I1);}}return this._J1;}}registerProcessor("bitcrusher-processor",_z3);class _E3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._F3=new Array(_q1).fill(1.0);this._G3=new Array(_q1).fill(0.0);this._H3=new Array(_q1).fill(_D2._E2._F2);this._I3=new Array(_q1);for(let _x1=0;_x1<_q1;++_x1){
this._I3[_x1]=new _33();this._I3[_x1]._b3(sampleRate);this._I3[_x1]._e3(this._F3[_x1]);this._I3[_x1]._i3(this._H3[_x1]);if(_x1%2===1){this._I3[_x1]._f3(this._G3[_x1]);}}}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){_D1[_E1]=_C1[_E1];
const _D3=(rate[_E1]!==undefined)?rate[_E1]:rate[0];const _J3=(offset[_E1]!==undefined)?offset[_E1]:offset[0];const _K3=(shape[_E1]!==undefined)?shape[_E1]:shape[0];this._L3(_x1,_D3,_J3,_K3);const _M3=this._I3[_x1]._W2();const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0.0){continue;}const _y1=(intensity[_E1]!==undefined)?intensity[_E1]:intensity[0];const out=_C1[_E1]*_M3*_y1;_D1[_E1]*=(1.0-_y1);_D1[_E1]+=out;}}return this._J1;}_L3(_s3,_N3,_g3,_j3){if(_N3!==this._F3[_s3]){this._I3[_s3]._e3(_N3);
this._F3[_s3]=_N3;}if(_g3!==this._G3[_s3]){if(_s3%2===1){this._I3[_s3]._f3(_g3);}this._G3[_s3]=_g3;}if(_j3!==this._H3[_s3]){this._I3[_s3]._i3(_j3);this._H3[_s3]=_j3;}}}registerProcessor("tremolo-processor",_E3);class _O3{constructor(_t3=1e-3){this.setTime(_t3);}setTime(_t3){this._P3=Math.exp(-1/(_t3*sampleRate));}process(_Q3,_R3){return _Q3+this._P3*(_R3-_Q3);}}class _S3{constructor(_T3,_U3){this._V3=new _O3(_T3);this._W3=new _O3(_U3);this._X3=_T3;this._Y3=_U3;}_Z3(_t3){if(_t3===this._X3)return;this._V3.setTime(_t3);
this._X3=_t3;}__3(_t3){if(_t3===this._Y3)return;this._W3.setTime(_t3);this._Y3=_t3;}process(_Q3,_R3){if(_Q3>_R3)return this._V3.process(_Q3,_R3);else return this._W3.process(_Q3,_R3);}}class _04 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_14){super();this._p1();const _V3=_04.parameterDescriptors.find(_24=>_24.name==="attack");const _W3=_04.parameterDescriptors.find(_24=>_24.name==="release");this._34=new _S3(_V3.defaultValue,_W3.defaultValue);
this._44=0;}process(_54,_64,_74){const input=_54[0];const output=_64[0];const bypass=_74.bypass;const ingain=_74.ingain;const outgain=_74.outgain;const threshold=_74.threshold;const ratio=_74.ratio;const attack=_74.attack;const release=_74.release;if(input.length===0)return this._J1;for(let _E1=0;_E1<input[0].length;++_E1){let _84=input.map(_94=>_94[_E1]);output.forEach((_94,_a4)=>{_94[_E1]=_84[_a4];});const _b4=(ingain[_E1]!==undefined)?ingain[_E1]:ingain[0];_84=_84.map(_c4=>_c4*=_b4);const rect=_84.map(_c4=>Math.abs(_c4));
const max=Math.max(...rect);const _d4=_e4(max);const _p3=(threshold[_E1]!==undefined)?threshold[_E1]:threshold[0];const _f4=_e4(_p3);const _g4=Math.max(0,_d4-_f4);const _V3=(attack[_E1]!==undefined)?attack[_E1]:attack[0];const _W3=(release[_E1]!==undefined)?release[_E1]:release[0];this._34._Z3(_V3);this._34.__3(_W3);this._44=this._34.process(_g4,this._44);const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_H1>0)continue;const _D3=(ratio[_E1]!==undefined)?ratio[_E1]:ratio[0];const _h4=(this._44/_D3)-this._44;
const _n2=_i4(_h4);_84=_84.map(_c4=>_c4*=_n2);const _j4=(outgain[_E1]!==undefined)?outgain[_E1]:outgain[0];_84=_84.map(_c4=>_c4*=_j4);output.forEach((_94,_a4)=>{_94[_E1]=_84[_a4];});}return this._J1;}}function _e4(_k4){return 20*Math.log10(_k4);}function _i4(_k4){return Math.pow(10,_k4/20);}registerProcessor("compressor-processor",_04);class _l4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _j2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_j2),minValue:10.0,maxValue:_j2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_o1){super();this._p1();const _q1=_o1.outputChannelCount[0];this._Z1=0;this.__1=0;this._02=0;this._12=0;this._22=0;this._32=new Float32Array(_q1);this._42=new Float32Array(_q1);this._52=new Float32Array(_q1);this._62=new Float32Array(_q1);
this._k2=-1;this._82=-1;this._l2=-1;}process(_A1,_B1,parameters){const input=_A1[0];const output=_B1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _92=(freq.length===1&&q.length===1&&gain.length===1);if(_92)this._a2(freq[0],q[0],gain[0]);for(let _x1=0;_x1<input.length;++_x1){const _C1=input[_x1];const _D1=output[_x1];for(let _E1=0;_E1<_C1.length;++_E1){if(_92===!1){const _m2=(freq[_E1]!==undefined)?freq[_E1]:freq[0];const _b2=(q[_E1]!==undefined)?q[_E1]:q[0];
const _n2=(gain[_E1]!==undefined)?gain[_E1]:gain[0];this._a2(_m2,_b2,_n2);}const _c2=this._02*_C1[_E1]+this._12*this._32[_x1]+this._22*this._42[_x1]-this._Z1*this._52[_x1]-this.__1*this._62[_x1];this._42[_x1]=this._32[_x1];this._32[_x1]=_C1[_E1];this._62[_x1]=this._52[_x1];this._52[_x1]=_c2;const _H1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_D1[_E1]=(_H1>0)?_C1[_E1]:_c2;}}return this._J1;}_a2(_o2,_e2,_p2){if(_o2===this._k2&&_e2===this._82&&_p2===this._l2)return;const _f2=2*Math.PI*_o2/sampleRate;
const _g2=Math.cos(_f2);const _q2=Math.sqrt(_p2);const _w2=_q2+1;const _x2=_q2-1;const _y2=_w2*_g2;const _z2=_x2*_g2;const _A2=_w2-_z2;const _B2=_w2+_z2;const alpha=Math.sin(_f2)/(2*_e2);const _C2=(2*Math.sqrt(_q2)*alpha);const _h2=_B2+_C2;const _Z1=-2*(_x2+_y2);const __1=_B2-_C2;const _02=_q2*(_A2+_C2);const _12=2*_q2*(_x2-_y2);const _22=_q2*(_A2-_C2);this._Z1=_Z1/_h2;this.__1=__1/_h2;this._02=_02/_h2;this._12=_12/_h2;this._22=_22/_h2;this._k2=_o2;this._82=_e2;this._l2=_p2;}}registerProcessor("lo-shelf-processor",
_l4);