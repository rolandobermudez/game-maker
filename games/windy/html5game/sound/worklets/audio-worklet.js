class _o{constructor(_p){this._q=0;this._r=0;this.feedback=0;this._s=0;this.buffer=new Float32Array(_p);this._t=0;}process(_u){const out=this.buffer[this._t];this._s=(this._s*this._q)+(out*this._r);this.buffer[this._t]=_u+(this._s*this.feedback);++this._t;this._t%=this.buffer.length;return out;}_v(_w){this.feedback=Math.min(Math.max(0,_w),1);}_x(_y){this._q=Math.min(Math.max(0,_y),1);this._r=1-this._q;}}class _z{constructor(_p){this.feedback=0;this.buffer=new Float32Array(_p);this._t=0;}process(_u){const out=this.buffer[this._t];
this.buffer[this._t]=_u+(out*this.feedback);++this._t;this._t%=this.buffer.length;return(out-_u);}_v(_w){this.feedback=Math.min(Math.max(0,_w),1);}}class _A extends AudioWorkletProcessor{static _B=8;static _C=4;static _D=0.015;static _E=0.4;static _F=0.28;static _G=0.7;static _H=[1116,1188,1277,1356,1422,1491,1557,1617];static _I=[1139,1211,1300,1379,1445,1514,1580,1640];static _J=[556,441,341,225];static _K=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._O=-1;this._P=-1;this._Q=new Array(_N);this._R=new Array(_N);const _S=[_A._H,_A._I];const _T=[_A._J,_A._K];for(let _U=0;_U<_N;++_U){this._Q[_U]=new Array(_A._B);this._R[_U]=new Array(_A._C);
for(let _V=0;_V<_A._B;++_V)this._Q[_U][_V]=new _o(_S[_U%_S.length][_V]);for(let _V=0;_V<_A._C;++_V)this._R[_U][_V]=new _z(_T[_U%_T.length][_V]);}this._W(0.5);this._x(0.5);for(let _U=0;_U<_N;++_U)for(let _V=0;_V<_A._C;++_V)this._R[_U][_V]._v(0.5);}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;
++_01){const _01=(size[_01]!==undefined)?size[_01]:size[0];const _11=(damp[_01]!==undefined)?damp[_01]:damp[0];this._W(_01);this._x(_11);__[_01]=_Z[_01];let out=0;const _21=_Z[_01]*_A._D;for(let _V=0;_V<_A._B;++_V)out+=this._Q[_U][_V].process(_21);for(let _V=0;_V<_A._C;++_V)out=this._R[_U][_V].process(out);const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0.0){continue;}const _41=(mix[_01]!==undefined)?mix[_01]:mix[0];__[_01]*=(1-_41);__[_01]+=(out*_41);}}return this._51;}_W(_p){if(_p===this._O)return;
const size=(_p*_A._F)+_A._G;for(let _U=0;_U<this._Q.length;++_U)for(let _V=0;_V<_A._B;++_V)this._Q[_U][_V]._v(size);this._O=_p;}_x(_y){if(_y===this._P)return;const damp=_y*_A._E;for(let _U=0;_U<this._Q.length;++_U)for(let _V=0;_V<_A._B;++_V)this._Q[_U][_V]._x(damp);this._P=_y;}}registerProcessor("reverb1-processor",_A);class _61 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._M();}process(_71,_81,_91){const input=_71[0];const _a1=_81[0];const _b1=_81[1];for(let _U=0;
_U<input.length;++_U){const _Z=input[_U];const _c1=_a1[_U];const _d1=_b1[_U];for(let _01=0;_01<_Z.length;++_01){_c1[_01]=_Z[_01];_d1[_01]=_Z[_01];}}return this._51;}}class _e1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._M();}process(_71,_81,_91){const _f1=_71[0];const _g1=_71[1];const output=_81[0];const bypass=_91.bypass;for(let _U=0;_U<_g1.length;++_U){const _h1=_f1[_U];const _i1=_g1[_U];
const __=output[_U];for(let _01=0;_01<_h1.length;++_01){const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0){__[_01]=_i1[_01];}else {__[_01]=_h1[_01];}}}return this._51;}}registerProcessor("eq-input",_61);registerProcessor("eq-output",_e1);class _j1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _k1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,
_k1),minValue:10.0,maxValue:_k1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=0;this._q1=new Float32Array(_N);this._r1=new Float32Array(_N);this._s1=new Float32Array(_N);this._t1=new Float32Array(_N);this._u1=-1;this._v1=-1;}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _w1=(cutoff.length===1&&q.length===1);if(_w1)this._x1(cutoff[0],q[0]);for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){if(_w1===!1){const _U=(cutoff[_01]!==undefined)?cutoff[_01]:cutoff[0];const _y1=(q[_01]!==undefined)?q[_01]:q[0];this._x1(_U,_y1);}const _z1=this._n1*_Z[_01]+this._o1*this._q1[_U]+this._p1*this._r1[_U]-this._l1*this._s1[_U]-this._m1*this._t1[_U];this._r1[_U]=this._q1[_U];this._q1[_U]=_Z[_01];this._t1[_U]=this._s1[_U];this._s1[_U]=_z1;
const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];__[_01]=(_31>0)?_Z[_01]:_z1;}}return this._51;}_x1(_A1,_B1){if(_A1===this._u1&&_B1===this._v1)return;const _C1=2*Math.PI*_A1/sampleRate;const alpha=Math.sin(_C1)/(2*_B1);const _D1=Math.cos(_C1);const _E1=1+alpha;const _l1=-2*_D1;const _m1=1-alpha;const _n1=(1-_D1)/2;const _o1=1-_D1;const _p1=(1-_D1)/2;this._l1=_l1/_E1;this._m1=_m1/_E1;this._n1=_n1/_E1;this._o1=_o1/_E1;this._p1=_p1/_E1;this._u1=_A1;this._v1=_B1;}}registerProcessor("lpf2-processor",_j1);
class _F1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_G1),minValue:10.0,maxValue:_G1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];
this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=0;this._q1=new Float32Array(_N);this._r1=new Float32Array(_N);this._s1=new Float32Array(_N);this._t1=new Float32Array(_N);this._H1=-1;this._v1=-1;this._I1=-1;}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w1=(freq.length===1&&q.length===1&&gain.length===1);if(_w1)this._x1(freq[0],q[0],gain[0]);for(let _U=0;_U<input.length;++_U){
const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){if(_w1===!1){const _J1=(freq[_01]!==undefined)?freq[_01]:freq[0];const _y1=(q[_01]!==undefined)?q[_01]:q[0];const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];this._x1(_J1,_y1,_K1);}const _z1=this._n1*_Z[_01]+this._o1*this._q1[_U]+this._p1*this._r1[_U]-this._l1*this._s1[_U]-this._m1*this._t1[_U];this._r1[_U]=this._q1[_U];this._q1[_U]=_Z[_01];this._t1[_U]=this._s1[_U];this._s1[_U]=_z1;const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];
__[_01]=(_31>0)?_Z[_01]:_z1;}}return this._51;}_x1(_L1,_B1,_M1){if(_L1===this._H1&&_B1===this._v1&&_M1===this._I1)return;const _C1=2*Math.PI*_L1/sampleRate;const _D1=Math.cos(_C1);const _N1=Math.sqrt(_M1);const alpha=Math.sin(_C1)/(2*_B1);const _O1=alpha/_N1;const _P1=alpha*_N1;const _E1=1+_O1;const _l1=-2*_D1;const _m1=1-_O1;const _n1=1+_P1;const _o1=_l1;const _p1=1-_P1;this._l1=_l1/_E1;this._m1=_m1/_E1;this._n1=_n1/_E1;this._o1=_o1/_E1;this._p1=_p1/_E1;this._H1=_L1;this._v1=_B1;this._I1=_M1;}}registerProcessor("peak-eq-processor",
_F1);class _Q1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._M();}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){__[_01]=_Z[_01];const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];
if(_31>0.0){continue;}const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];__[_01]*=_K1;}}return this._51;}}registerProcessor("gain-processor",_Q1);class _R1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _k1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_k1),minValue:10.0,maxValue:_k1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=0;this._q1=new Float32Array(_N);this._r1=new Float32Array(_N);this._s1=new Float32Array(_N);this._t1=new Float32Array(_N);this._u1=-1;this._v1=-1;}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _w1=(cutoff.length===1&&q.length===1);if(_w1)this._x1(cutoff[0],q[0]);for(let _U=0;
_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){if(_w1===!1){const _U=(cutoff[_01]!==undefined)?cutoff[_01]:cutoff[0];const _y1=(q[_01]!==undefined)?q[_01]:q[0];this._x1(_U,_y1);}const _z1=this._n1*_Z[_01]+this._o1*this._q1[_U]+this._p1*this._r1[_U]-this._l1*this._s1[_U]-this._m1*this._t1[_U];this._r1[_U]=this._q1[_U];this._q1[_U]=_Z[_01];this._t1[_U]=this._s1[_U];this._s1[_U]=_z1;const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];__[_01]=(_31>0)?_Z[_01]:_z1;
}}return this._51;}_x1(_A1,_B1){if(_A1===this._u1&&_B1===this._v1)return;const _C1=2*Math.PI*_A1/sampleRate;const alpha=Math.sin(_C1)/(2*_B1);const _D1=Math.cos(_C1);const _E1=1+alpha;const _l1=-2*_D1;const _m1=1-alpha;const _n1=(1+_D1)/2;const _o1=-1-_D1;const _p1=(1+_D1)/2;this._l1=_l1/_E1;this._m1=_m1/_E1;this._n1=_n1/_E1;this._o1=_o1/_E1;this._p1=_p1/_E1;this._u1=_A1;this._v1=_B1;}}registerProcessor("hpf2-processor",_R1);class _S1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G1=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_G1),minValue:10.0,maxValue:_G1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=0;this._q1=new Float32Array(_N);this._r1=new Float32Array(_N);
this._s1=new Float32Array(_N);this._t1=new Float32Array(_N);this._H1=-1;this._v1=-1;this._I1=-1;}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w1=(freq.length===1&&q.length===1&&gain.length===1);if(_w1)this._x1(freq[0],q[0],gain[0]);for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){if(_w1===!1){const _J1=(freq[_01]!==undefined)?freq[_01]:freq[0];
const _y1=(q[_01]!==undefined)?q[_01]:q[0];const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];this._x1(_J1,_y1,_K1);}const _z1=this._n1*_Z[_01]+this._o1*this._q1[_U]+this._p1*this._r1[_U]-this._l1*this._s1[_U]-this._m1*this._t1[_U];this._r1[_U]=this._q1[_U];this._q1[_U]=_Z[_01];this._t1[_U]=this._s1[_U];this._s1[_U]=_z1;const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];__[_01]=(_31>0)?_Z[_01]:_z1;}}return this._51;}_x1(_L1,_B1,_M1){if(_L1===this._H1&&_B1===this._v1&&_M1===this._I1)return;const _C1=2*Math.PI*_L1/sampleRate;
const _D1=Math.cos(_C1);const _N1=Math.sqrt(_M1);const _T1=_N1+1;const _U1=_N1-1;const _V1=_T1*_D1;const _W1=_U1*_D1;const _X1=_T1-_W1;const _Y1=_T1+_W1;const alpha=Math.sin(_C1)/(2*_B1);const _Z1=(2*Math.sqrt(_N1)*alpha);const _E1=_X1+_Z1;const _l1=2*(_U1-_V1);const _m1=_X1-_Z1;const _n1=_N1*(_Y1+_Z1);const _o1=-2*_N1*(_U1+_V1);const _p1=_N1*(_Y1-_Z1);this._l1=_l1/_E1;this._m1=_m1/_E1;this._n1=_n1/_E1;this._o1=_o1/_E1;this._p1=_p1/_E1;this._H1=_L1;this._v1=_B1;this._I1=_M1;}}registerProcessor("hi-shelf-processor",
_S1);function __1(){}__1._02={_12:0,_22:1,_32:2,_42:3,_52:4,_62:5};__1._72=function(_82){return 1.0-_82;};__1._92=function(_82){return _82;};__1._a2=function(_82){return 0.5*(Math.sin((_82*2.0*Math.PI)-(Math.PI/2.0))+1.0);};__1._b2=function(_82){if(_82<0.5){return 0.0;}return 1.0;};__1._c2=function(_82){if(_82<0.5){return 2.0*_82;}return 2.0-(2.0*_82);};__1._d2=[__1._72,__1._92,__1._a2,__1._b2,__1._c2];_e2._f2=512;_e2._g2=1.0/_e2._f2;function _e2(_h2){this.data=new Float32Array(_e2._f2);for(let _V=0;_V<_e2._f2;
++_V){this.data[_V]=_h2(_V*_e2._g2);}}_e2.prototype._i2=function(_82){_82=Math.max(0.0,_82);_82=Math.min(_82,1.0);const _j2=_82*_e2._f2;const _k2=~~_j2;const _l2=_j2-_k2;let _m2=_k2;let _n2=_m2+1;if(_m2>=_e2._f2){_m2-=_e2._f2;}if(_n2>=_e2._f2){_n2-=_e2._f2;}const _o2=this.data[_m2];const _p2=this.data[_n2];return _o2+(_p2-_o2)*_l2;};;_q2._r2=[];_q2._s2=!1;_q2._t2=0.0;_q2._G1=20.0;function _q2(){this._u2=48000;this.shape=__1._02._32;this.freq=1.0;this._v2=0.0;this._g2=0.0;this._w2=0.0;if(_q2._s2==true){return;
}for(let _V=0;_V<__1._02._62;++_V){_q2._r2[_V]=new _e2(__1._d2[_V]);}_q2._s2=true;}_q2._x2=function(){return(_q2._s2==!0);};_q2.prototype._y2=function(_z2){this._u2=_z2;this._A2();};;_q2.prototype._B2=function(_L1){_L1=Math.max(_q2._t2,_L1);_L1=Math.min(_L1,_q2._G1);this.freq=_L1;this._A2();};;_q2.prototype._C2=function(_D2){_D2=Math.max(0.0,_D2);_D2=Math.min(_D2,1.0);const _E2=_D2-this._w2;this._w2=_D2;this._v2+=_E2;while(this._v2>=1.0){this._v2-=1.0;}while(this._v2<0.0){this._v2+=1.0;}};;_q2.prototype._F2=function(_G2){
_G2=Math.max(0,_G2);_G2=Math.min(_G2,__1._02._62-1);this.shape=_G2;};;_q2.prototype._i2=function(){const _H2=_q2._r2[this.shape]._i2(this._v2);this._v2+=this._g2;while(this._v2>=1.0){this._v2-=1.0;}return _H2;};;_q2.prototype._A2=function(){this._g2=this.freq/this._u2;};;class _I2 extends AudioWorkletProcessor{static _J2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,
maxValue:_I2._J2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];const _K2=(_I2._J2*sampleRate)+1;this.buffer=new Array(_N);this._L2=new Uint32Array(_N);for(let _U=0;_U<_N;++_U)this.buffer[_U]=new Float32Array(_K2);}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const time=parameters.time;
const feedback=parameters.feedback;const mix=parameters.mix;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){__[_01]=_Z[_01];const _M2=(time[_01]!==undefined)?time[_01]:time[0];const _N2=this._i2(_U,_M2);const _J1=(feedback[_01]!==undefined)?feedback[_01]:feedback[0];const _O2=_Z[_01]+(_N2*_J1);this.write(_U,_O2);const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0.0){continue;}const _41=(mix[_01]!==undefined)?mix[_01]:mix[0];__[_01]*=(1-_41);
__[_01]+=(_N2*_41);}}return this._51;}_i2(_P2,_Q2){const _R2=_Q2*sampleRate;let _m2=(this._L2[_P2]-~~_R2);let _n2=(_m2-1);while(_m2<0)_m2+=this.buffer[_P2].length;while(_n2<0)_n2+=this.buffer[_P2].length;const _S2=_R2-~~_R2;const _o2=this.buffer[_P2][_m2];const _p2=this.buffer[_P2][_n2];return _o2+(_p2-_o2)*_S2;}write(_P2,_u){++this._L2[_P2];this._L2[_P2]%=this.buffer[_P2].length;this.buffer[_P2][this._L2[_P2]]=_u;}}registerProcessor("delay-processor",_I2);AudioWorkletProcessor.prototype._M=function(){this._51=true;
this.port.onmessage=(_T2)=>{if(_T2.data==="kill")this._51=false;};};;class _U2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._M();}process(_X,_Y,parameters){const input=_X[0];const bypass=parameters.bypass;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];for(let _01=0;_01<_Z.length;++_01){const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];_Y[_31][_U][_01]=_Z[_01];}}
return this._51;}}class _V2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._M();}process(_X,_Y,parameters){const _f1=_X[0];const _g1=_X[1];const output=_Y[0];const gain=parameters.gain;for(let _U=0;_U<_g1.length;++_U){const _Z=_g1[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01)__[_01]=_Z[_01];}for(let _U=0;_U<_f1.length;++_U){const _Z=_f1[_U];const __=output[_U];for(let _01=0;_01<_Z.length;
++_01){const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];__[_01]+=_Z[_01]*_K1;}}return this._51;}}registerProcessor("audio-bus-input",_U2);registerProcessor("audio-bus-output",_V2);class _W2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _X2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._Y2=new Float32Array(_N);this._Z2=new Uint32Array(_N);}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){__[_01]=_Z[_01];if(this._Z2[_U]===0)this._Y2[_U]=_Z[_01];const _J1=(factor[_01]!==undefined)?factor[_01]:factor[0];++this._Z2[_U];this._Z2[_U]%=_J1;const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0.0){continue;}let _21=this._Y2[_U];const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];_21*=_K1;_21=Math.max(Math.min(_21,1.0),
-1.0);const __2=(resolution[_01]!==undefined)?resolution[_01]:resolution[0];const max=(_21>0.0)?_W2._X2[__2]-1:_W2._X2[__2];_21=Math.round(_21*max)/max;const _41=(mix[_01]!==undefined)?mix[_01]:mix[0];__[_01]*=(1.0-_41);__[_01]+=(_21*_41);}}return this._51;}}registerProcessor("bitcrusher-processor",_W2);class _03 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._13=new Array(_N).fill(1.0);this._23=new Array(_N).fill(0.0);this._33=new Array(_N).fill(__1._02._12);this._43=new Array(_N);for(let _U=0;_U<_N;++_U){this._43[_U]=new _q2();
this._43[_U]._y2(sampleRate);this._43[_U]._B2(this._13[_U]);this._43[_U]._F2(this._33[_U]);if(_U%2===1){this._43[_U]._C2(this._23[_U]);}}}process(_X,_Y,parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){__[_01]=_Z[_01];const __2=(rate[_01]!==undefined)?rate[_01]:rate[0];
const _53=(offset[_01]!==undefined)?offset[_01]:offset[0];const _63=(shape[_01]!==undefined)?shape[_01]:shape[0];this._73(_U,__2,_53,_63);const _83=this._43[_U]._i2();const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0.0){continue;}const _V=(intensity[_01]!==undefined)?intensity[_01]:intensity[0];const out=_Z[_01]*_83*_V;__[_01]*=(1.0-_V);__[_01]+=out;}}return this._51;}_73(_P2,_93,_D2,_G2){if(_93!==this._13[_P2]){this._43[_P2]._B2(_93);this._13[_P2]=_93;}if(_D2!==this._23[_P2]){if(_P2%2===1){
this._43[_P2]._C2(_D2);}this._23[_P2]=_D2;}if(_G2!==this._33[_P2]){this._43[_P2]._F2(_G2);this._33[_P2]=_G2;}}}registerProcessor("tremolo-processor",_03);class _a3{constructor(_Q2=1e-3){this.setTime(_Q2);}setTime(_Q2){this._b3=Math.exp(-1/(_Q2*sampleRate));}process(_c3,_d3){return _c3+this._b3*(_d3-_c3);}}class _e3{constructor(_f3,_g3){this._h3=new _a3(_f3);this._i3=new _a3(_g3);this._j3=_f3;this._k3=_g3;}_l3(_Q2){if(_Q2===this._j3)return;this._h3.setTime(_Q2);this._j3=_Q2;}_m3(_Q2){if(_Q2===this._k3)return;
this._i3.setTime(_Q2);this._k3=_Q2;}process(_c3,_d3){if(_c3>_d3)return this._h3.process(_c3,_d3);else return this._i3.process(_c3,_d3);}}class _n3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1}
,{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_o3){super();this._M();const _h3=_n3.parameterDescriptors.find(_p3=>_p3.name==="attack");const _i3=_n3.parameterDescriptors.find(_p3=>_p3.name==="release");this._q3=new _e3(_h3.defaultValue,_i3.defaultValue);this._r3=0;}process(_s3,_t3,_u3){const input=_s3[0];
const output=_t3[0];const bypass=_u3.bypass;const ingain=_u3.ingain;const outgain=_u3.outgain;const threshold=_u3.threshold;const ratio=_u3.ratio;const attack=_u3.attack;const release=_u3.release;if(input.length===0)return this._51;for(let _01=0;_01<input[0].length;++_01){let _v3=input.map(_w3=>_w3[_01]);output.forEach((_w3,_x3)=>{_w3[_01]=_v3[_x3];});const _y3=(ingain[_01]!==undefined)?ingain[_01]:ingain[0];_v3=_v3.map(_z3=>_z3*=_y3);const rect=_v3.map(_z3=>Math.abs(_z3));const max=Math.max(...rect);const _A3=_B3(max);
const _M2=(threshold[_01]!==undefined)?threshold[_01]:threshold[0];const _C3=_B3(_M2);const _D3=Math.max(0,_A3-_C3);const _h3=(attack[_01]!==undefined)?attack[_01]:attack[0];const _i3=(release[_01]!==undefined)?release[_01]:release[0];this._q3._l3(_h3);this._q3._m3(_i3);this._r3=this._q3.process(_D3,this._r3);const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];if(_31>0)continue;const __2=(ratio[_01]!==undefined)?ratio[_01]:ratio[0];const _E3=(this._r3/__2)-this._r3;const _K1=_F3(_E3);_v3=_v3.map(_z3=>_z3*=_K1);
const _G3=(outgain[_01]!==undefined)?outgain[_01]:outgain[0];_v3=_v3.map(_z3=>_z3*=_G3);output.forEach((_w3,_x3)=>{_w3[_01]=_v3[_x3];});}return this._51;}}function _B3(_H3){return 20*Math.log10(_H3);}function _F3(_H3){return Math.pow(10,_H3/20);}registerProcessor("compressor-processor",_n3);class _I3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _G1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(500.0,_G1),minValue:10.0,maxValue:_G1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){super();this._M();const _N=_L.outputChannelCount[0];this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=0;this._q1=new Float32Array(_N);this._r1=new Float32Array(_N);this._s1=new Float32Array(_N);this._t1=new Float32Array(_N);this._H1=-1;this._v1=-1;this._I1=-1;}process(_X,_Y,
parameters){const input=_X[0];const output=_Y[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _w1=(freq.length===1&&q.length===1&&gain.length===1);if(_w1)this._x1(freq[0],q[0],gain[0]);for(let _U=0;_U<input.length;++_U){const _Z=input[_U];const __=output[_U];for(let _01=0;_01<_Z.length;++_01){if(_w1===!1){const _J1=(freq[_01]!==undefined)?freq[_01]:freq[0];const _y1=(q[_01]!==undefined)?q[_01]:q[0];const _K1=(gain[_01]!==undefined)?gain[_01]:gain[0];
this._x1(_J1,_y1,_K1);}const _z1=this._n1*_Z[_01]+this._o1*this._q1[_U]+this._p1*this._r1[_U]-this._l1*this._s1[_U]-this._m1*this._t1[_U];this._r1[_U]=this._q1[_U];this._q1[_U]=_Z[_01];this._t1[_U]=this._s1[_U];this._s1[_U]=_z1;const _31=(bypass[_01]!==undefined)?bypass[_01]:bypass[0];__[_01]=(_31>0)?_Z[_01]:_z1;}}return this._51;}_x1(_L1,_B1,_M1){if(_L1===this._H1&&_B1===this._v1&&_M1===this._I1)return;const _C1=2*Math.PI*_L1/sampleRate;const _D1=Math.cos(_C1);const _N1=Math.sqrt(_M1);const _T1=_N1+1;
const _U1=_N1-1;const _V1=_T1*_D1;const _W1=_U1*_D1;const _X1=_T1-_W1;const _Y1=_T1+_W1;const alpha=Math.sin(_C1)/(2*_B1);const _Z1=(2*Math.sqrt(_N1)*alpha);const _E1=_Y1+_Z1;const _l1=-2*(_U1+_V1);const _m1=_Y1-_Z1;const _n1=_N1*(_X1+_Z1);const _o1=2*_N1*(_U1-_V1);const _p1=_N1*(_X1-_Z1);this._l1=_l1/_E1;this._m1=_m1/_E1;this._n1=_n1/_E1;this._o1=_o1/_E1;this._p1=_p1/_E1;this._H1=_L1;this._v1=_B1;this._I1=_M1;}}registerProcessor("lo-shelf-processor",_I3);