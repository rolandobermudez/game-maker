class _G{constructor(_H){this._I=0;this._J=0;this.feedback=0;this._K=0;this.buffer=new Float32Array(_H);this._L=0;}process(_M){const out=this.buffer[this._L];this._K=(this._K*this._I)+(out*this._J);this.buffer[this._L]=_M+(this._K*this.feedback);++this._L;this._L%=this.buffer.length;return out;}_N(_O){this.feedback=Math.min(Math.max(0,_O),1);}_P(_Q){this._I=Math.min(Math.max(0,_Q),1);this._J=1-this._I;}}class _R{constructor(_H){this.feedback=0;this.buffer=new Float32Array(_H);this._L=0;}process(_M){const out=this.buffer[this._L];
this.buffer[this._L]=_M+(out*this.feedback);++this._L;this._L%=this.buffer.length;return(out-_M);}_N(_O){this.feedback=Math.min(Math.max(0,_O),1);}}class _S extends AudioWorkletProcessor{static _T=8;static _U=4;static _V=0.015;static _W=0.4;static _X=0.28;static _Y=0.7;static _Z=[1116,1188,1277,1356,1422,1491,1557,1617];static __=[1139,1211,1300,1379,1445,1514,1580,1640];static _01=[556,441,341,225];static _11=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._51=-1;this._61=-1;this._71=new Array(_41);this._81=new Array(_41);const _91=[_S._Z,_S.__];const _a1=[_S._01,_S._11];for(let _b1=0;_b1<_41;++_b1){this._71[_b1]=new Array(_S._T);
this._81[_b1]=new Array(_S._U);for(let _c1=0;_c1<_S._T;++_c1)this._71[_b1][_c1]=new _G(_91[_b1%_91.length][_c1]);for(let _c1=0;_c1<_S._U;++_c1)this._81[_b1][_c1]=new _R(_a1[_b1%_a1.length][_c1]);}this._d1(0.5);this._P(0.5);for(let _b1=0;_b1<_41;++_b1)for(let _c1=0;_c1<_S._U;++_c1)this._81[_b1][_c1]._N(0.5);}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _b1=0;_b1<input.length;
++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){const _i1=(size[_i1]!==undefined)?size[_i1]:size[0];const _j1=(damp[_i1]!==undefined)?damp[_i1]:damp[0];this._d1(_i1);this._P(_j1);_h1[_i1]=_g1[_i1];let out=0;const _k1=_g1[_i1]*_S._V;for(let _c1=0;_c1<_S._T;++_c1)out+=this._71[_b1][_c1].process(_k1);for(let _c1=0;_c1<_S._U;++_c1)out=this._81[_b1][_c1].process(out);const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0.0){continue;}const _m1=(mix[_i1]!==undefined)?mix[_i1]:mix[0];
_h1[_i1]*=(1-_m1);_h1[_i1]+=(out*_m1);}}return this._n1;}_d1(_H){if(_H===this._51)return;const size=(_H*_S._X)+_S._Y;for(let _b1=0;_b1<this._71.length;++_b1)for(let _c1=0;_c1<_S._T;++_c1)this._71[_b1][_c1]._N(size);this._51=_H;}_P(_Q){if(_Q===this._61)return;const damp=_Q*_S._W;for(let _b1=0;_b1<this._71.length;++_b1)for(let _c1=0;_c1<_S._T;++_c1)this._71[_b1][_c1]._P(damp);this._61=_Q;}}registerProcessor("reverb1-processor",_S);class _o1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];
}constructor(){super();this._31();}process(_p1,_q1,_r1){const input=_p1[0];const _s1=_q1[0];const _t1=_q1[1];for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _u1=_s1[_b1];const _v1=_t1[_b1];for(let _i1=0;_i1<_g1.length;++_i1){_u1[_i1]=_g1[_i1];_v1[_i1]=_g1[_i1];}}return this._n1;}}class _w1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._31();}process(_p1,_q1,_r1){const _x1=_p1[0];
const _y1=_p1[1];const output=_q1[0];const bypass=_r1.bypass;for(let _b1=0;_b1<_y1.length;++_b1){const _z1=_x1[_b1];const _A1=_y1[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_z1.length;++_i1){const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0){_h1[_i1]=_A1[_i1];}else {_h1[_i1]=_z1[_i1];}}}return this._n1;}}registerProcessor("eq-input",_o1);registerProcessor("eq-output",_w1);class _B1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _C1=Math.min(sampleRate/2.0,20000.0);return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_C1),minValue:10.0,maxValue:_C1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._D1=0;this._E1=0;this._F1=0;this._G1=0;this._H1=0;this._I1=new Float32Array(_41);this._J1=new Float32Array(_41);this._K1=new Float32Array(_41);this._L1=new Float32Array(_41);
this._M1=-1;this._N1=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _O1=(cutoff.length===1&&q.length===1);if(_O1)this._P1(cutoff[0],q[0]);for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){if(_O1===!1){const _b1=(cutoff[_i1]!==undefined)?cutoff[_i1]:cutoff[0];const _Q1=(q[_i1]!==undefined)?q[_i1]:q[0];this._P1(_b1,_Q1);}const _R1=this._F1*_g1[_i1]+this._G1*this._I1[_b1]+this._H1*this._J1[_b1]-this._D1*this._K1[_b1]-this._E1*this._L1[_b1];
this._J1[_b1]=this._I1[_b1];this._I1[_b1]=_g1[_i1];this._L1[_b1]=this._K1[_b1];this._K1[_b1]=_R1;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_h1[_i1]=(_l1>0)?_g1[_i1]:_R1;}}return this._n1;}_P1(_S1,_T1){if(_S1===this._M1&&_T1===this._N1)return;const _U1=2*Math.PI*_S1/sampleRate;const alpha=Math.sin(_U1)/(2*_T1);const _V1=Math.cos(_U1);const _W1=1+alpha;const _D1=-2*_V1;const _E1=1-alpha;const _F1=(1-_V1)/2;const _G1=1-_V1;const _H1=(1-_V1)/2;this._D1=_D1/_W1;this._E1=_E1/_W1;this._F1=_F1/_W1;
this._G1=_G1/_W1;this._H1=_H1/_W1;this._M1=_S1;this._N1=_T1;}}registerProcessor("lpf2-processor",_B1);class _X1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_Y1),minValue:10.0,maxValue:_Y1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._D1=0;this._E1=0;this._F1=0;this._G1=0;this._H1=0;this._I1=new Float32Array(_41);this._J1=new Float32Array(_41);this._K1=new Float32Array(_41);this._L1=new Float32Array(_41);this._Z1=-1;this._N1=-1;this.__1=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _O1=(freq.length===1&&q.length===1&&gain.length===1);
if(_O1)this._P1(freq[0],q[0],gain[0]);for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){if(_O1===!1){const _02=(freq[_i1]!==undefined)?freq[_i1]:freq[0];const _Q1=(q[_i1]!==undefined)?q[_i1]:q[0];const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];this._P1(_02,_Q1,_12);}const _R1=this._F1*_g1[_i1]+this._G1*this._I1[_b1]+this._H1*this._J1[_b1]-this._D1*this._K1[_b1]-this._E1*this._L1[_b1];this._J1[_b1]=this._I1[_b1];this._I1[_b1]=_g1[_i1];
this._L1[_b1]=this._K1[_b1];this._K1[_b1]=_R1;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_h1[_i1]=(_l1>0)?_g1[_i1]:_R1;}}return this._n1;}_P1(_22,_T1,_32){if(_22===this._Z1&&_T1===this._N1&&_32===this.__1)return;const _U1=2*Math.PI*_22/sampleRate;const _V1=Math.cos(_U1);const _42=Math.sqrt(_32);const alpha=Math.sin(_U1)/(2*_T1);const _52=alpha/_42;const _62=alpha*_42;const _W1=1+_52;const _D1=-2*_V1;const _E1=1-_52;const _F1=1+_62;const _G1=_D1;const _H1=1-_62;this._D1=_D1/_W1;this._E1=_E1/_W1;
this._F1=_F1/_W1;this._G1=_G1/_W1;this._H1=_H1/_W1;this._Z1=_22;this._N1=_T1;this.__1=_32;}}registerProcessor("peak-eq-processor",_X1);class _72 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._31();}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const gain=parameters.gain;
for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){_h1[_i1]=_g1[_i1];const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0.0){continue;}const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];_h1[_i1]*=_12;}}return this._n1;}}registerProcessor("gain-processor",_72);class _82 extends AudioWorkletProcessor{static get parameterDescriptors(){const _C1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_C1),minValue:10.0,maxValue:_C1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._D1=0;this._E1=0;this._F1=0;this._G1=0;this._H1=0;this._I1=new Float32Array(_41);this._J1=new Float32Array(_41);this._K1=new Float32Array(_41);this._L1=new Float32Array(_41);this._M1=-1;this._N1=-1;}process(_e1,_f1,parameters){
const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _O1=(cutoff.length===1&&q.length===1);if(_O1)this._P1(cutoff[0],q[0]);for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){if(_O1===!1){const _b1=(cutoff[_i1]!==undefined)?cutoff[_i1]:cutoff[0];const _Q1=(q[_i1]!==undefined)?q[_i1]:q[0];this._P1(_b1,_Q1);}const _R1=this._F1*_g1[_i1]+this._G1*this._I1[_b1]+this._H1*this._J1[_b1]-this._D1*this._K1[_b1]-this._E1*this._L1[_b1];
this._J1[_b1]=this._I1[_b1];this._I1[_b1]=_g1[_i1];this._L1[_b1]=this._K1[_b1];this._K1[_b1]=_R1;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_h1[_i1]=(_l1>0)?_g1[_i1]:_R1;}}return this._n1;}_P1(_S1,_T1){if(_S1===this._M1&&_T1===this._N1)return;const _U1=2*Math.PI*_S1/sampleRate;const alpha=Math.sin(_U1)/(2*_T1);const _V1=Math.cos(_U1);const _W1=1+alpha;const _D1=-2*_V1;const _E1=1-alpha;const _F1=(1+_V1)/2;const _G1=-1-_V1;const _H1=(1+_V1)/2;this._D1=_D1/_W1;this._E1=_E1/_W1;this._F1=_F1/_W1;
this._G1=_G1/_W1;this._H1=_H1/_W1;this._M1=_S1;this._N1=_T1;}}registerProcessor("hpf2-processor",_82);class _92 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_Y1),minValue:10.0,maxValue:_Y1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._D1=0;this._E1=0;this._F1=0;this._G1=0;this._H1=0;this._I1=new Float32Array(_41);this._J1=new Float32Array(_41);this._K1=new Float32Array(_41);this._L1=new Float32Array(_41);this._Z1=-1;this._N1=-1;this.__1=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _O1=(freq.length===1&&q.length===1&&gain.length===1);
if(_O1)this._P1(freq[0],q[0],gain[0]);for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){if(_O1===!1){const _02=(freq[_i1]!==undefined)?freq[_i1]:freq[0];const _Q1=(q[_i1]!==undefined)?q[_i1]:q[0];const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];this._P1(_02,_Q1,_12);}const _R1=this._F1*_g1[_i1]+this._G1*this._I1[_b1]+this._H1*this._J1[_b1]-this._D1*this._K1[_b1]-this._E1*this._L1[_b1];this._J1[_b1]=this._I1[_b1];this._I1[_b1]=_g1[_i1];
this._L1[_b1]=this._K1[_b1];this._K1[_b1]=_R1;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_h1[_i1]=(_l1>0)?_g1[_i1]:_R1;}}return this._n1;}_P1(_22,_T1,_32){if(_22===this._Z1&&_T1===this._N1&&_32===this.__1)return;const _U1=2*Math.PI*_22/sampleRate;const _V1=Math.cos(_U1);const _42=Math.sqrt(_32);const _a2=_42+1;const _b2=_42-1;const _c2=_a2*_V1;const _d2=_b2*_V1;const _e2=_a2-_d2;const _f2=_a2+_d2;const alpha=Math.sin(_U1)/(2*_T1);const _g2=(2*Math.sqrt(_42)*alpha);const _W1=_e2+_g2;const _D1=2*(_b2-_c2);
const _E1=_e2-_g2;const _F1=_42*(_f2+_g2);const _G1=-2*_42*(_b2+_c2);const _H1=_42*(_f2-_g2);this._D1=_D1/_W1;this._E1=_E1/_W1;this._F1=_F1/_W1;this._G1=_G1/_W1;this._H1=_H1/_W1;this._Z1=_22;this._N1=_T1;this.__1=_32;}}registerProcessor("hi-shelf-processor",_92);function _h2(){}_h2._i2={_j2:0,_k2:1,_l2:2,_m2:3,_n2:4,_o2:5};_h2._p2=function(_q2){return 1.0-_q2;};_h2._r2=function(_q2){return _q2;};_h2._s2=function(_q2){return 0.5*(Math.sin((_q2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_h2._t2=function(_q2){if(_q2<0.5){
return 0.0;}return 1.0;};_h2._u2=function(_q2){if(_q2<0.5){return 2.0*_q2;}return 2.0-(2.0*_q2);};_h2._v2=[_h2._p2,_h2._r2,_h2._s2,_h2._t2,_h2._u2];_w2._x2=512;_w2._y2=1.0/_w2._x2;function _w2(_z2){this.data=new Float32Array(_w2._x2);for(let _c1=0;_c1<_w2._x2;++_c1){this.data[_c1]=_z2(_c1*_w2._y2);}}_w2.prototype._A2=function(_q2){_q2=Math.max(0.0,_q2);_q2=Math.min(_q2,1.0);const _B2=_q2*_w2._x2;const _C2=~~_B2;const _D2=_B2-_C2;let _E2=_C2;let _F2=_E2+1;if(_E2>=_w2._x2){_E2-=_w2._x2;}if(_F2>=_w2._x2){_F2-=_w2._x2;
}const _G2=this.data[_E2];const _H2=this.data[_F2];return _G2+(_H2-_G2)*_D2;};;_I2._J2=[];_I2._K2=!1;_I2._L2=0.0;_I2._Y1=20.0;function _I2(){this._M2=48000;this.shape=_h2._i2._l2;this.freq=1.0;this._N2=0.0;this._y2=0.0;this._O2=0.0;if(_I2._K2==true){return;}for(let _c1=0;_c1<_h2._i2._o2;++_c1){_I2._J2[_c1]=new _w2(_h2._v2[_c1]);}_I2._K2=true;}_I2._P2=function(){return(_I2._K2==!0);};_I2.prototype._Q2=function(_R2){this._M2=_R2;this._S2();};;_I2.prototype._T2=function(_22){_22=Math.max(_I2._L2,_22);_22=Math.min(_22,
_I2._Y1);this.freq=_22;this._S2();};;_I2.prototype._U2=function(_V2){_V2=Math.max(0.0,_V2);_V2=Math.min(_V2,1.0);const _W2=_V2-this._O2;this._O2=_V2;this._N2+=_W2;while(this._N2>=1.0){this._N2-=1.0;}while(this._N2<0.0){this._N2+=1.0;}};;_I2.prototype._X2=function(_Y2){_Y2=Math.max(0,_Y2);_Y2=Math.min(_Y2,_h2._i2._o2-1);this.shape=_Y2;};;_I2.prototype._A2=function(){const _Z2=_I2._J2[this.shape]._A2(this._N2);this._N2+=this._y2;while(this._N2>=1.0){this._N2-=1.0;}return _Z2;};;_I2.prototype._S2=function(){
this._y2=this.freq/this._M2;};;class __2 extends AudioWorkletProcessor{static _03=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:__2._03},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];
const _13=(__2._03*sampleRate)+1;this.buffer=new Array(_41);this._23=new Uint32Array(_41);for(let _b1=0;_b1<_41;++_b1)this.buffer[_b1]=new Float32Array(_13);}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){_h1[_i1]=_g1[_i1];const _33=(time[_i1]!==undefined)?time[_i1]:time[0];
const _43=this._A2(_b1,_33);const _02=(feedback[_i1]!==undefined)?feedback[_i1]:feedback[0];const _53=_g1[_i1]+(_43*_02);this.write(_b1,_53);const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0.0){continue;}const _m1=(mix[_i1]!==undefined)?mix[_i1]:mix[0];_h1[_i1]*=(1-_m1);_h1[_i1]+=(_43*_m1);}}return this._n1;}_A2(_63,_73){const _83=_73*sampleRate;let _E2=(this._23[_63]-~~_83);let _F2=(_E2-1);while(_E2<0)_E2+=this.buffer[_63].length;while(_F2<0)_F2+=this.buffer[_63].length;const _93=_83-~~_83;
const _G2=this.buffer[_63][_E2];const _H2=this.buffer[_63][_F2];return _G2+(_H2-_G2)*_93;}write(_63,_M){++this._23[_63];this._23[_63]%=this.buffer[_63].length;this.buffer[_63][this._23[_63]]=_M;}}registerProcessor("delay-processor",__2);AudioWorkletProcessor.prototype._31=function(){this._n1=true;this.port.onmessage=(_a3)=>{if(_a3.data==="kill")this._n1=false;};};;class _b3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,
maxValue:1}];}constructor(){super();this._31();}process(_e1,_f1,parameters){const input=_e1[0];const bypass=parameters.bypass;for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];for(let _i1=0;_i1<_g1.length;++_i1){const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_f1[_l1][_b1][_i1]=_g1[_i1];}}return this._n1;}}class _c3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._31();}process(_e1,
_f1,parameters){const _x1=_e1[0];const _y1=_e1[1];const output=_f1[0];const gain=parameters.gain;for(let _b1=0;_b1<_y1.length;++_b1){const _g1=_y1[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1)_h1[_i1]=_g1[_i1];}for(let _b1=0;_b1<_x1.length;++_b1){const _g1=_x1[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];_h1[_i1]+=_g1[_i1]*_12;}}return this._n1;}}registerProcessor("audio-bus-input",_b3);registerProcessor("audio-bus-output",
_c3);class _d3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _e3=[undefined,undefined,
2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._f3=new Float32Array(_41);this._g3=new Uint32Array(_41);}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;
++_i1){_h1[_i1]=_g1[_i1];if(this._g3[_b1]===0)this._f3[_b1]=_g1[_i1];const _02=(factor[_i1]!==undefined)?factor[_i1]:factor[0];++this._g3[_b1];this._g3[_b1]%=_02;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0.0){continue;}let _k1=this._f3[_b1];const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];_k1*=_12;_k1=Math.max(Math.min(_k1,1.0),-1.0);const _h3=(resolution[_i1]!==undefined)?resolution[_i1]:resolution[0];const max=(_k1>0.0)?_d3._e3[_h3]-1:_d3._e3[_h3];_k1=Math.round(_k1*max)/max;
const _m1=(mix[_i1]!==undefined)?mix[_i1]:mix[0];_h1[_i1]*=(1.0-_m1);_h1[_i1]+=(_k1*_m1);}}return this._n1;}}registerProcessor("bitcrusher-processor",_d3);class _i3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",
defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._j3=new Array(_41).fill(1.0);this._k3=new Array(_41).fill(0.0);this._l3=new Array(_41).fill(_h2._i2._j2);this._m3=new Array(_41);for(let _b1=0;_b1<_41;++_b1){this._m3[_b1]=new _I2();this._m3[_b1]._Q2(sampleRate);this._m3[_b1]._T2(this._j3[_b1]);this._m3[_b1]._X2(this._l3[_b1]);if(_b1%2===1){this._m3[_b1]._U2(this._k3[_b1]);
}}}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){_h1[_i1]=_g1[_i1];const _h3=(rate[_i1]!==undefined)?rate[_i1]:rate[0];const _n3=(offset[_i1]!==undefined)?offset[_i1]:offset[0];const _o3=(shape[_i1]!==undefined)?shape[_i1]:shape[0];
this._p3(_b1,_h3,_n3,_o3);const _q3=this._m3[_b1]._A2();const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0.0){continue;}const _c1=(intensity[_i1]!==undefined)?intensity[_i1]:intensity[0];const out=_g1[_i1]*_q3*_c1;_h1[_i1]*=(1.0-_c1);_h1[_i1]+=out;}}return this._n1;}_p3(_63,_r3,_V2,_Y2){if(_r3!==this._j3[_63]){this._m3[_63]._T2(_r3);this._j3[_63]=_r3;}if(_V2!==this._k3[_63]){if(_63%2===1){this._m3[_63]._U2(_V2);}this._k3[_63]=_V2;}if(_Y2!==this._l3[_63]){this._m3[_63]._X2(_Y2);this._l3[_63]=_Y2;
}}}registerProcessor("tremolo-processor",_i3);class _s3{constructor(_73=1e-3){this.setTime(_73);}setTime(_73){this._t3=Math.exp(-1/(_73*sampleRate));}process(_u3,_v3){return _u3+this._t3*(_v3-_u3);}}class _w3{constructor(_x3,_y3){this._z3=new _s3(_x3);this._A3=new _s3(_y3);this._B3=_x3;this._C3=_y3;}_D3(_73){if(_73===this._B3)return;this._z3.setTime(_73);this._B3=_73;}_E3(_73){if(_73===this._C3)return;this._A3.setTime(_73);this._C3=_73;}process(_u3,_v3){if(_u3>_v3)return this._z3.process(_u3,_v3);else return this._A3.process(_u3,
_v3);}}class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",
defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_G3){super();this._31();const _z3=_F3.parameterDescriptors.find(_H3=>_H3.name==="attack");const _A3=_F3.parameterDescriptors.find(_H3=>_H3.name==="release");this._I3=new _w3(_z3.defaultValue,_A3.defaultValue);this._J3=0;}process(_K3,_L3,_M3){const input=_K3[0];const output=_L3[0];const bypass=_M3.bypass;const ingain=_M3.ingain;const outgain=_M3.outgain;const threshold=_M3.threshold;
const ratio=_M3.ratio;const attack=_M3.attack;const release=_M3.release;if(input.length===0)return this._n1;for(let _i1=0;_i1<input[0].length;++_i1){let _N3=input.map(_O3=>_O3[_i1]);output.forEach((_O3,_P3)=>{_O3[_i1]=_N3[_P3];});const _Q3=(ingain[_i1]!==undefined)?ingain[_i1]:ingain[0];_N3=_N3.map(_R3=>_R3*=_Q3);const rect=_N3.map(_R3=>Math.abs(_R3));const max=Math.max(...rect);const _S3=_T3(max);const _33=(threshold[_i1]!==undefined)?threshold[_i1]:threshold[0];const _U3=_T3(_33);const _V3=Math.max(0,_S3-_U3);
const _z3=(attack[_i1]!==undefined)?attack[_i1]:attack[0];const _A3=(release[_i1]!==undefined)?release[_i1]:release[0];this._I3._D3(_z3);this._I3._E3(_A3);this._J3=this._I3.process(_V3,this._J3);const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];if(_l1>0)continue;const _h3=(ratio[_i1]!==undefined)?ratio[_i1]:ratio[0];const _W3=(this._J3/_h3)-this._J3;const _12=_X3(_W3);_N3=_N3.map(_R3=>_R3*=_12);const _Y3=(outgain[_i1]!==undefined)?outgain[_i1]:outgain[0];_N3=_N3.map(_R3=>_R3*=_Y3);output.forEach((_O3,
_P3)=>{_O3[_i1]=_N3[_P3];});}return this._n1;}}function _T3(_Z3){return 20*Math.log10(_Z3);}function _X3(_Z3){return Math.pow(10,_Z3/20);}registerProcessor("compressor-processor",_F3);class __3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Y1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_Y1),minValue:10.0,maxValue:_Y1},{name:"q",automationRate:"a-rate",
defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._31();const _41=_21.outputChannelCount[0];this._D1=0;this._E1=0;this._F1=0;this._G1=0;this._H1=0;this._I1=new Float32Array(_41);this._J1=new Float32Array(_41);this._K1=new Float32Array(_41);this._L1=new Float32Array(_41);this._Z1=-1;this._N1=-1;this.__1=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _O1=(freq.length===1&&q.length===1&&gain.length===1);if(_O1)this._P1(freq[0],q[0],gain[0]);for(let _b1=0;_b1<input.length;++_b1){const _g1=input[_b1];const _h1=output[_b1];for(let _i1=0;_i1<_g1.length;++_i1){if(_O1===!1){const _02=(freq[_i1]!==undefined)?freq[_i1]:freq[0];const _Q1=(q[_i1]!==undefined)?q[_i1]:q[0];const _12=(gain[_i1]!==undefined)?gain[_i1]:gain[0];this._P1(_02,_Q1,_12);}const _R1=this._F1*_g1[_i1]+this._G1*this._I1[_b1]+this._H1*this._J1[_b1]-this._D1*this._K1[_b1]-this._E1*this._L1[_b1];
this._J1[_b1]=this._I1[_b1];this._I1[_b1]=_g1[_i1];this._L1[_b1]=this._K1[_b1];this._K1[_b1]=_R1;const _l1=(bypass[_i1]!==undefined)?bypass[_i1]:bypass[0];_h1[_i1]=(_l1>0)?_g1[_i1]:_R1;}}return this._n1;}_P1(_22,_T1,_32){if(_22===this._Z1&&_T1===this._N1&&_32===this.__1)return;const _U1=2*Math.PI*_22/sampleRate;const _V1=Math.cos(_U1);const _42=Math.sqrt(_32);const _a2=_42+1;const _b2=_42-1;const _c2=_a2*_V1;const _d2=_b2*_V1;const _e2=_a2-_d2;const _f2=_a2+_d2;const alpha=Math.sin(_U1)/(2*_T1);const _g2=(2*Math.sqrt(_42)*alpha);
const _W1=_f2+_g2;const _D1=-2*(_b2+_c2);const _E1=_f2-_g2;const _F1=_42*(_e2+_g2);const _G1=2*_42*(_b2-_c2);const _H1=_42*(_e2-_g2);this._D1=_D1/_W1;this._E1=_E1/_W1;this._F1=_F1/_W1;this._G1=_G1/_W1;this._H1=_H1/_W1;this._Z1=_22;this._N1=_T1;this.__1=_32;}}registerProcessor("lo-shelf-processor",__3);