class _a1{constructor(_b1){this._c1=0;this._d1=0;this.feedback=0;this._e1=0;this.buffer=new Float32Array(_b1);this._f1=0;}process(_g1){const out=this.buffer[this._f1];this._e1=(this._e1*this._c1)+(out*this._d1);this.buffer[this._f1]=_g1+(this._e1*this.feedback);++this._f1;this._f1%=this.buffer.length;return out;}_h1(_i1){this.feedback=Math.min(Math.max(0,_i1),1);}_j1(_k1){this._c1=Math.min(Math.max(0,_k1),1);this._d1=1-this._c1;}}class _l1{constructor(_b1){this.feedback=0;this.buffer=new Float32Array(_b1);
this._f1=0;}process(_g1){const out=this.buffer[this._f1];this.buffer[this._f1]=_g1+(out*this.feedback);++this._f1;this._f1%=this.buffer.length;return(out-_g1);}_h1(_i1){this.feedback=Math.min(Math.max(0,_i1),1);}}class _m1 extends AudioWorkletProcessor{static _n1=8;static _o1=4;static _p1=0.015;static _q1=0.4;static _r1=0.28;static _s1=0.7;static _t1=[1116,1188,1277,1356,1422,1491,1557,1617];static _u1=[1139,1211,1300,1379,1445,1514,1580,1640];static _v1=[556,441,341,225];static _w1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._A1=-1;this._B1=-1;this._C1=new Array(_z1);this._D1=new Array(_z1);const _E1=[_m1._t1,_m1._u1];const _F1=[_m1._v1,
_m1._w1];for(let _G1=0;_G1<_z1;++_G1){this._C1[_G1]=new Array(_m1._n1);this._D1[_G1]=new Array(_m1._o1);for(let _H1=0;_H1<_m1._n1;++_H1)this._C1[_G1][_H1]=new _a1(_E1[_G1%_E1.length][_H1]);for(let _H1=0;_H1<_m1._o1;++_H1)this._D1[_G1][_H1]=new _l1(_F1[_G1%_F1.length][_H1]);}this._I1(0.5);this._j1(0.5);for(let _G1=0;_G1<_z1;++_G1)for(let _H1=0;_H1<_m1._o1;++_H1)this._D1[_G1][_H1]._h1(0.5);}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){const _N1=(size[_N1]!==undefined)?size[_N1]:size[0];const _O1=(damp[_N1]!==undefined)?damp[_N1]:damp[0];this._I1(_N1);this._j1(_O1);_M1[_N1]=_L1[_N1];let out=0;const _P1=_L1[_N1]*_m1._p1;for(let _H1=0;_H1<_m1._n1;++_H1)out+=this._C1[_G1][_H1].process(_P1);for(let _H1=0;_H1<_m1._o1;++_H1)out=this._D1[_G1][_H1].process(out);const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];
if(_Q1>0.0){continue;}const _R1=(mix[_N1]!==undefined)?mix[_N1]:mix[0];_M1[_N1]*=(1-_R1);_M1[_N1]+=(out*_R1);}}return this._S1;}_I1(_b1){if(_b1===this._A1)return;const size=(_b1*_m1._r1)+_m1._s1;for(let _G1=0;_G1<this._C1.length;++_G1)for(let _H1=0;_H1<_m1._n1;++_H1)this._C1[_G1][_H1]._h1(size);this._A1=_b1;}_j1(_k1){if(_k1===this._B1)return;const damp=_k1*_m1._q1;for(let _G1=0;_G1<this._C1.length;++_G1)for(let _H1=0;_H1<_m1._n1;++_H1)this._C1[_G1][_H1]._j1(damp);this._B1=_k1;}}registerProcessor("reverb1-processor",
_m1);class _T1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._y1();}process(_U1,_V1,_W1){const input=_U1[0];const _X1=_V1[0];const _Y1=_V1[1];for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _Z1=_X1[_G1];const __1=_Y1[_G1];for(let _N1=0;_N1<_L1.length;++_N1){_Z1[_N1]=_L1[_N1];__1[_N1]=_L1[_N1];}}return this._S1;}}class _02 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._y1();}process(_U1,_V1,_W1){const _12=_U1[0];const _22=_U1[1];const output=_V1[0];const bypass=_W1.bypass;for(let _G1=0;_G1<_22.length;++_G1){const _32=_12[_G1];const _42=_22[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_32.length;++_N1){const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0){_M1[_N1]=_42[_N1];}else {_M1[_N1]=_32[_N1];}}}return this._S1;}}registerProcessor("eq-input",_T1);registerProcessor("eq-output",_02);class _52 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _62=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_62),minValue:10.0,maxValue:_62},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._72=0;this._82=0;this._92=0;this._a2=0;this._b2=0;this._c2=new Float32Array(_z1);this._d2=new Float32Array(_z1);
this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=-1;this._h2=-1;}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _i2=(cutoff.length===1&&q.length===1);if(_i2)this._j2(cutoff[0],q[0]);for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){if(_i2===!1){const _G1=(cutoff[_N1]!==undefined)?cutoff[_N1]:cutoff[0];const _k2=(q[_N1]!==undefined)?q[_N1]:q[0];
this._j2(_G1,_k2);}const _l2=this._92*_L1[_N1]+this._a2*this._c2[_G1]+this._b2*this._d2[_G1]-this._72*this._e2[_G1]-this._82*this._f2[_G1];this._d2[_G1]=this._c2[_G1];this._c2[_G1]=_L1[_N1];this._f2[_G1]=this._e2[_G1];this._e2[_G1]=_l2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_M1[_N1]=(_Q1>0)?_L1[_N1]:_l2;}}return this._S1;}_j2(_m2,_n2){if(_m2===this._g2&&_n2===this._h2)return;const _o2=2*Math.PI*_m2/sampleRate;const alpha=Math.sin(_o2)/(2*_n2);const _p2=Math.cos(_o2);const _q2=1+alpha;
const _72=-2*_p2;const _82=1-alpha;const _92=(1-_p2)/2;const _a2=1-_p2;const _b2=(1-_p2)/2;this._72=_72/_q2;this._82=_82/_q2;this._92=_92/_q2;this._a2=_a2/_q2;this._b2=_b2/_q2;this._g2=_m2;this._h2=_n2;}}registerProcessor("lpf2-processor",_52);class _r2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _s2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_s2),minValue:10.0,maxValue:_s2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._72=0;this._82=0;this._92=0;this._a2=0;this._b2=0;this._c2=new Float32Array(_z1);this._d2=new Float32Array(_z1);this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._t2=-1;this._h2=-1;this._u2=-1;}process(_J1,_K1,parameters){const input=_J1[0];
const output=_K1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _i2=(freq.length===1&&q.length===1&&gain.length===1);if(_i2)this._j2(freq[0],q[0],gain[0]);for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){if(_i2===!1){const _v2=(freq[_N1]!==undefined)?freq[_N1]:freq[0];const _k2=(q[_N1]!==undefined)?q[_N1]:q[0];const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];this._j2(_v2,
_k2,_w2);}const _l2=this._92*_L1[_N1]+this._a2*this._c2[_G1]+this._b2*this._d2[_G1]-this._72*this._e2[_G1]-this._82*this._f2[_G1];this._d2[_G1]=this._c2[_G1];this._c2[_G1]=_L1[_N1];this._f2[_G1]=this._e2[_G1];this._e2[_G1]=_l2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_M1[_N1]=(_Q1>0)?_L1[_N1]:_l2;}}return this._S1;}_j2(_x2,_n2,_y2){if(_x2===this._t2&&_n2===this._h2&&_y2===this._u2)return;const _o2=2*Math.PI*_x2/sampleRate;const _p2=Math.cos(_o2);const _z2=Math.sqrt(_y2);const alpha=Math.sin(_o2)/(2*_n2);
const _A2=alpha/_z2;const _B2=alpha*_z2;const _q2=1+_A2;const _72=-2*_p2;const _82=1-_A2;const _92=1+_B2;const _a2=_72;const _b2=1-_B2;this._72=_72/_q2;this._82=_82/_q2;this._92=_92/_q2;this._a2=_a2/_q2;this._b2=_b2/_q2;this._t2=_x2;this._h2=_n2;this._u2=_y2;}}registerProcessor("peak-eq-processor",_r2);class _C2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._y1();}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){_M1[_N1]=_L1[_N1];const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0.0){continue;}const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_M1[_N1]*=_w2;}}return this._S1;}}registerProcessor("gain-processor",
_C2);class _D2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _62=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_62),minValue:10.0,maxValue:_62},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._72=0;this._82=0;this._92=0;this._a2=0;this._b2=0;
this._c2=new Float32Array(_z1);this._d2=new Float32Array(_z1);this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=-1;this._h2=-1;}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _i2=(cutoff.length===1&&q.length===1);if(_i2)this._j2(cutoff[0],q[0]);for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){if(_i2===!1){const _G1=(cutoff[_N1]!==undefined)?cutoff[_N1]:cutoff[0];
const _k2=(q[_N1]!==undefined)?q[_N1]:q[0];this._j2(_G1,_k2);}const _l2=this._92*_L1[_N1]+this._a2*this._c2[_G1]+this._b2*this._d2[_G1]-this._72*this._e2[_G1]-this._82*this._f2[_G1];this._d2[_G1]=this._c2[_G1];this._c2[_G1]=_L1[_N1];this._f2[_G1]=this._e2[_G1];this._e2[_G1]=_l2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_M1[_N1]=(_Q1>0)?_L1[_N1]:_l2;}}return this._S1;}_j2(_m2,_n2){if(_m2===this._g2&&_n2===this._h2)return;const _o2=2*Math.PI*_m2/sampleRate;const alpha=Math.sin(_o2)/(2*_n2);
const _p2=Math.cos(_o2);const _q2=1+alpha;const _72=-2*_p2;const _82=1-alpha;const _92=(1+_p2)/2;const _a2=-1-_p2;const _b2=(1+_p2)/2;this._72=_72/_q2;this._82=_82/_q2;this._92=_92/_q2;this._a2=_a2/_q2;this._b2=_b2/_q2;this._g2=_m2;this._h2=_n2;}}registerProcessor("hpf2-processor",_D2);class _E2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _s2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_s2),minValue:10.0,maxValue:_s2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._72=0;this._82=0;this._92=0;this._a2=0;this._b2=0;this._c2=new Float32Array(_z1);this._d2=new Float32Array(_z1);this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._t2=-1;this._h2=-1;this._u2=-1;}process(_J1,
_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _i2=(freq.length===1&&q.length===1&&gain.length===1);if(_i2)this._j2(freq[0],q[0],gain[0]);for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){if(_i2===!1){const _v2=(freq[_N1]!==undefined)?freq[_N1]:freq[0];const _k2=(q[_N1]!==undefined)?q[_N1]:q[0];const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];
this._j2(_v2,_k2,_w2);}const _l2=this._92*_L1[_N1]+this._a2*this._c2[_G1]+this._b2*this._d2[_G1]-this._72*this._e2[_G1]-this._82*this._f2[_G1];this._d2[_G1]=this._c2[_G1];this._c2[_G1]=_L1[_N1];this._f2[_G1]=this._e2[_G1];this._e2[_G1]=_l2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_M1[_N1]=(_Q1>0)?_L1[_N1]:_l2;}}return this._S1;}_j2(_x2,_n2,_y2){if(_x2===this._t2&&_n2===this._h2&&_y2===this._u2)return;const _o2=2*Math.PI*_x2/sampleRate;const _p2=Math.cos(_o2);const _z2=Math.sqrt(_y2);const _F2=_z2+1;
const _G2=_z2-1;const _H2=_F2*_p2;const _I2=_G2*_p2;const _J2=_F2-_I2;const _K2=_F2+_I2;const alpha=Math.sin(_o2)/(2*_n2);const _L2=(2*Math.sqrt(_z2)*alpha);const _q2=_J2+_L2;const _72=2*(_G2-_H2);const _82=_J2-_L2;const _92=_z2*(_K2+_L2);const _a2=-2*_z2*(_G2+_H2);const _b2=_z2*(_K2-_L2);this._72=_72/_q2;this._82=_82/_q2;this._92=_92/_q2;this._a2=_a2/_q2;this._b2=_b2/_q2;this._t2=_x2;this._h2=_n2;this._u2=_y2;}}registerProcessor("hi-shelf-processor",_E2);function _M2(){}_M2._N2={_O2:0,_P2:1,_Q2:2,_R2:3,_S2:4,
_T2:5};_M2._U2=function(_V2){return 1.0-_V2;};_M2._W2=function(_V2){return _V2;};_M2._X2=function(_V2){return 0.5*(Math.sin((_V2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_M2._Y2=function(_V2){if(_V2<0.5){return 0.0;}return 1.0;};_M2._Z2=function(_V2){if(_V2<0.5){return 2.0*_V2;}return 2.0-(2.0*_V2);};_M2.__2=[_M2._U2,_M2._W2,_M2._X2,_M2._Y2,_M2._Z2];_03._13=512;_03._23=1.0/_03._13;function _03(_33){this.data=new Float32Array(_03._13);for(let _H1=0;_H1<_03._13;++_H1){this.data[_H1]=_33(_H1*_03._23);}}_03.prototype._43=function(_V2){
_V2=Math.max(0.0,_V2);_V2=Math.min(_V2,1.0);const _53=_V2*_03._13;const _63=~~_53;const _73=_53-_63;let _83=_63;let _93=_83+1;if(_83>=_03._13){_83-=_03._13;}if(_93>=_03._13){_93-=_03._13;}const _a3=this.data[_83];const _b3=this.data[_93];return _a3+(_b3-_a3)*_73;};;_c3._d3=[];_c3._e3=!1;_c3._f3=0.0;_c3._s2=20.0;function _c3(){this._g3=48000;this.shape=_M2._N2._Q2;this.freq=1.0;this._h3=0.0;this._23=0.0;this._i3=0.0;if(_c3._e3==true){return;}for(let _H1=0;_H1<_M2._N2._T2;++_H1){_c3._d3[_H1]=new _03(_M2.__2[_H1]);
}_c3._e3=true;}_c3._j3=function(){return(_c3._e3==!0);};_c3.prototype._k3=function(_l3){this._g3=_l3;this._m3();};;_c3.prototype._n3=function(_x2){_x2=Math.max(_c3._f3,_x2);_x2=Math.min(_x2,_c3._s2);this.freq=_x2;this._m3();};;_c3.prototype._o3=function(_p3){_p3=Math.max(0.0,_p3);_p3=Math.min(_p3,1.0);const _q3=_p3-this._i3;this._i3=_p3;this._h3+=_q3;while(this._h3>=1.0){this._h3-=1.0;}while(this._h3<0.0){this._h3+=1.0;}};;_c3.prototype._r3=function(_s3){_s3=Math.max(0,_s3);_s3=Math.min(_s3,_M2._N2._T2-1);
this.shape=_s3;};;_c3.prototype._43=function(){const _t3=_c3._d3[this.shape]._43(this._h3);this._h3+=this._23;while(this._h3>=1.0){this._h3-=1.0;}return _t3;};;_c3.prototype._m3=function(){this._23=this.freq/this._g3;};;class _u3 extends AudioWorkletProcessor{static _v3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_u3._v3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];const _w3=(_u3._v3*sampleRate)+1;this.buffer=new Array(_z1);this._x3=new Uint32Array(_z1);for(let _G1=0;_G1<_z1;++_G1)this.buffer[_G1]=new Float32Array(_w3);}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){_M1[_N1]=_L1[_N1];const _y3=(time[_N1]!==undefined)?time[_N1]:time[0];const _z3=this._43(_G1,_y3);const _v2=(feedback[_N1]!==undefined)?feedback[_N1]:feedback[0];const _A3=_L1[_N1]+(_z3*_v2);this.write(_G1,_A3);const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0.0){continue;}const _R1=(mix[_N1]!==undefined)?mix[_N1]:mix[0];_M1[_N1]*=(1-_R1);_M1[_N1]+=(_z3*_R1);
}}return this._S1;}_43(_B3,_C3){const _D3=_C3*sampleRate;let _83=(this._x3[_B3]-~~_D3);let _93=(_83-1);while(_83<0)_83+=this.buffer[_B3].length;while(_93<0)_93+=this.buffer[_B3].length;const _E3=_D3-~~_D3;const _a3=this.buffer[_B3][_83];const _b3=this.buffer[_B3][_93];return _a3+(_b3-_a3)*_E3;}write(_B3,_g1){++this._x3[_B3];this._x3[_B3]%=this.buffer[_B3].length;this.buffer[_B3][this._x3[_B3]]=_g1;}}registerProcessor("delay-processor",_u3);AudioWorkletProcessor.prototype._y1=function(){this._S1=true;this.port.onmessage=(_F3)=>{
if(_F3.data==="kill")this._S1=false;};};;class _G3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._y1();}process(_J1,_K1,parameters){const input=_J1[0];const bypass=parameters.bypass;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];for(let _N1=0;_N1<_L1.length;++_N1){const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_K1[_Q1][_G1][_N1]=_L1[_N1];}}return this._S1;
}}class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._y1();}process(_J1,_K1,parameters){const _12=_J1[0];const _22=_J1[1];const output=_K1[0];const gain=parameters.gain;for(let _G1=0;_G1<_22.length;++_G1){const _L1=_22[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1)_M1[_N1]=_L1[_N1];}for(let _G1=0;_G1<_12.length;++_G1){const _L1=_12[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;
++_N1){const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_M1[_N1]+=_L1[_N1]*_w2;}}return this._S1;}}registerProcessor("audio-bus-input",_G3);registerProcessor("audio-bus-output",_H3);class _I3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _J3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._K3=new Float32Array(_z1);this._L3=new Uint32Array(_z1);}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){_M1[_N1]=_L1[_N1];if(this._L3[_G1]===0)this._K3[_G1]=_L1[_N1];const _v2=(factor[_N1]!==undefined)?factor[_N1]:factor[0];++this._L3[_G1];this._L3[_G1]%=_v2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0.0){continue;}let _P1=this._K3[_G1];const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_P1*=_w2;_P1=Math.max(Math.min(_P1,
1.0),-1.0);const _M3=(resolution[_N1]!==undefined)?resolution[_N1]:resolution[0];const max=(_P1>0.0)?_I3._J3[_M3]-1:_I3._J3[_M3];_P1=Math.round(_P1*max)/max;const _R1=(mix[_N1]!==undefined)?mix[_N1]:mix[0];_M1[_N1]*=(1.0-_R1);_M1[_N1]+=(_P1*_R1);}}return this._S1;}}registerProcessor("bitcrusher-processor",_I3);class _N3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._O3=new Array(_z1).fill(1.0);this._P3=new Array(_z1).fill(0.0);this._Q3=new Array(_z1).fill(_M2._N2._O2);this._R3=new Array(_z1);for(let _G1=0;_G1<_z1;++_G1){
this._R3[_G1]=new _c3();this._R3[_G1]._k3(sampleRate);this._R3[_G1]._n3(this._O3[_G1]);this._R3[_G1]._r3(this._Q3[_G1]);if(_G1%2===1){this._R3[_G1]._o3(this._P3[_G1]);}}}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){_M1[_N1]=_L1[_N1];
const _M3=(rate[_N1]!==undefined)?rate[_N1]:rate[0];const _S3=(offset[_N1]!==undefined)?offset[_N1]:offset[0];const _T3=(shape[_N1]!==undefined)?shape[_N1]:shape[0];this._U3(_G1,_M3,_S3,_T3);const _V3=this._R3[_G1]._43();const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0.0){continue;}const _H1=(intensity[_N1]!==undefined)?intensity[_N1]:intensity[0];const out=_L1[_N1]*_V3*_H1;_M1[_N1]*=(1.0-_H1);_M1[_N1]+=out;}}return this._S1;}_U3(_B3,_W3,_p3,_s3){if(_W3!==this._O3[_B3]){this._R3[_B3]._n3(_W3);
this._O3[_B3]=_W3;}if(_p3!==this._P3[_B3]){if(_B3%2===1){this._R3[_B3]._o3(_p3);}this._P3[_B3]=_p3;}if(_s3!==this._Q3[_B3]){this._R3[_B3]._r3(_s3);this._Q3[_B3]=_s3;}}}registerProcessor("tremolo-processor",_N3);class _X3{constructor(_C3=1e-3){this.setTime(_C3);}setTime(_C3){this._Y3=Math.exp(-1/(_C3*sampleRate));}process(_Z3,__3){return _Z3+this._Y3*(__3-_Z3);}}class _04{constructor(_14,_24){this._34=new _X3(_14);this._44=new _X3(_24);this._54=_14;this._64=_24;}_74(_C3){if(_C3===this._54)return;this._34.setTime(_C3);
this._54=_C3;}_84(_C3){if(_C3===this._64)return;this._44.setTime(_C3);this._64=_C3;}process(_Z3,__3){if(_Z3>__3)return this._34.process(_Z3,__3);else return this._44.process(_Z3,__3);}}class _94 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_a4){super();this._y1();const _34=_94.parameterDescriptors.find(_b4=>_b4.name==="attack");const _44=_94.parameterDescriptors.find(_b4=>_b4.name==="release");this._c4=new _04(_34.defaultValue,_44.defaultValue);
this._d4=0;}process(_e4,_f4,_g4){const input=_e4[0];const output=_f4[0];const bypass=_g4.bypass;const ingain=_g4.ingain;const outgain=_g4.outgain;const threshold=_g4.threshold;const ratio=_g4.ratio;const attack=_g4.attack;const release=_g4.release;if(input.length===0)return this._S1;for(let _N1=0;_N1<input[0].length;++_N1){let _h4=input.map(_i4=>_i4[_N1]);output.forEach((_i4,_j4)=>{_i4[_N1]=_h4[_j4];});const _k4=(ingain[_N1]!==undefined)?ingain[_N1]:ingain[0];_h4=_h4.map(_l4=>_l4*=_k4);const rect=_h4.map(_l4=>Math.abs(_l4));
const max=Math.max(...rect);const _m4=_n4(max);const _y3=(threshold[_N1]!==undefined)?threshold[_N1]:threshold[0];const _o4=_n4(_y3);const _p4=Math.max(0,_m4-_o4);const _34=(attack[_N1]!==undefined)?attack[_N1]:attack[0];const _44=(release[_N1]!==undefined)?release[_N1]:release[0];this._c4._74(_34);this._c4._84(_44);this._d4=this._c4.process(_p4,this._d4);const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_Q1>0)continue;const _M3=(ratio[_N1]!==undefined)?ratio[_N1]:ratio[0];const _q4=(this._d4/_M3)-this._d4;
const _w2=_r4(_q4);_h4=_h4.map(_l4=>_l4*=_w2);const _s4=(outgain[_N1]!==undefined)?outgain[_N1]:outgain[0];_h4=_h4.map(_l4=>_l4*=_s4);output.forEach((_i4,_j4)=>{_i4[_N1]=_h4[_j4];});}return this._S1;}}function _n4(_t4){return 20*Math.log10(_t4);}function _r4(_t4){return Math.pow(10,_t4/20);}registerProcessor("compressor-processor",_94);class _u4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _s2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_s2),minValue:10.0,maxValue:_s2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_x1){super();this._y1();const _z1=_x1.outputChannelCount[0];this._72=0;this._82=0;this._92=0;this._a2=0;this._b2=0;this._c2=new Float32Array(_z1);this._d2=new Float32Array(_z1);this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);
this._t2=-1;this._h2=-1;this._u2=-1;}process(_J1,_K1,parameters){const input=_J1[0];const output=_K1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _i2=(freq.length===1&&q.length===1&&gain.length===1);if(_i2)this._j2(freq[0],q[0],gain[0]);for(let _G1=0;_G1<input.length;++_G1){const _L1=input[_G1];const _M1=output[_G1];for(let _N1=0;_N1<_L1.length;++_N1){if(_i2===!1){const _v2=(freq[_N1]!==undefined)?freq[_N1]:freq[0];const _k2=(q[_N1]!==undefined)?q[_N1]:q[0];
const _w2=(gain[_N1]!==undefined)?gain[_N1]:gain[0];this._j2(_v2,_k2,_w2);}const _l2=this._92*_L1[_N1]+this._a2*this._c2[_G1]+this._b2*this._d2[_G1]-this._72*this._e2[_G1]-this._82*this._f2[_G1];this._d2[_G1]=this._c2[_G1];this._c2[_G1]=_L1[_N1];this._f2[_G1]=this._e2[_G1];this._e2[_G1]=_l2;const _Q1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_M1[_N1]=(_Q1>0)?_L1[_N1]:_l2;}}return this._S1;}_j2(_x2,_n2,_y2){if(_x2===this._t2&&_n2===this._h2&&_y2===this._u2)return;const _o2=2*Math.PI*_x2/sampleRate;
const _p2=Math.cos(_o2);const _z2=Math.sqrt(_y2);const _F2=_z2+1;const _G2=_z2-1;const _H2=_F2*_p2;const _I2=_G2*_p2;const _J2=_F2-_I2;const _K2=_F2+_I2;const alpha=Math.sin(_o2)/(2*_n2);const _L2=(2*Math.sqrt(_z2)*alpha);const _q2=_K2+_L2;const _72=-2*(_G2+_H2);const _82=_K2-_L2;const _92=_z2*(_J2+_L2);const _a2=2*_z2*(_G2-_H2);const _b2=_z2*(_J2-_L2);this._72=_72/_q2;this._82=_82/_q2;this._92=_92/_q2;this._a2=_a2/_q2;this._b2=_b2/_q2;this._t2=_x2;this._h2=_n2;this._u2=_y2;}}registerProcessor("lo-shelf-processor",
_u4);