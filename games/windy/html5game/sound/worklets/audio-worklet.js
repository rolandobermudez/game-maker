class _71{constructor(_81){this._91=0;this._a1=0;this.feedback=0;this._b1=0;this.buffer=new Float32Array(_81);this._c1=0;}process(_d1){const out=this.buffer[this._c1];this._b1=(this._b1*this._91)+(out*this._a1);this.buffer[this._c1]=_d1+(this._b1*this.feedback);++this._c1;this._c1%=this.buffer.length;return out;}_e1(_f1){this.feedback=Math.min(Math.max(0,_f1),1);}_g1(_h1){this._91=Math.min(Math.max(0,_h1),1);this._a1=1-this._91;}}class _i1{constructor(_81){this.feedback=0;this.buffer=new Float32Array(_81);
this._c1=0;}process(_d1){const out=this.buffer[this._c1];this.buffer[this._c1]=_d1+(out*this.feedback);++this._c1;this._c1%=this.buffer.length;return(out-_d1);}_e1(_f1){this.feedback=Math.min(Math.max(0,_f1),1);}}class _j1 extends AudioWorkletProcessor{static _k1=8;static _l1=4;static _m1=0.015;static _n1=0.4;static _o1=0.28;static _p1=0.7;static _q1=[1116,1188,1277,1356,1422,1491,1557,1617];static _r1=[1139,1211,1300,1379,1445,1514,1580,1640];static _s1=[556,441,341,225];static _t1=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._x1=-1;this._y1=-1;this._z1=new Array(_w1);this._A1=new Array(_w1);const _B1=[_j1._q1,_j1._r1];const _C1=[_j1._s1,
_j1._t1];for(let _D1=0;_D1<_w1;++_D1){this._z1[_D1]=new Array(_j1._k1);this._A1[_D1]=new Array(_j1._l1);for(let _E1=0;_E1<_j1._k1;++_E1)this._z1[_D1][_E1]=new _71(_B1[_D1%_B1.length][_E1]);for(let _E1=0;_E1<_j1._l1;++_E1)this._A1[_D1][_E1]=new _i1(_C1[_D1%_C1.length][_E1]);}this._F1(0.5);this._g1(0.5);for(let _D1=0;_D1<_w1;++_D1)for(let _E1=0;_E1<_j1._l1;++_E1)this._A1[_D1][_E1]._e1(0.5);}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const size=parameters.size;
const damp=parameters.damp;const mix=parameters.mix;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){const _K1=(size[_K1]!==undefined)?size[_K1]:size[0];const _L1=(damp[_K1]!==undefined)?damp[_K1]:damp[0];this._F1(_K1);this._g1(_L1);_J1[_K1]=_I1[_K1];let out=0;const _M1=_I1[_K1]*_j1._m1;for(let _E1=0;_E1<_j1._k1;++_E1)out+=this._z1[_D1][_E1].process(_M1);for(let _E1=0;_E1<_j1._l1;++_E1)out=this._A1[_D1][_E1].process(out);const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];
if(_N1>0.0){continue;}const _O1=(mix[_K1]!==undefined)?mix[_K1]:mix[0];_J1[_K1]*=(1-_O1);_J1[_K1]+=(out*_O1);}}return this._P1;}_F1(_81){if(_81===this._x1)return;const size=(_81*_j1._o1)+_j1._p1;for(let _D1=0;_D1<this._z1.length;++_D1)for(let _E1=0;_E1<_j1._k1;++_E1)this._z1[_D1][_E1]._e1(size);this._x1=_81;}_g1(_h1){if(_h1===this._y1)return;const damp=_h1*_j1._n1;for(let _D1=0;_D1<this._z1.length;++_D1)for(let _E1=0;_E1<_j1._k1;++_E1)this._z1[_D1][_E1]._g1(damp);this._y1=_h1;}}registerProcessor("reverb1-processor",
_j1);class _Q1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._v1();}process(_R1,_S1,_T1){const input=_R1[0];const _U1=_S1[0];const _V1=_S1[1];for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _W1=_U1[_D1];const _X1=_V1[_D1];for(let _K1=0;_K1<_I1.length;++_K1){_W1[_K1]=_I1[_K1];_X1[_K1]=_I1[_K1];}}return this._P1;}}class _Y1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1}];}constructor(){super();this._v1();}process(_R1,_S1,_T1){const _Z1=_R1[0];const __1=_R1[1];const output=_S1[0];const bypass=_T1.bypass;for(let _D1=0;_D1<__1.length;++_D1){const _02=_Z1[_D1];const _12=__1[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_02.length;++_K1){const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0){_J1[_K1]=_12[_K1];}else {_J1[_K1]=_02[_K1];}}}return this._P1;}}registerProcessor("eq-input",_Q1);registerProcessor("eq-output",_Y1);class _22 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _32=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_32),minValue:10.0,maxValue:_32},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._42=0;this._52=0;this._62=0;this._72=0;this._82=0;this._92=new Float32Array(_w1);this._a2=new Float32Array(_w1);
this._b2=new Float32Array(_w1);this._c2=new Float32Array(_w1);this._d2=-1;this._e2=-1;}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _f2=(cutoff.length===1&&q.length===1);if(_f2)this._g2(cutoff[0],q[0]);for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){if(_f2===!1){const _D1=(cutoff[_K1]!==undefined)?cutoff[_K1]:cutoff[0];const _h2=(q[_K1]!==undefined)?q[_K1]:q[0];
this._g2(_D1,_h2);}const _i2=this._62*_I1[_K1]+this._72*this._92[_D1]+this._82*this._a2[_D1]-this._42*this._b2[_D1]-this._52*this._c2[_D1];this._a2[_D1]=this._92[_D1];this._92[_D1]=_I1[_K1];this._c2[_D1]=this._b2[_D1];this._b2[_D1]=_i2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_J1[_K1]=(_N1>0)?_I1[_K1]:_i2;}}return this._P1;}_g2(_j2,_k2){if(_j2===this._d2&&_k2===this._e2)return;const _l2=2*Math.PI*_j2/sampleRate;const alpha=Math.sin(_l2)/(2*_k2);const _m2=Math.cos(_l2);const _n2=1+alpha;
const _42=-2*_m2;const _52=1-alpha;const _62=(1-_m2)/2;const _72=1-_m2;const _82=(1-_m2)/2;this._42=_42/_n2;this._52=_52/_n2;this._62=_62/_n2;this._72=_72/_n2;this._82=_82/_n2;this._d2=_j2;this._e2=_k2;}}registerProcessor("lpf2-processor",_22);class _o2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_p2),minValue:10.0,maxValue:_p2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._42=0;this._52=0;this._62=0;this._72=0;this._82=0;this._92=new Float32Array(_w1);this._a2=new Float32Array(_w1);this._b2=new Float32Array(_w1);this._c2=new Float32Array(_w1);this._q2=-1;this._e2=-1;this._r2=-1;}process(_G1,_H1,parameters){const input=_G1[0];
const output=_H1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _f2=(freq.length===1&&q.length===1&&gain.length===1);if(_f2)this._g2(freq[0],q[0],gain[0]);for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){if(_f2===!1){const _s2=(freq[_K1]!==undefined)?freq[_K1]:freq[0];const _h2=(q[_K1]!==undefined)?q[_K1]:q[0];const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];this._g2(_s2,
_h2,_t2);}const _i2=this._62*_I1[_K1]+this._72*this._92[_D1]+this._82*this._a2[_D1]-this._42*this._b2[_D1]-this._52*this._c2[_D1];this._a2[_D1]=this._92[_D1];this._92[_D1]=_I1[_K1];this._c2[_D1]=this._b2[_D1];this._b2[_D1]=_i2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_J1[_K1]=(_N1>0)?_I1[_K1]:_i2;}}return this._P1;}_g2(_u2,_k2,_v2){if(_u2===this._q2&&_k2===this._e2&&_v2===this._r2)return;const _l2=2*Math.PI*_u2/sampleRate;const _m2=Math.cos(_l2);const _w2=Math.sqrt(_v2);const alpha=Math.sin(_l2)/(2*_k2);
const _x2=alpha/_w2;const _y2=alpha*_w2;const _n2=1+_x2;const _42=-2*_m2;const _52=1-_x2;const _62=1+_y2;const _72=_42;const _82=1-_y2;this._42=_42/_n2;this._52=_52/_n2;this._62=_62/_n2;this._72=_72/_n2;this._82=_82/_n2;this._q2=_u2;this._e2=_k2;this._r2=_v2;}}registerProcessor("peak-eq-processor",_o2);class _z2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,
minValue:0.0}];}constructor(){super();this._v1();}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){_J1[_K1]=_I1[_K1];const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0.0){continue;}const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];_J1[_K1]*=_t2;}}return this._P1;}}registerProcessor("gain-processor",
_z2);class _A2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _32=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_32),minValue:10.0,maxValue:_32},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._42=0;this._52=0;this._62=0;this._72=0;this._82=0;
this._92=new Float32Array(_w1);this._a2=new Float32Array(_w1);this._b2=new Float32Array(_w1);this._c2=new Float32Array(_w1);this._d2=-1;this._e2=-1;}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _f2=(cutoff.length===1&&q.length===1);if(_f2)this._g2(cutoff[0],q[0]);for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){if(_f2===!1){const _D1=(cutoff[_K1]!==undefined)?cutoff[_K1]:cutoff[0];
const _h2=(q[_K1]!==undefined)?q[_K1]:q[0];this._g2(_D1,_h2);}const _i2=this._62*_I1[_K1]+this._72*this._92[_D1]+this._82*this._a2[_D1]-this._42*this._b2[_D1]-this._52*this._c2[_D1];this._a2[_D1]=this._92[_D1];this._92[_D1]=_I1[_K1];this._c2[_D1]=this._b2[_D1];this._b2[_D1]=_i2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_J1[_K1]=(_N1>0)?_I1[_K1]:_i2;}}return this._P1;}_g2(_j2,_k2){if(_j2===this._d2&&_k2===this._e2)return;const _l2=2*Math.PI*_j2/sampleRate;const alpha=Math.sin(_l2)/(2*_k2);
const _m2=Math.cos(_l2);const _n2=1+alpha;const _42=-2*_m2;const _52=1-alpha;const _62=(1+_m2)/2;const _72=-1-_m2;const _82=(1+_m2)/2;this._42=_42/_n2;this._52=_52/_n2;this._62=_62/_n2;this._72=_72/_n2;this._82=_82/_n2;this._d2=_j2;this._e2=_k2;}}registerProcessor("hpf2-processor",_A2);class _B2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_p2),minValue:10.0,maxValue:_p2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._42=0;this._52=0;this._62=0;this._72=0;this._82=0;this._92=new Float32Array(_w1);this._a2=new Float32Array(_w1);this._b2=new Float32Array(_w1);this._c2=new Float32Array(_w1);this._q2=-1;this._e2=-1;this._r2=-1;}process(_G1,
_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _f2=(freq.length===1&&q.length===1&&gain.length===1);if(_f2)this._g2(freq[0],q[0],gain[0]);for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){if(_f2===!1){const _s2=(freq[_K1]!==undefined)?freq[_K1]:freq[0];const _h2=(q[_K1]!==undefined)?q[_K1]:q[0];const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];
this._g2(_s2,_h2,_t2);}const _i2=this._62*_I1[_K1]+this._72*this._92[_D1]+this._82*this._a2[_D1]-this._42*this._b2[_D1]-this._52*this._c2[_D1];this._a2[_D1]=this._92[_D1];this._92[_D1]=_I1[_K1];this._c2[_D1]=this._b2[_D1];this._b2[_D1]=_i2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_J1[_K1]=(_N1>0)?_I1[_K1]:_i2;}}return this._P1;}_g2(_u2,_k2,_v2){if(_u2===this._q2&&_k2===this._e2&&_v2===this._r2)return;const _l2=2*Math.PI*_u2/sampleRate;const _m2=Math.cos(_l2);const _w2=Math.sqrt(_v2);const _C2=_w2+1;
const _D2=_w2-1;const _E2=_C2*_m2;const _F2=_D2*_m2;const _G2=_C2-_F2;const _H2=_C2+_F2;const alpha=Math.sin(_l2)/(2*_k2);const _I2=(2*Math.sqrt(_w2)*alpha);const _n2=_G2+_I2;const _42=2*(_D2-_E2);const _52=_G2-_I2;const _62=_w2*(_H2+_I2);const _72=-2*_w2*(_D2+_E2);const _82=_w2*(_H2-_I2);this._42=_42/_n2;this._52=_52/_n2;this._62=_62/_n2;this._72=_72/_n2;this._82=_82/_n2;this._q2=_u2;this._e2=_k2;this._r2=_v2;}}registerProcessor("hi-shelf-processor",_B2);function _J2(){}_J2._K2={_L2:0,_M2:1,_N2:2,_O2:3,_P2:4,
_Q2:5};_J2._R2=function(_S2){return 1.0-_S2;};_J2._T2=function(_S2){return _S2;};_J2._U2=function(_S2){return 0.5*(Math.sin((_S2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_J2._V2=function(_S2){if(_S2<0.5){return 0.0;}return 1.0;};_J2._W2=function(_S2){if(_S2<0.5){return 2.0*_S2;}return 2.0-(2.0*_S2);};_J2._X2=[_J2._R2,_J2._T2,_J2._U2,_J2._V2,_J2._W2];_Y2._Z2=512;_Y2.__2=1.0/_Y2._Z2;function _Y2(_03){this.data=new Float32Array(_Y2._Z2);for(let _E1=0;_E1<_Y2._Z2;++_E1){this.data[_E1]=_03(_E1*_Y2.__2);}}_Y2.prototype._13=function(_S2){
_S2=Math.max(0.0,_S2);_S2=Math.min(_S2,1.0);const _23=_S2*_Y2._Z2;const _33=~~_23;const _43=_23-_33;let _53=_33;let _63=_53+1;if(_53>=_Y2._Z2){_53-=_Y2._Z2;}if(_63>=_Y2._Z2){_63-=_Y2._Z2;}const _73=this.data[_53];const _83=this.data[_63];return _73+(_83-_73)*_43;};;_93._a3=[];_93._b3=!1;_93._c3=0.0;_93._p2=20.0;function _93(){this._d3=48000;this.shape=_J2._K2._N2;this.freq=1.0;this._e3=0.0;this.__2=0.0;this._f3=0.0;if(_93._b3==true){return;}for(let _E1=0;_E1<_J2._K2._Q2;++_E1){_93._a3[_E1]=new _Y2(_J2._X2[_E1]);
}_93._b3=true;}_93._g3=function(){return(_93._b3==!0);};_93.prototype._h3=function(_i3){this._d3=_i3;this._j3();};;_93.prototype._k3=function(_u2){_u2=Math.max(_93._c3,_u2);_u2=Math.min(_u2,_93._p2);this.freq=_u2;this._j3();};;_93.prototype._l3=function(_m3){_m3=Math.max(0.0,_m3);_m3=Math.min(_m3,1.0);const _n3=_m3-this._f3;this._f3=_m3;this._e3+=_n3;while(this._e3>=1.0){this._e3-=1.0;}while(this._e3<0.0){this._e3+=1.0;}};;_93.prototype._o3=function(_p3){_p3=Math.max(0,_p3);_p3=Math.min(_p3,_J2._K2._Q2-1);
this.shape=_p3;};;_93.prototype._13=function(){const _q3=_93._a3[this.shape]._13(this._e3);this._e3+=this.__2;while(this._e3>=1.0){this._e3-=1.0;}return _q3;};;_93.prototype._j3=function(){this.__2=this.freq/this._d3;};;class _r3 extends AudioWorkletProcessor{static _s3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_r3._s3},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];const _t3=(_r3._s3*sampleRate)+1;this.buffer=new Array(_w1);this._u3=new Uint32Array(_w1);for(let _D1=0;_D1<_w1;++_D1)this.buffer[_D1]=new Float32Array(_t3);}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;
const mix=parameters.mix;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){_J1[_K1]=_I1[_K1];const _v3=(time[_K1]!==undefined)?time[_K1]:time[0];const _w3=this._13(_D1,_v3);const _s2=(feedback[_K1]!==undefined)?feedback[_K1]:feedback[0];const _x3=_I1[_K1]+(_w3*_s2);this.write(_D1,_x3);const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0.0){continue;}const _O1=(mix[_K1]!==undefined)?mix[_K1]:mix[0];_J1[_K1]*=(1-_O1);_J1[_K1]+=(_w3*_O1);
}}return this._P1;}_13(_y3,_z3){const _A3=_z3*sampleRate;let _53=(this._u3[_y3]-~~_A3);let _63=(_53-1);while(_53<0)_53+=this.buffer[_y3].length;while(_63<0)_63+=this.buffer[_y3].length;const _B3=_A3-~~_A3;const _73=this.buffer[_y3][_53];const _83=this.buffer[_y3][_63];return _73+(_83-_73)*_B3;}write(_y3,_d1){++this._u3[_y3];this._u3[_y3]%=this.buffer[_y3].length;this.buffer[_y3][this._u3[_y3]]=_d1;}}registerProcessor("delay-processor",_r3);AudioWorkletProcessor.prototype._v1=function(){this._P1=true;this.port.onmessage=(_C3)=>{
if(_C3.data==="kill")this._P1=false;};};;class _D3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._v1();}process(_G1,_H1,parameters){const input=_G1[0];const bypass=parameters.bypass;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];for(let _K1=0;_K1<_I1.length;++_K1){const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_H1[_N1][_D1][_K1]=_I1[_K1];}}return this._P1;
}}class _E3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._v1();}process(_G1,_H1,parameters){const _Z1=_G1[0];const __1=_G1[1];const output=_H1[0];const gain=parameters.gain;for(let _D1=0;_D1<__1.length;++_D1){const _I1=__1[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1)_J1[_K1]=_I1[_K1];}for(let _D1=0;_D1<_Z1.length;++_D1){const _I1=_Z1[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;
++_K1){const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];_J1[_K1]+=_I1[_K1]*_t2;}}return this._P1;}}registerProcessor("audio-bus-input",_D3);registerProcessor("audio-bus-output",_E3);class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",
automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _G3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._H3=new Float32Array(_w1);this._I3=new Uint32Array(_w1);}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;
const resolution=parameters.resolution;const mix=parameters.mix;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){_J1[_K1]=_I1[_K1];if(this._I3[_D1]===0)this._H3[_D1]=_I1[_K1];const _s2=(factor[_K1]!==undefined)?factor[_K1]:factor[0];++this._I3[_D1];this._I3[_D1]%=_s2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0.0){continue;}let _M1=this._H3[_D1];const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];_M1*=_t2;_M1=Math.max(Math.min(_M1,
1.0),-1.0);const _J3=(resolution[_K1]!==undefined)?resolution[_K1]:resolution[0];const max=(_M1>0.0)?_F3._G3[_J3]-1:_F3._G3[_J3];_M1=Math.round(_M1*max)/max;const _O1=(mix[_K1]!==undefined)?mix[_K1]:mix[0];_J1[_K1]*=(1.0-_O1);_J1[_K1]+=(_M1*_O1);}}return this._P1;}}registerProcessor("bitcrusher-processor",_F3);class _K3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,
minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._L3=new Array(_w1).fill(1.0);this._M3=new Array(_w1).fill(0.0);this._N3=new Array(_w1).fill(_J2._K2._L2);this._O3=new Array(_w1);for(let _D1=0;_D1<_w1;++_D1){
this._O3[_D1]=new _93();this._O3[_D1]._h3(sampleRate);this._O3[_D1]._k3(this._L3[_D1]);this._O3[_D1]._o3(this._N3[_D1]);if(_D1%2===1){this._O3[_D1]._l3(this._M3[_D1]);}}}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){_J1[_K1]=_I1[_K1];
const _J3=(rate[_K1]!==undefined)?rate[_K1]:rate[0];const _P3=(offset[_K1]!==undefined)?offset[_K1]:offset[0];const _Q3=(shape[_K1]!==undefined)?shape[_K1]:shape[0];this._R3(_D1,_J3,_P3,_Q3);const _S3=this._O3[_D1]._13();const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0.0){continue;}const _E1=(intensity[_K1]!==undefined)?intensity[_K1]:intensity[0];const out=_I1[_K1]*_S3*_E1;_J1[_K1]*=(1.0-_E1);_J1[_K1]+=out;}}return this._P1;}_R3(_y3,_T3,_m3,_p3){if(_T3!==this._L3[_y3]){this._O3[_y3]._k3(_T3);
this._L3[_y3]=_T3;}if(_m3!==this._M3[_y3]){if(_y3%2===1){this._O3[_y3]._l3(_m3);}this._M3[_y3]=_m3;}if(_p3!==this._N3[_y3]){this._O3[_y3]._o3(_p3);this._N3[_y3]=_p3;}}}registerProcessor("tremolo-processor",_K3);class _U3{constructor(_z3=1e-3){this.setTime(_z3);}setTime(_z3){this._V3=Math.exp(-1/(_z3*sampleRate));}process(_W3,_X3){return _W3+this._V3*(_X3-_W3);}}class _Y3{constructor(_Z3,__3){this._04=new _U3(_Z3);this._14=new _U3(__3);this._24=_Z3;this._34=__3;}_44(_z3){if(_z3===this._24)return;this._04.setTime(_z3);
this._24=_z3;}_54(_z3){if(_z3===this._34)return;this._14.setTime(_z3);this._34=_z3;}process(_W3,_X3){if(_W3>_X3)return this._04.process(_W3,_X3);else return this._14.process(_W3,_X3);}}class _64 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",
automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_74){super();this._v1();const _04=_64.parameterDescriptors.find(_84=>_84.name==="attack");const _14=_64.parameterDescriptors.find(_84=>_84.name==="release");this._94=new _Y3(_04.defaultValue,_14.defaultValue);
this._a4=0;}process(_b4,_c4,_d4){const input=_b4[0];const output=_c4[0];const bypass=_d4.bypass;const ingain=_d4.ingain;const outgain=_d4.outgain;const threshold=_d4.threshold;const ratio=_d4.ratio;const attack=_d4.attack;const release=_d4.release;if(input.length===0)return this._P1;for(let _K1=0;_K1<input[0].length;++_K1){let _e4=input.map(_f4=>_f4[_K1]);output.forEach((_f4,_g4)=>{_f4[_K1]=_e4[_g4];});const _h4=(ingain[_K1]!==undefined)?ingain[_K1]:ingain[0];_e4=_e4.map(_i4=>_i4*=_h4);const rect=_e4.map(_i4=>Math.abs(_i4));
const max=Math.max(...rect);const _j4=_k4(max);const _v3=(threshold[_K1]!==undefined)?threshold[_K1]:threshold[0];const _l4=_k4(_v3);const _m4=Math.max(0,_j4-_l4);const _04=(attack[_K1]!==undefined)?attack[_K1]:attack[0];const _14=(release[_K1]!==undefined)?release[_K1]:release[0];this._94._44(_04);this._94._54(_14);this._a4=this._94.process(_m4,this._a4);const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];if(_N1>0)continue;const _J3=(ratio[_K1]!==undefined)?ratio[_K1]:ratio[0];const _n4=(this._a4/_J3)-this._a4;
const _t2=_o4(_n4);_e4=_e4.map(_i4=>_i4*=_t2);const _p4=(outgain[_K1]!==undefined)?outgain[_K1]:outgain[0];_e4=_e4.map(_i4=>_i4*=_p4);output.forEach((_f4,_g4)=>{_f4[_K1]=_e4[_g4];});}return this._P1;}}function _k4(_q4){return 20*Math.log10(_q4);}function _o4(_q4){return Math.pow(10,_q4/20);}registerProcessor("compressor-processor",_64);class _r4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_p2),minValue:10.0,maxValue:_p2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_u1){super();this._v1();const _w1=_u1.outputChannelCount[0];this._42=0;this._52=0;this._62=0;this._72=0;this._82=0;this._92=new Float32Array(_w1);this._a2=new Float32Array(_w1);this._b2=new Float32Array(_w1);this._c2=new Float32Array(_w1);
this._q2=-1;this._e2=-1;this._r2=-1;}process(_G1,_H1,parameters){const input=_G1[0];const output=_H1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _f2=(freq.length===1&&q.length===1&&gain.length===1);if(_f2)this._g2(freq[0],q[0],gain[0]);for(let _D1=0;_D1<input.length;++_D1){const _I1=input[_D1];const _J1=output[_D1];for(let _K1=0;_K1<_I1.length;++_K1){if(_f2===!1){const _s2=(freq[_K1]!==undefined)?freq[_K1]:freq[0];const _h2=(q[_K1]!==undefined)?q[_K1]:q[0];
const _t2=(gain[_K1]!==undefined)?gain[_K1]:gain[0];this._g2(_s2,_h2,_t2);}const _i2=this._62*_I1[_K1]+this._72*this._92[_D1]+this._82*this._a2[_D1]-this._42*this._b2[_D1]-this._52*this._c2[_D1];this._a2[_D1]=this._92[_D1];this._92[_D1]=_I1[_K1];this._c2[_D1]=this._b2[_D1];this._b2[_D1]=_i2;const _N1=(bypass[_K1]!==undefined)?bypass[_K1]:bypass[0];_J1[_K1]=(_N1>0)?_I1[_K1]:_i2;}}return this._P1;}_g2(_u2,_k2,_v2){if(_u2===this._q2&&_k2===this._e2&&_v2===this._r2)return;const _l2=2*Math.PI*_u2/sampleRate;
const _m2=Math.cos(_l2);const _w2=Math.sqrt(_v2);const _C2=_w2+1;const _D2=_w2-1;const _E2=_C2*_m2;const _F2=_D2*_m2;const _G2=_C2-_F2;const _H2=_C2+_F2;const alpha=Math.sin(_l2)/(2*_k2);const _I2=(2*Math.sqrt(_w2)*alpha);const _n2=_H2+_I2;const _42=-2*(_D2+_E2);const _52=_H2-_I2;const _62=_w2*(_G2+_I2);const _72=2*_w2*(_D2-_E2);const _82=_w2*(_G2-_I2);this._42=_42/_n2;this._52=_52/_n2;this._62=_62/_n2;this._72=_72/_n2;this._82=_82/_n2;this._q2=_u2;this._e2=_k2;this._r2=_v2;}}registerProcessor("lo-shelf-processor",
_r4);