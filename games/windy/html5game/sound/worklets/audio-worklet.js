class _e{constructor(_f){this._g=0;this._h=0;this.feedback=0;this._i=0;this.buffer=new Float32Array(_f);this._j=0;}process(_k){const out=this.buffer[this._j];this._i=(this._i*this._g)+(out*this._h);this.buffer[this._j]=_k+(this._i*this.feedback);++this._j;this._j%=this.buffer.length;return out;}_l(_m){this.feedback=Math.min(Math.max(0,_m),1);}_n(_o){this._g=Math.min(Math.max(0,_o),1);this._h=1-this._g;}}class _p{constructor(_f){this.feedback=0;this.buffer=new Float32Array(_f);this._j=0;}process(_k){const out=this.buffer[this._j];
this.buffer[this._j]=_k+(out*this.feedback);++this._j;this._j%=this.buffer.length;return(out-_k);}_l(_m){this.feedback=Math.min(Math.max(0,_m),1);}}class _q extends AudioWorkletProcessor{static _r=8;static _s=4;static _t=0.015;static _u=0.4;static _v=0.28;static _w=0.7;static _x=[1116,1188,1277,1356,1422,1491,1557,1617];static _y=[1139,1211,1300,1379,1445,1514,1580,1640];static _z=[556,441,341,225];static _A=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._E=-1;this._F=-1;this._G=new Array(_D);this._H=new Array(_D);const _I=[_q._x,_q._y];const _J=[_q._z,_q._A];for(let _K=0;_K<_D;++_K){this._G[_K]=new Array(_q._r);this._H[_K]=new Array(_q._s);
for(let _L=0;_L<_q._r;++_L)this._G[_K][_L]=new _e(_I[_K%_I.length][_L]);for(let _L=0;_L<_q._s;++_L)this._H[_K][_L]=new _p(_J[_K%_J.length][_L]);}this._M(0.5);this._n(0.5);for(let _K=0;_K<_D;++_K)for(let _L=0;_L<_q._s;++_L)this._H[_K][_L]._l(0.5);}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;
++_R){const _R=(size[_R]!==undefined)?size[_R]:size[0];const _S=(damp[_R]!==undefined)?damp[_R]:damp[0];this._M(_R);this._n(_S);_Q[_R]=_P[_R];let out=0;const _T=_P[_R]*_q._t;for(let _L=0;_L<_q._r;++_L)out+=this._G[_K][_L].process(_T);for(let _L=0;_L<_q._s;++_L)out=this._H[_K][_L].process(out);const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0.0){continue;}const _V=(mix[_R]!==undefined)?mix[_R]:mix[0];_Q[_R]*=(1-_V);_Q[_R]+=(out*_V);}}return this._W;}_M(_f){if(_f===this._E)return;const size=(_f*_q._v)+_q._w;
for(let _K=0;_K<this._G.length;++_K)for(let _L=0;_L<_q._r;++_L)this._G[_K][_L]._l(size);this._E=_f;}_n(_o){if(_o===this._F)return;const damp=_o*_q._u;for(let _K=0;_K<this._G.length;++_K)for(let _L=0;_L<_q._r;++_L)this._G[_K][_L]._n(damp);this._F=_o;}}registerProcessor("reverb1-processor",_q);class _X extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._C();}process(_Y,_Z,__){const input=_Y[0];const _01=_Z[0];const _11=_Z[1];for(let _K=0;_K<input.length;++_K){const _P=input[_K];
const _21=_01[_K];const _31=_11[_K];for(let _R=0;_R<_P.length;++_R){_21[_R]=_P[_R];_31[_R]=_P[_R];}}return this._W;}}class _41 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._C();}process(_Y,_Z,__){const _51=_Y[0];const _61=_Y[1];const output=_Z[0];const bypass=__.bypass;for(let _K=0;_K<_61.length;++_K){const _71=_51[_K];const _81=_61[_K];const _Q=output[_K];for(let _R=0;_R<_71.length;
++_R){const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0){_Q[_R]=_81[_R];}else {_Q[_R]=_71[_R];}}}return this._W;}}registerProcessor("eq-input",_X);registerProcessor("eq-output",_41);class _91 extends AudioWorkletProcessor{static get parameterDescriptors(){const _a1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_a1),minValue:10.0,maxValue:_a1},{name:"q",automationRate:"a-rate",
defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._b1=0;this._c1=0;this._d1=0;this._e1=0;this._f1=0;this._g1=new Float32Array(_D);this._h1=new Float32Array(_D);this._i1=new Float32Array(_D);this._j1=new Float32Array(_D);this._k1=-1;this._l1=-1;}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m1=(cutoff.length===1&&q.length===1);if(_m1)this._n1(cutoff[0],
q[0]);for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){if(_m1===!1){const _K=(cutoff[_R]!==undefined)?cutoff[_R]:cutoff[0];const _o1=(q[_R]!==undefined)?q[_R]:q[0];this._n1(_K,_o1);}const _p1=this._d1*_P[_R]+this._e1*this._g1[_K]+this._f1*this._h1[_K]-this._b1*this._i1[_K]-this._c1*this._j1[_K];this._h1[_K]=this._g1[_K];this._g1[_K]=_P[_R];this._j1[_K]=this._i1[_K];this._i1[_K]=_p1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_Q[_R]=(_U>0)?_P[_R]:_p1;
}}return this._W;}_n1(_q1,_r1){if(_q1===this._k1&&_r1===this._l1)return;const _s1=2*Math.PI*_q1/sampleRate;const alpha=Math.sin(_s1)/(2*_r1);const _t1=Math.cos(_s1);const _u1=1+alpha;const _b1=-2*_t1;const _c1=1-alpha;const _d1=(1-_t1)/2;const _e1=1-_t1;const _f1=(1-_t1)/2;this._b1=_b1/_u1;this._c1=_c1/_u1;this._d1=_d1/_u1;this._e1=_e1/_u1;this._f1=_f1/_u1;this._k1=_q1;this._l1=_r1;}}registerProcessor("lpf2-processor",_91);class _v1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w1=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_w1),minValue:10.0,maxValue:_w1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._b1=0;this._c1=0;this._d1=0;this._e1=0;this._f1=0;this._g1=new Float32Array(_D);this._h1=new Float32Array(_D);
this._i1=new Float32Array(_D);this._j1=new Float32Array(_D);this._x1=-1;this._l1=-1;this._y1=-1;}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m1=(freq.length===1&&q.length===1&&gain.length===1);if(_m1)this._n1(freq[0],q[0],gain[0]);for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){if(_m1===!1){const _z1=(freq[_R]!==undefined)?freq[_R]:freq[0];
const _o1=(q[_R]!==undefined)?q[_R]:q[0];const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];this._n1(_z1,_o1,_A1);}const _p1=this._d1*_P[_R]+this._e1*this._g1[_K]+this._f1*this._h1[_K]-this._b1*this._i1[_K]-this._c1*this._j1[_K];this._h1[_K]=this._g1[_K];this._g1[_K]=_P[_R];this._j1[_K]=this._i1[_K];this._i1[_K]=_p1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_Q[_R]=(_U>0)?_P[_R]:_p1;}}return this._W;}_n1(_B1,_r1,_C1){if(_B1===this._x1&&_r1===this._l1&&_C1===this._y1)return;const _s1=2*Math.PI*_B1/sampleRate;
const _t1=Math.cos(_s1);const _D1=Math.sqrt(_C1);const alpha=Math.sin(_s1)/(2*_r1);const _E1=alpha/_D1;const _F1=alpha*_D1;const _u1=1+_E1;const _b1=-2*_t1;const _c1=1-_E1;const _d1=1+_F1;const _e1=_b1;const _f1=1-_F1;this._b1=_b1/_u1;this._c1=_c1/_u1;this._d1=_d1/_u1;this._e1=_e1/_u1;this._f1=_f1/_u1;this._x1=_B1;this._l1=_r1;this._y1=_C1;}}registerProcessor("peak-eq-processor",_v1);class _G1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._C();}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){_Q[_R]=_P[_R];const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0.0){continue;}const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];_Q[_R]*=_A1;}}return this._W;
}}registerProcessor("gain-processor",_G1);class _H1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _a1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_a1),minValue:10.0,maxValue:_a1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._b1=0;this._c1=0;
this._d1=0;this._e1=0;this._f1=0;this._g1=new Float32Array(_D);this._h1=new Float32Array(_D);this._i1=new Float32Array(_D);this._j1=new Float32Array(_D);this._k1=-1;this._l1=-1;}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m1=(cutoff.length===1&&q.length===1);if(_m1)this._n1(cutoff[0],q[0]);for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){if(_m1===!1){
const _K=(cutoff[_R]!==undefined)?cutoff[_R]:cutoff[0];const _o1=(q[_R]!==undefined)?q[_R]:q[0];this._n1(_K,_o1);}const _p1=this._d1*_P[_R]+this._e1*this._g1[_K]+this._f1*this._h1[_K]-this._b1*this._i1[_K]-this._c1*this._j1[_K];this._h1[_K]=this._g1[_K];this._g1[_K]=_P[_R];this._j1[_K]=this._i1[_K];this._i1[_K]=_p1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_Q[_R]=(_U>0)?_P[_R]:_p1;}}return this._W;}_n1(_q1,_r1){if(_q1===this._k1&&_r1===this._l1)return;const _s1=2*Math.PI*_q1/sampleRate;const alpha=Math.sin(_s1)/(2*_r1);
const _t1=Math.cos(_s1);const _u1=1+alpha;const _b1=-2*_t1;const _c1=1-alpha;const _d1=(1+_t1)/2;const _e1=-1-_t1;const _f1=(1+_t1)/2;this._b1=_b1/_u1;this._c1=_c1/_u1;this._d1=_d1/_u1;this._e1=_e1/_u1;this._f1=_f1/_u1;this._k1=_q1;this._l1=_r1;}}registerProcessor("hpf2-processor",_H1);class _I1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_w1),minValue:10.0,maxValue:_w1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._b1=0;this._c1=0;this._d1=0;this._e1=0;this._f1=0;this._g1=new Float32Array(_D);this._h1=new Float32Array(_D);this._i1=new Float32Array(_D);this._j1=new Float32Array(_D);this._x1=-1;this._l1=-1;this._y1=-1;}process(_N,
_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m1=(freq.length===1&&q.length===1&&gain.length===1);if(_m1)this._n1(freq[0],q[0],gain[0]);for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){if(_m1===!1){const _z1=(freq[_R]!==undefined)?freq[_R]:freq[0];const _o1=(q[_R]!==undefined)?q[_R]:q[0];const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];
this._n1(_z1,_o1,_A1);}const _p1=this._d1*_P[_R]+this._e1*this._g1[_K]+this._f1*this._h1[_K]-this._b1*this._i1[_K]-this._c1*this._j1[_K];this._h1[_K]=this._g1[_K];this._g1[_K]=_P[_R];this._j1[_K]=this._i1[_K];this._i1[_K]=_p1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_Q[_R]=(_U>0)?_P[_R]:_p1;}}return this._W;}_n1(_B1,_r1,_C1){if(_B1===this._x1&&_r1===this._l1&&_C1===this._y1)return;const _s1=2*Math.PI*_B1/sampleRate;const _t1=Math.cos(_s1);const _D1=Math.sqrt(_C1);const _J1=_D1+1;const _K1=_D1-1;
const _L1=_J1*_t1;const _M1=_K1*_t1;const _N1=_J1-_M1;const _O1=_J1+_M1;const alpha=Math.sin(_s1)/(2*_r1);const _P1=(2*Math.sqrt(_D1)*alpha);const _u1=_N1+_P1;const _b1=2*(_K1-_L1);const _c1=_N1-_P1;const _d1=_D1*(_O1+_P1);const _e1=-2*_D1*(_K1+_L1);const _f1=_D1*(_O1-_P1);this._b1=_b1/_u1;this._c1=_c1/_u1;this._d1=_d1/_u1;this._e1=_e1/_u1;this._f1=_f1/_u1;this._x1=_B1;this._l1=_r1;this._y1=_C1;}}registerProcessor("hi-shelf-processor",_I1);function _Q1(){}_Q1._R1={_S1:0,_T1:1,_U1:2,_V1:3,_W1:4,_X1:5};_Q1._Y1=function(_Z1){
return 1.0-_Z1;};_Q1.__1=function(_Z1){return _Z1;};_Q1._02=function(_Z1){return 0.5*(Math.sin((_Z1*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_Q1._12=function(_Z1){if(_Z1<0.5){return 0.0;}return 1.0;};_Q1._22=function(_Z1){if(_Z1<0.5){return 2.0*_Z1;}return 2.0-(2.0*_Z1);};_Q1._32=[_Q1._Y1,_Q1.__1,_Q1._02,_Q1._12,_Q1._22];_42._52=512;_42._62=1.0/_42._52;function _42(_72){this.data=new Float32Array(_42._52);for(let _L=0;_L<_42._52;++_L){this.data[_L]=_72(_L*_42._62);}}_42.prototype._82=function(_Z1){_Z1=Math.max(0.0,
_Z1);_Z1=Math.min(_Z1,1.0);const _92=_Z1*_42._52;const _a2=~~_92;const _b2=_92-_a2;let _c2=_a2;let _d2=_c2+1;if(_c2>=_42._52){_c2-=_42._52;}if(_d2>=_42._52){_d2-=_42._52;}const _e2=this.data[_c2];const _f2=this.data[_d2];return _e2+(_f2-_e2)*_b2;};;_g2._h2=[];_g2._i2=!1;_g2._j2=0.0;_g2._w1=20.0;function _g2(){this._k2=48000;this.shape=_Q1._R1._U1;this.freq=1.0;this._l2=0.0;this._62=0.0;this._m2=0.0;if(_g2._i2==true){return;}for(let _L=0;_L<_Q1._R1._X1;++_L){_g2._h2[_L]=new _42(_Q1._32[_L]);}_g2._i2=true;}_g2._n2=function(){
return(_g2._i2==!0);};_g2.prototype._o2=function(_p2){this._k2=_p2;this._q2();};;_g2.prototype._r2=function(_B1){_B1=Math.max(_g2._j2,_B1);_B1=Math.min(_B1,_g2._w1);this.freq=_B1;this._q2();};;_g2.prototype._s2=function(_t2){_t2=Math.max(0.0,_t2);_t2=Math.min(_t2,1.0);const _u2=_t2-this._m2;this._m2=_t2;this._l2+=_u2;while(this._l2>=1.0){this._l2-=1.0;}while(this._l2<0.0){this._l2+=1.0;}};;_g2.prototype._v2=function(_w2){_w2=Math.max(0,_w2);_w2=Math.min(_w2,_Q1._R1._X1-1);this.shape=_w2;};;_g2.prototype._82=function(){
const _x2=_g2._h2[this.shape]._82(this._l2);this._l2+=this._62;while(this._l2>=1.0){this._l2-=1.0;}return _x2;};;_g2.prototype._q2=function(){this._62=this.freq/this._k2;};;class _y2 extends AudioWorkletProcessor{static _z2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_y2._z2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0}
,{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];const _A2=(_y2._z2*sampleRate)+1;this.buffer=new Array(_D);this._B2=new Uint32Array(_D);for(let _K=0;_K<_D;++_K)this.buffer[_K]=new Float32Array(_A2);}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _K=0;_K<input.length;
++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){_Q[_R]=_P[_R];const _C2=(time[_R]!==undefined)?time[_R]:time[0];const _D2=this._82(_K,_C2);const _z1=(feedback[_R]!==undefined)?feedback[_R]:feedback[0];const _E2=_P[_R]+(_D2*_z1);this.write(_K,_E2);const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0.0){continue;}const _V=(mix[_R]!==undefined)?mix[_R]:mix[0];_Q[_R]*=(1-_V);_Q[_R]+=(_D2*_V);}}return this._W;}_82(_F2,_G2){const _H2=_G2*sampleRate;let _c2=(this._B2[_F2]-~~_H2);
let _d2=(_c2-1);while(_c2<0)_c2+=this.buffer[_F2].length;while(_d2<0)_d2+=this.buffer[_F2].length;const _I2=_H2-~~_H2;const _e2=this.buffer[_F2][_c2];const _f2=this.buffer[_F2][_d2];return _e2+(_f2-_e2)*_I2;}write(_F2,_k){++this._B2[_F2];this._B2[_F2]%=this.buffer[_F2].length;this.buffer[_F2][this._B2[_F2]]=_k;}}registerProcessor("delay-processor",_y2);AudioWorkletProcessor.prototype._C=function(){this._W=true;this.port.onmessage=(_J2)=>{if(_J2.data==="kill")this._W=false;};};;class _K2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._C();}process(_N,_O,parameters){const input=_N[0];const bypass=parameters.bypass;for(let _K=0;_K<input.length;++_K){const _P=input[_K];for(let _R=0;_R<_P.length;++_R){const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_O[_U][_K][_R]=_P[_R];}}return this._W;}}class _L2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",
defaultValue:1,minValue:0}];}constructor(){super();this._C();}process(_N,_O,parameters){const _51=_N[0];const _61=_N[1];const output=_O[0];const gain=parameters.gain;for(let _K=0;_K<_61.length;++_K){const _P=_61[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R)_Q[_R]=_P[_R];}for(let _K=0;_K<_51.length;++_K){const _P=_51[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];_Q[_R]+=_P[_R]*_A1;}}return this._W;}}registerProcessor("audio-bus-input",_K2);registerProcessor("audio-bus-output",
_L2);class _M2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _N2=[undefined,undefined,
2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._O2=new Float32Array(_D);this._P2=new Uint32Array(_D);}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){_Q[_R]=_P[_R];
if(this._P2[_K]===0)this._O2[_K]=_P[_R];const _z1=(factor[_R]!==undefined)?factor[_R]:factor[0];++this._P2[_K];this._P2[_K]%=_z1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0.0){continue;}let _T=this._O2[_K];const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];_T*=_A1;_T=Math.max(Math.min(_T,1.0),-1.0);const _Q2=(resolution[_R]!==undefined)?resolution[_R]:resolution[0];const max=(_T>0.0)?_M2._N2[_Q2]-1:_M2._N2[_Q2];_T=Math.round(_T*max)/max;const _V=(mix[_R]!==undefined)?mix[_R]:mix[0];_Q[_R]*=(1.0-_V);
_Q[_R]+=(_T*_V);}}return this._W;}}registerProcessor("bitcrusher-processor",_M2);class _R2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:4}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];this._S2=new Array(_D).fill(1.0);this._T2=new Array(_D).fill(0.0);this._U2=new Array(_D).fill(_Q1._R1._S1);this._V2=new Array(_D);for(let _K=0;_K<_D;++_K){this._V2[_K]=new _g2();this._V2[_K]._o2(sampleRate);this._V2[_K]._r2(this._S2[_K]);this._V2[_K]._v2(this._U2[_K]);if(_K%2===1){this._V2[_K]._s2(this._T2[_K]);}}}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;
const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _K=0;_K<input.length;++_K){const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){_Q[_R]=_P[_R];const _Q2=(rate[_R]!==undefined)?rate[_R]:rate[0];const _W2=(offset[_R]!==undefined)?offset[_R]:offset[0];const _X2=(shape[_R]!==undefined)?shape[_R]:shape[0];this._Y2(_K,_Q2,_W2,_X2);const _Z2=this._V2[_K]._82();const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0.0){
continue;}const _L=(intensity[_R]!==undefined)?intensity[_R]:intensity[0];const out=_P[_R]*_Z2*_L;_Q[_R]*=(1.0-_L);_Q[_R]+=out;}}return this._W;}_Y2(_F2,__2,_t2,_w2){if(__2!==this._S2[_F2]){this._V2[_F2]._r2(__2);this._S2[_F2]=__2;}if(_t2!==this._T2[_F2]){if(_F2%2===1){this._V2[_F2]._s2(_t2);}this._T2[_F2]=_t2;}if(_w2!==this._U2[_F2]){this._V2[_F2]._v2(_w2);this._U2[_F2]=_w2;}}}registerProcessor("tremolo-processor",_R2);class _03{constructor(_G2=1e-3){this.setTime(_G2);}setTime(_G2){this._13=Math.exp(-1/(_G2*sampleRate));
}process(_23,_33){return _23+this._13*(_33-_23);}}class _43{constructor(_53,_63){this._73=new _03(_53);this._83=new _03(_63);this._93=_53;this._a3=_63;}_b3(_G2){if(_G2===this._93)return;this._73.setTime(_G2);this._93=_G2;}_c3(_G2){if(_G2===this._a3)return;this._83.setTime(_G2);this._a3=_G2;}process(_23,_33){if(_23>_33)return this._73.process(_23,_33);else return this._83.process(_23,_33);}}class _d3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_e3){
super();this._C();const _73=_d3.parameterDescriptors.find(_f3=>_f3.name==="attack");const _83=_d3.parameterDescriptors.find(_f3=>_f3.name==="release");this._g3=new _43(_73.defaultValue,_83.defaultValue);this._h3=0;}process(_i3,_j3,_k3){const input=_i3[0];const output=_j3[0];const bypass=_k3.bypass;const ingain=_k3.ingain;const outgain=_k3.outgain;const threshold=_k3.threshold;const ratio=_k3.ratio;const attack=_k3.attack;const release=_k3.release;if(input.length===0)return this._W;for(let _R=0;_R<input[0].length;
++_R){let _l3=input.map(_m3=>_m3[_R]);output.forEach((_m3,_n3)=>{_m3[_R]=_l3[_n3];});const _o3=(ingain[_R]!==undefined)?ingain[_R]:ingain[0];_l3=_l3.map(_p3=>_p3*=_o3);const rect=_l3.map(_p3=>Math.abs(_p3));const max=Math.max(...rect);const _q3=_r3(max);const _C2=(threshold[_R]!==undefined)?threshold[_R]:threshold[0];const _s3=_r3(_C2);const _t3=Math.max(0,_q3-_s3);const _73=(attack[_R]!==undefined)?attack[_R]:attack[0];const _83=(release[_R]!==undefined)?release[_R]:release[0];this._g3._b3(_73);this._g3._c3(_83);
this._h3=this._g3.process(_t3,this._h3);const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];if(_U>0)continue;const _Q2=(ratio[_R]!==undefined)?ratio[_R]:ratio[0];const _u3=(this._h3/_Q2)-this._h3;const _A1=_v3(_u3);_l3=_l3.map(_p3=>_p3*=_A1);const _w3=(outgain[_R]!==undefined)?outgain[_R]:outgain[0];_l3=_l3.map(_p3=>_p3*=_w3);output.forEach((_m3,_n3)=>{_m3[_R]=_l3[_n3];});}return this._W;}}function _r3(_x3){return 20*Math.log10(_x3);}function _v3(_x3){return Math.pow(10,_x3/20);}registerProcessor("compressor-processor",
_d3);class _y3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _w1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_w1),minValue:10.0,maxValue:_w1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_B){super();this._C();const _D=_B.outputChannelCount[0];
this._b1=0;this._c1=0;this._d1=0;this._e1=0;this._f1=0;this._g1=new Float32Array(_D);this._h1=new Float32Array(_D);this._i1=new Float32Array(_D);this._j1=new Float32Array(_D);this._x1=-1;this._l1=-1;this._y1=-1;}process(_N,_O,parameters){const input=_N[0];const output=_O[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m1=(freq.length===1&&q.length===1&&gain.length===1);if(_m1)this._n1(freq[0],q[0],gain[0]);for(let _K=0;_K<input.length;++_K){
const _P=input[_K];const _Q=output[_K];for(let _R=0;_R<_P.length;++_R){if(_m1===!1){const _z1=(freq[_R]!==undefined)?freq[_R]:freq[0];const _o1=(q[_R]!==undefined)?q[_R]:q[0];const _A1=(gain[_R]!==undefined)?gain[_R]:gain[0];this._n1(_z1,_o1,_A1);}const _p1=this._d1*_P[_R]+this._e1*this._g1[_K]+this._f1*this._h1[_K]-this._b1*this._i1[_K]-this._c1*this._j1[_K];this._h1[_K]=this._g1[_K];this._g1[_K]=_P[_R];this._j1[_K]=this._i1[_K];this._i1[_K]=_p1;const _U=(bypass[_R]!==undefined)?bypass[_R]:bypass[0];_Q[_R]=(_U>0)?_P[_R]:_p1;
}}return this._W;}_n1(_B1,_r1,_C1){if(_B1===this._x1&&_r1===this._l1&&_C1===this._y1)return;const _s1=2*Math.PI*_B1/sampleRate;const _t1=Math.cos(_s1);const _D1=Math.sqrt(_C1);const _J1=_D1+1;const _K1=_D1-1;const _L1=_J1*_t1;const _M1=_K1*_t1;const _N1=_J1-_M1;const _O1=_J1+_M1;const alpha=Math.sin(_s1)/(2*_r1);const _P1=(2*Math.sqrt(_D1)*alpha);const _u1=_O1+_P1;const _b1=-2*(_K1+_L1);const _c1=_O1-_P1;const _d1=_D1*(_N1+_P1);const _e1=2*_D1*(_K1-_L1);const _f1=_D1*(_N1-_P1);this._b1=_b1/_u1;this._c1=_c1/_u1;this._d1=_d1/_u1;
this._e1=_e1/_u1;this._f1=_f1/_u1;this._x1=_B1;this._l1=_r1;this._y1=_C1;}}registerProcessor("lo-shelf-processor",_y3);