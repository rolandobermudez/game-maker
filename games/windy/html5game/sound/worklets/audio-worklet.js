class _n{constructor(_o){this._p=0;this._q=0;this.feedback=0;this._r=0;this.buffer=new Float32Array(_o);this._s=0;}process(_t){const out=this.buffer[this._s];this._r=(this._r*this._p)+(out*this._q);this.buffer[this._s]=_t+(this._r*this.feedback);++this._s;this._s%=this.buffer.length;return out;}_u(_v){this.feedback=Math.min(Math.max(0,_v),1);}_w(_x){this._p=Math.min(Math.max(0,_x),1);this._q=1-this._p;}}class _y{constructor(_o){this.feedback=0;this.buffer=new Float32Array(_o);this._s=0;}process(_t){const out=this.buffer[this._s];
this.buffer[this._s]=_t+(out*this.feedback);++this._s;this._s%=this.buffer.length;return(out-_t);}_u(_v){this.feedback=Math.min(Math.max(0,_v),1);}}class _z extends AudioWorkletProcessor{static _A=8;static _B=4;static _C=0.015;static _D=0.4;static _E=0.28;static _F=0.7;static _G=[1116,1188,1277,1356,1422,1491,1557,1617];static _H=[1139,1211,1300,1379,1445,1514,1580,1640];static _I=[556,441,341,225];static _J=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._N=-1;this._O=-1;this._P=new Array(_M);this._Q=new Array(_M);const _R=[_z._G,_z._H];const _S=[_z._I,_z._J];for(let _T=0;_T<_M;++_T){this._P[_T]=new Array(_z._A);this._Q[_T]=new Array(_z._B);
for(let _U=0;_U<_z._A;++_U)this._P[_T][_U]=new _n(_R[_T%_R.length][_U]);for(let _U=0;_U<_z._B;++_U)this._Q[_T][_U]=new _y(_S[_T%_S.length][_U]);}this._V(0.5);this._w(0.5);for(let _T=0;_T<_M;++_T)for(let _U=0;_U<_z._B;++_U)this._Q[_T][_U]._u(0.5);}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;
++__){const __=(size[__]!==undefined)?size[__]:size[0];const _01=(damp[__]!==undefined)?damp[__]:damp[0];this._V(__);this._w(_01);_Z[__]=_Y[__];let out=0;const _11=_Y[__]*_z._C;for(let _U=0;_U<_z._A;++_U)out+=this._P[_T][_U].process(_11);for(let _U=0;_U<_z._B;++_U)out=this._Q[_T][_U].process(out);const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0.0){continue;}const _31=(mix[__]!==undefined)?mix[__]:mix[0];_Z[__]*=(1-_31);_Z[__]+=(out*_31);}}return this._41;}_V(_o){if(_o===this._N)return;const size=(_o*_z._E)+_z._F;
for(let _T=0;_T<this._P.length;++_T)for(let _U=0;_U<_z._A;++_U)this._P[_T][_U]._u(size);this._N=_o;}_w(_x){if(_x===this._O)return;const damp=_x*_z._D;for(let _T=0;_T<this._P.length;++_T)for(let _U=0;_U<_z._A;++_U)this._P[_T][_U]._w(damp);this._O=_x;}}registerProcessor("reverb1-processor",_z);class _51 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._L();}process(_61,_71,_81){const input=_61[0];const _91=_71[0];const _a1=_71[1];for(let _T=0;_T<input.length;++_T){
const _Y=input[_T];const _b1=_91[_T];const _c1=_a1[_T];for(let __=0;__<_Y.length;++__){_b1[__]=_Y[__];_c1[__]=_Y[__];}}return this._41;}}class _d1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._L();}process(_61,_71,_81){const _e1=_61[0];const _f1=_61[1];const output=_71[0];const bypass=_81.bypass;for(let _T=0;_T<_f1.length;++_T){const _g1=_e1[_T];const _h1=_f1[_T];const _Z=output[_T];
for(let __=0;__<_g1.length;++__){const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0){_Z[__]=_h1[__];}else {_Z[__]=_g1[__];}}}return this._41;}}registerProcessor("eq-input",_51);registerProcessor("eq-output",_d1);class _i1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _j1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_j1),minValue:10.0,
maxValue:_j1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._k1=0;this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=new Float32Array(_M);this._q1=new Float32Array(_M);this._r1=new Float32Array(_M);this._s1=new Float32Array(_M);this._t1=-1;this._u1=-1;}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _v1=(cutoff.length===1&&q.length===1);if(_v1)this._w1(cutoff[0],q[0]);for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){if(_v1===!1){const _T=(cutoff[__]!==undefined)?cutoff[__]:cutoff[0];const _x1=(q[__]!==undefined)?q[__]:q[0];this._w1(_T,_x1);}const _y1=this._m1*_Y[__]+this._n1*this._p1[_T]+this._o1*this._q1[_T]-this._k1*this._r1[_T]-this._l1*this._s1[_T];this._q1[_T]=this._p1[_T];this._p1[_T]=_Y[__];this._s1[_T]=this._r1[_T];this._r1[_T]=_y1;
const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_Z[__]=(_21>0)?_Y[__]:_y1;}}return this._41;}_w1(_z1,_A1){if(_z1===this._t1&&_A1===this._u1)return;const _B1=2*Math.PI*_z1/sampleRate;const alpha=Math.sin(_B1)/(2*_A1);const _C1=Math.cos(_B1);const _D1=1+alpha;const _k1=-2*_C1;const _l1=1-alpha;const _m1=(1-_C1)/2;const _n1=1-_C1;const _o1=(1-_C1)/2;this._k1=_k1/_D1;this._l1=_l1/_D1;this._m1=_m1/_D1;this._n1=_n1/_D1;this._o1=_o1/_D1;this._t1=_z1;this._u1=_A1;}}registerProcessor("lpf2-processor",_i1);class _E1 extends AudioWorkletProcessor{
static get parameterDescriptors(){const _F1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_F1),minValue:10.0,maxValue:_F1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._k1=0;this._l1=0;this._m1=0;
this._n1=0;this._o1=0;this._p1=new Float32Array(_M);this._q1=new Float32Array(_M);this._r1=new Float32Array(_M);this._s1=new Float32Array(_M);this._G1=-1;this._u1=-1;this._H1=-1;}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _v1=(freq.length===1&&q.length===1&&gain.length===1);if(_v1)this._w1(freq[0],q[0],gain[0]);for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];
for(let __=0;__<_Y.length;++__){if(_v1===!1){const _I1=(freq[__]!==undefined)?freq[__]:freq[0];const _x1=(q[__]!==undefined)?q[__]:q[0];const _J1=(gain[__]!==undefined)?gain[__]:gain[0];this._w1(_I1,_x1,_J1);}const _y1=this._m1*_Y[__]+this._n1*this._p1[_T]+this._o1*this._q1[_T]-this._k1*this._r1[_T]-this._l1*this._s1[_T];this._q1[_T]=this._p1[_T];this._p1[_T]=_Y[__];this._s1[_T]=this._r1[_T];this._r1[_T]=_y1;const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_Z[__]=(_21>0)?_Y[__]:_y1;}}return this._41;
}_w1(_K1,_A1,_L1){if(_K1===this._G1&&_A1===this._u1&&_L1===this._H1)return;const _B1=2*Math.PI*_K1/sampleRate;const _C1=Math.cos(_B1);const _M1=Math.sqrt(_L1);const alpha=Math.sin(_B1)/(2*_A1);const _N1=alpha/_M1;const _O1=alpha*_M1;const _D1=1+_N1;const _k1=-2*_C1;const _l1=1-_N1;const _m1=1+_O1;const _n1=_k1;const _o1=1-_O1;this._k1=_k1/_D1;this._l1=_l1/_D1;this._m1=_m1/_D1;this._n1=_n1/_D1;this._o1=_o1/_D1;this._G1=_K1;this._u1=_A1;this._H1=_L1;}}registerProcessor("peak-eq-processor",_E1);class _P1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._L();}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){_Z[__]=_Y[__];const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];
if(_21>0.0){continue;}const _J1=(gain[__]!==undefined)?gain[__]:gain[0];_Z[__]*=_J1;}}return this._41;}}registerProcessor("gain-processor",_P1);class _Q1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _j1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_j1),minValue:10.0,maxValue:_j1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._k1=0;this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=new Float32Array(_M);this._q1=new Float32Array(_M);this._r1=new Float32Array(_M);this._s1=new Float32Array(_M);this._t1=-1;this._u1=-1;}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _v1=(cutoff.length===1&&q.length===1);if(_v1)this._w1(cutoff[0],q[0]);for(let _T=0;
_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){if(_v1===!1){const _T=(cutoff[__]!==undefined)?cutoff[__]:cutoff[0];const _x1=(q[__]!==undefined)?q[__]:q[0];this._w1(_T,_x1);}const _y1=this._m1*_Y[__]+this._n1*this._p1[_T]+this._o1*this._q1[_T]-this._k1*this._r1[_T]-this._l1*this._s1[_T];this._q1[_T]=this._p1[_T];this._p1[_T]=_Y[__];this._s1[_T]=this._r1[_T];this._r1[_T]=_y1;const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_Z[__]=(_21>0)?_Y[__]:_y1;}}
return this._41;}_w1(_z1,_A1){if(_z1===this._t1&&_A1===this._u1)return;const _B1=2*Math.PI*_z1/sampleRate;const alpha=Math.sin(_B1)/(2*_A1);const _C1=Math.cos(_B1);const _D1=1+alpha;const _k1=-2*_C1;const _l1=1-alpha;const _m1=(1+_C1)/2;const _n1=-1-_C1;const _o1=(1+_C1)/2;this._k1=_k1/_D1;this._l1=_l1/_D1;this._m1=_m1/_D1;this._n1=_n1/_D1;this._o1=_o1/_D1;this._t1=_z1;this._u1=_A1;}}registerProcessor("hpf2-processor",_Q1);class _R1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F1=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_F1),minValue:10.0,maxValue:_F1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._k1=0;this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=new Float32Array(_M);this._q1=new Float32Array(_M);
this._r1=new Float32Array(_M);this._s1=new Float32Array(_M);this._G1=-1;this._u1=-1;this._H1=-1;}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _v1=(freq.length===1&&q.length===1&&gain.length===1);if(_v1)this._w1(freq[0],q[0],gain[0]);for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){if(_v1===!1){const _I1=(freq[__]!==undefined)?freq[__]:freq[0];
const _x1=(q[__]!==undefined)?q[__]:q[0];const _J1=(gain[__]!==undefined)?gain[__]:gain[0];this._w1(_I1,_x1,_J1);}const _y1=this._m1*_Y[__]+this._n1*this._p1[_T]+this._o1*this._q1[_T]-this._k1*this._r1[_T]-this._l1*this._s1[_T];this._q1[_T]=this._p1[_T];this._p1[_T]=_Y[__];this._s1[_T]=this._r1[_T];this._r1[_T]=_y1;const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_Z[__]=(_21>0)?_Y[__]:_y1;}}return this._41;}_w1(_K1,_A1,_L1){if(_K1===this._G1&&_A1===this._u1&&_L1===this._H1)return;const _B1=2*Math.PI*_K1/sampleRate;
const _C1=Math.cos(_B1);const _M1=Math.sqrt(_L1);const _S1=_M1+1;const _T1=_M1-1;const _U1=_S1*_C1;const _V1=_T1*_C1;const _W1=_S1-_V1;const _X1=_S1+_V1;const alpha=Math.sin(_B1)/(2*_A1);const _Y1=(2*Math.sqrt(_M1)*alpha);const _D1=_W1+_Y1;const _k1=2*(_T1-_U1);const _l1=_W1-_Y1;const _m1=_M1*(_X1+_Y1);const _n1=-2*_M1*(_T1+_U1);const _o1=_M1*(_X1-_Y1);this._k1=_k1/_D1;this._l1=_l1/_D1;this._m1=_m1/_D1;this._n1=_n1/_D1;this._o1=_o1/_D1;this._G1=_K1;this._u1=_A1;this._H1=_L1;}}registerProcessor("hi-shelf-processor",
_R1);function _Z1(){}_Z1.__1={_02:0,_12:1,_22:2,_32:3,_42:4,_52:5};_Z1._62=function(_72){return 1.0-_72;};_Z1._82=function(_72){return _72;};_Z1._92=function(_72){return 0.5*(Math.sin((_72*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_Z1._a2=function(_72){if(_72<0.5){return 0.0;}return 1.0;};_Z1._b2=function(_72){if(_72<0.5){return 2.0*_72;}return 2.0-(2.0*_72);};_Z1._c2=[_Z1._62,_Z1._82,_Z1._92,_Z1._a2,_Z1._b2];_d2._e2=512;_d2._f2=1.0/_d2._e2;function _d2(_g2){this.data=new Float32Array(_d2._e2);for(let _U=0;_U<_d2._e2;
++_U){this.data[_U]=_g2(_U*_d2._f2);}}_d2.prototype._h2=function(_72){_72=Math.max(0.0,_72);_72=Math.min(_72,1.0);const _i2=_72*_d2._e2;const _j2=~~_i2;const _k2=_i2-_j2;let _l2=_j2;let _m2=_l2+1;if(_l2>=_d2._e2){_l2-=_d2._e2;}if(_m2>=_d2._e2){_m2-=_d2._e2;}const _n2=this.data[_l2];const _o2=this.data[_m2];return _n2+(_o2-_n2)*_k2;};;_p2._q2=[];_p2._r2=!1;_p2._s2=0.0;_p2._F1=20.0;function _p2(){this._t2=48000;this.shape=_Z1.__1._22;this.freq=1.0;this._u2=0.0;this._f2=0.0;this._v2=0.0;if(_p2._r2==true){return;
}for(let _U=0;_U<_Z1.__1._52;++_U){_p2._q2[_U]=new _d2(_Z1._c2[_U]);}_p2._r2=true;}_p2._w2=function(){return(_p2._r2==!0);};_p2.prototype._x2=function(_y2){this._t2=_y2;this._z2();};;_p2.prototype._A2=function(_K1){_K1=Math.max(_p2._s2,_K1);_K1=Math.min(_K1,_p2._F1);this.freq=_K1;this._z2();};;_p2.prototype._B2=function(_C2){_C2=Math.max(0.0,_C2);_C2=Math.min(_C2,1.0);const _D2=_C2-this._v2;this._v2=_C2;this._u2+=_D2;while(this._u2>=1.0){this._u2-=1.0;}while(this._u2<0.0){this._u2+=1.0;}};;_p2.prototype._E2=function(_F2){
_F2=Math.max(0,_F2);_F2=Math.min(_F2,_Z1.__1._52-1);this.shape=_F2;};;_p2.prototype._h2=function(){const _G2=_p2._q2[this.shape]._h2(this._u2);this._u2+=this._f2;while(this._u2>=1.0){this._u2-=1.0;}return _G2;};;_p2.prototype._z2=function(){this._f2=this.freq/this._t2;};;class _H2 extends AudioWorkletProcessor{static _I2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,
maxValue:_H2._I2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];const _J2=(_H2._I2*sampleRate)+1;this.buffer=new Array(_M);this._K2=new Uint32Array(_M);for(let _T=0;_T<_M;++_T)this.buffer[_T]=new Float32Array(_J2);}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const time=parameters.time;
const feedback=parameters.feedback;const mix=parameters.mix;for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){_Z[__]=_Y[__];const _L2=(time[__]!==undefined)?time[__]:time[0];const _M2=this._h2(_T,_L2);const _I1=(feedback[__]!==undefined)?feedback[__]:feedback[0];const _N2=_Y[__]+(_M2*_I1);this.write(_T,_N2);const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0.0){continue;}const _31=(mix[__]!==undefined)?mix[__]:mix[0];_Z[__]*=(1-_31);_Z[__]+=(_M2*_31);
}}return this._41;}_h2(_O2,_P2){const _Q2=_P2*sampleRate;let _l2=(this._K2[_O2]-~~_Q2);let _m2=(_l2-1);while(_l2<0)_l2+=this.buffer[_O2].length;while(_m2<0)_m2+=this.buffer[_O2].length;const _R2=_Q2-~~_Q2;const _n2=this.buffer[_O2][_l2];const _o2=this.buffer[_O2][_m2];return _n2+(_o2-_n2)*_R2;}write(_O2,_t){++this._K2[_O2];this._K2[_O2]%=this.buffer[_O2].length;this.buffer[_O2][this._K2[_O2]]=_t;}}registerProcessor("delay-processor",_H2);AudioWorkletProcessor.prototype._L=function(){this._41=true;this.port.onmessage=(_S2)=>{
if(_S2.data==="kill")this._41=false;};};;class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._L();}process(_W,_X,parameters){const input=_W[0];const bypass=parameters.bypass;for(let _T=0;_T<input.length;++_T){const _Y=input[_T];for(let __=0;__<_Y.length;++__){const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_X[_21][_T][__]=_Y[__];}}return this._41;}}class _U2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._L();}process(_W,_X,parameters){const _e1=_W[0];const _f1=_W[1];const output=_X[0];const gain=parameters.gain;for(let _T=0;_T<_f1.length;++_T){const _Y=_f1[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__)_Z[__]=_Y[__];}for(let _T=0;_T<_e1.length;++_T){const _Y=_e1[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){const _J1=(gain[__]!==undefined)?gain[__]:gain[0];_Z[__]+=_Y[__]*_J1;
}}return this._41;}}registerProcessor("audio-bus-input",_T2);registerProcessor("audio-bus-output",_U2);class _V2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",
defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _W2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._X2=new Float32Array(_M);this._Y2=new Uint32Array(_M);}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _T=0;_T<input.length;++_T){
const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){_Z[__]=_Y[__];if(this._Y2[_T]===0)this._X2[_T]=_Y[__];const _I1=(factor[__]!==undefined)?factor[__]:factor[0];++this._Y2[_T];this._Y2[_T]%=_I1;const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0.0){continue;}let _11=this._X2[_T];const _J1=(gain[__]!==undefined)?gain[__]:gain[0];_11*=_J1;_11=Math.max(Math.min(_11,1.0),-1.0);const _Z2=(resolution[__]!==undefined)?resolution[__]:resolution[0];const max=(_11>0.0)?_V2._W2[_Z2]-1:_V2._W2[_Z2];
_11=Math.round(_11*max)/max;const _31=(mix[__]!==undefined)?mix[__]:mix[0];_Z[__]*=(1.0-_31);_Z[__]+=(_11*_31);}}return this._41;}}registerProcessor("bitcrusher-processor",_V2);class __2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",
automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._03=new Array(_M).fill(1.0);this._13=new Array(_M).fill(0.0);this._23=new Array(_M).fill(_Z1.__1._02);this._33=new Array(_M);for(let _T=0;_T<_M;++_T){this._33[_T]=new _p2();this._33[_T]._x2(sampleRate);this._33[_T]._A2(this._03[_T]);this._33[_T]._E2(this._23[_T]);if(_T%2===1){this._33[_T]._B2(this._13[_T]);
}}}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){_Z[__]=_Y[__];const _Z2=(rate[__]!==undefined)?rate[__]:rate[0];const _43=(offset[__]!==undefined)?offset[__]:offset[0];const _53=(shape[__]!==undefined)?shape[__]:shape[0];this._63(_T,_Z2,
_43,_53);const _73=this._33[_T]._h2();const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0.0){continue;}const _U=(intensity[__]!==undefined)?intensity[__]:intensity[0];const out=_Y[__]*_73*_U;_Z[__]*=(1.0-_U);_Z[__]+=out;}}return this._41;}_63(_O2,_83,_C2,_F2){if(_83!==this._03[_O2]){this._33[_O2]._A2(_83);this._03[_O2]=_83;}if(_C2!==this._13[_O2]){if(_O2%2===1){this._33[_O2]._B2(_C2);}this._13[_O2]=_C2;}if(_F2!==this._23[_O2]){this._33[_O2]._E2(_F2);this._23[_O2]=_F2;}}}registerProcessor("tremolo-processor",
__2);class _93{constructor(_P2=1e-3){this.setTime(_P2);}setTime(_P2){this._a3=Math.exp(-1/(_P2*sampleRate));}process(_b3,_c3){return _b3+this._a3*(_c3-_b3);}}class _d3{constructor(_e3,_f3){this._g3=new _93(_e3);this._h3=new _93(_f3);this._i3=_e3;this._j3=_f3;}_k3(_P2){if(_P2===this._i3)return;this._g3.setTime(_P2);this._i3=_P2;}_l3(_P2){if(_P2===this._j3)return;this._h3.setTime(_P2);this._j3=_P2;}process(_b3,_c3){if(_b3>_c3)return this._g3.process(_b3,_c3);else return this._h3.process(_b3,_c3);}}class _m3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1}
,{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_n3){super();this._L();const _g3=_m3.parameterDescriptors.find(_o3=>_o3.name==="attack");const _h3=_m3.parameterDescriptors.find(_o3=>_o3.name==="release");this._p3=new _d3(_g3.defaultValue,_h3.defaultValue);this._q3=0;}process(_r3,_s3,_t3){const input=_r3[0];const output=_s3[0];const bypass=_t3.bypass;const ingain=_t3.ingain;const outgain=_t3.outgain;const threshold=_t3.threshold;const ratio=_t3.ratio;const attack=_t3.attack;
const release=_t3.release;if(input.length===0)return this._41;for(let __=0;__<input[0].length;++__){let _u3=input.map(_v3=>_v3[__]);output.forEach((_v3,_w3)=>{_v3[__]=_u3[_w3];});const _x3=(ingain[__]!==undefined)?ingain[__]:ingain[0];_u3=_u3.map(_y3=>_y3*=_x3);const rect=_u3.map(_y3=>Math.abs(_y3));const max=Math.max(...rect);const _z3=_A3(max);const _L2=(threshold[__]!==undefined)?threshold[__]:threshold[0];const _B3=_A3(_L2);const _C3=Math.max(0,_z3-_B3);const _g3=(attack[__]!==undefined)?attack[__]:attack[0];
const _h3=(release[__]!==undefined)?release[__]:release[0];this._p3._k3(_g3);this._p3._l3(_h3);this._q3=this._p3.process(_C3,this._q3);const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];if(_21>0)continue;const _Z2=(ratio[__]!==undefined)?ratio[__]:ratio[0];const _D3=(this._q3/_Z2)-this._q3;const _J1=_E3(_D3);_u3=_u3.map(_y3=>_y3*=_J1);const _F3=(outgain[__]!==undefined)?outgain[__]:outgain[0];_u3=_u3.map(_y3=>_y3*=_F3);output.forEach((_v3,_w3)=>{_v3[__]=_u3[_w3];});}return this._41;}}function _A3(_G3){
return 20*Math.log10(_G3);}function _E3(_G3){return Math.pow(10,_G3/20);}registerProcessor("compressor-processor",_m3);class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_F1),minValue:10.0,maxValue:_F1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",
automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_K){super();this._L();const _M=_K.outputChannelCount[0];this._k1=0;this._l1=0;this._m1=0;this._n1=0;this._o1=0;this._p1=new Float32Array(_M);this._q1=new Float32Array(_M);this._r1=new Float32Array(_M);this._s1=new Float32Array(_M);this._G1=-1;this._u1=-1;this._H1=-1;}process(_W,_X,parameters){const input=_W[0];const output=_X[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _v1=(freq.length===1&&q.length===1&&gain.length===1);
if(_v1)this._w1(freq[0],q[0],gain[0]);for(let _T=0;_T<input.length;++_T){const _Y=input[_T];const _Z=output[_T];for(let __=0;__<_Y.length;++__){if(_v1===!1){const _I1=(freq[__]!==undefined)?freq[__]:freq[0];const _x1=(q[__]!==undefined)?q[__]:q[0];const _J1=(gain[__]!==undefined)?gain[__]:gain[0];this._w1(_I1,_x1,_J1);}const _y1=this._m1*_Y[__]+this._n1*this._p1[_T]+this._o1*this._q1[_T]-this._k1*this._r1[_T]-this._l1*this._s1[_T];this._q1[_T]=this._p1[_T];this._p1[_T]=_Y[__];this._s1[_T]=this._r1[_T];this._r1[_T]=_y1;
const _21=(bypass[__]!==undefined)?bypass[__]:bypass[0];_Z[__]=(_21>0)?_Y[__]:_y1;}}return this._41;}_w1(_K1,_A1,_L1){if(_K1===this._G1&&_A1===this._u1&&_L1===this._H1)return;const _B1=2*Math.PI*_K1/sampleRate;const _C1=Math.cos(_B1);const _M1=Math.sqrt(_L1);const _S1=_M1+1;const _T1=_M1-1;const _U1=_S1*_C1;const _V1=_T1*_C1;const _W1=_S1-_V1;const _X1=_S1+_V1;const alpha=Math.sin(_B1)/(2*_A1);const _Y1=(2*Math.sqrt(_M1)*alpha);const _D1=_X1+_Y1;const _k1=-2*(_T1+_U1);const _l1=_X1-_Y1;const _m1=_M1*(_W1+_Y1);const _n1=2*_M1*(_T1-_U1);
const _o1=_M1*(_W1-_Y1);this._k1=_k1/_D1;this._l1=_l1/_D1;this._m1=_m1/_D1;this._n1=_n1/_D1;this._o1=_o1/_D1;this._G1=_K1;this._u1=_A1;this._H1=_L1;}}registerProcessor("lo-shelf-processor",_H3);