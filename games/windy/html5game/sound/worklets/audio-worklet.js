class _D{constructor(_E){this._F=0;this._G=0;this.feedback=0;this._H=0;this.buffer=new Float32Array(_E);this._I=0;}process(_J){const out=this.buffer[this._I];this._H=(this._H*this._F)+(out*this._G);this.buffer[this._I]=_J+(this._H*this.feedback);++this._I;this._I%=this.buffer.length;return out;}_K(_L){this.feedback=Math.min(Math.max(0,_L),1);}_M(_N){this._F=Math.min(Math.max(0,_N),1);this._G=1-this._F;}}class _O{constructor(_E){this.feedback=0;this.buffer=new Float32Array(_E);this._I=0;}process(_J){const out=this.buffer[this._I];
this.buffer[this._I]=_J+(out*this.feedback);++this._I;this._I%=this.buffer.length;return(out-_J);}_K(_L){this.feedback=Math.min(Math.max(0,_L),1);}}class _P extends AudioWorkletProcessor{static _Q=8;static _R=4;static _S=0.015;static _T=0.4;static _U=0.28;static _V=0.7;static _W=[1116,1188,1277,1356,1422,1491,1557,1617];static _X=[1139,1211,1300,1379,1445,1514,1580,1640];static _Y=[556,441,341,225];static _Z=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._21=-1;this._31=-1;this._41=new Array(_11);this._51=new Array(_11);const _61=[_P._W,_P._X];const _71=[_P._Y,_P._Z];for(let _81=0;_81<_11;++_81){this._41[_81]=new Array(_P._Q);
this._51[_81]=new Array(_P._R);for(let _91=0;_91<_P._Q;++_91)this._41[_81][_91]=new _D(_61[_81%_61.length][_91]);for(let _91=0;_91<_P._R;++_91)this._51[_81][_91]=new _O(_71[_81%_71.length][_91]);}this._a1(0.5);this._M(0.5);for(let _81=0;_81<_11;++_81)for(let _91=0;_91<_P._R;++_91)this._51[_81][_91]._K(0.5);}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _81=0;_81<input.length;
++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){const _f1=(size[_f1]!==undefined)?size[_f1]:size[0];const _g1=(damp[_f1]!==undefined)?damp[_f1]:damp[0];this._a1(_f1);this._M(_g1);_e1[_f1]=_d1[_f1];let out=0;const _h1=_d1[_f1]*_P._S;for(let _91=0;_91<_P._Q;++_91)out+=this._41[_81][_91].process(_h1);for(let _91=0;_91<_P._R;++_91)out=this._51[_81][_91].process(out);const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0.0){continue;}const _j1=(mix[_f1]!==undefined)?mix[_f1]:mix[0];
_e1[_f1]*=(1-_j1);_e1[_f1]+=(out*_j1);}}return this._k1;}_a1(_E){if(_E===this._21)return;const size=(_E*_P._U)+_P._V;for(let _81=0;_81<this._41.length;++_81)for(let _91=0;_91<_P._Q;++_91)this._41[_81][_91]._K(size);this._21=_E;}_M(_N){if(_N===this._31)return;const damp=_N*_P._T;for(let _81=0;_81<this._41.length;++_81)for(let _91=0;_91<_P._Q;++_91)this._41[_81][_91]._M(damp);this._31=_N;}}registerProcessor("reverb1-processor",_P);class _l1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];
}constructor(){super();this._01();}process(_m1,_n1,_o1){const input=_m1[0];const _p1=_n1[0];const _q1=_n1[1];for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _r1=_p1[_81];const _s1=_q1[_81];for(let _f1=0;_f1<_d1.length;++_f1){_r1[_f1]=_d1[_f1];_s1[_f1]=_d1[_f1];}}return this._k1;}}class _t1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._01();}process(_m1,_n1,_o1){const _u1=_m1[0];
const _v1=_m1[1];const output=_n1[0];const bypass=_o1.bypass;for(let _81=0;_81<_v1.length;++_81){const _w1=_u1[_81];const _x1=_v1[_81];const _e1=output[_81];for(let _f1=0;_f1<_w1.length;++_f1){const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0){_e1[_f1]=_x1[_f1];}else {_e1[_f1]=_w1[_f1];}}}return this._k1;}}registerProcessor("eq-input",_l1);registerProcessor("eq-output",_t1);class _y1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _z1=Math.min(sampleRate/2.0,20000.0);return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_z1),minValue:10.0,maxValue:_z1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=0;this._F1=new Float32Array(_11);this._G1=new Float32Array(_11);this._H1=new Float32Array(_11);this._I1=new Float32Array(_11);
this._J1=-1;this._K1=-1;}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _L1=(cutoff.length===1&&q.length===1);if(_L1)this._M1(cutoff[0],q[0]);for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){if(_L1===!1){const _81=(cutoff[_f1]!==undefined)?cutoff[_f1]:cutoff[0];const _N1=(q[_f1]!==undefined)?q[_f1]:q[0];this._M1(_81,_N1);}const _O1=this._C1*_d1[_f1]+this._D1*this._F1[_81]+this._E1*this._G1[_81]-this._A1*this._H1[_81]-this._B1*this._I1[_81];
this._G1[_81]=this._F1[_81];this._F1[_81]=_d1[_f1];this._I1[_81]=this._H1[_81];this._H1[_81]=_O1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_e1[_f1]=(_i1>0)?_d1[_f1]:_O1;}}return this._k1;}_M1(_P1,_Q1){if(_P1===this._J1&&_Q1===this._K1)return;const _R1=2*Math.PI*_P1/sampleRate;const alpha=Math.sin(_R1)/(2*_Q1);const _S1=Math.cos(_R1);const _T1=1+alpha;const _A1=-2*_S1;const _B1=1-alpha;const _C1=(1-_S1)/2;const _D1=1-_S1;const _E1=(1-_S1)/2;this._A1=_A1/_T1;this._B1=_B1/_T1;this._C1=_C1/_T1;
this._D1=_D1/_T1;this._E1=_E1/_T1;this._J1=_P1;this._K1=_Q1;}}registerProcessor("lpf2-processor",_y1);class _U1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_V1),minValue:10.0,maxValue:_V1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=0;this._F1=new Float32Array(_11);this._G1=new Float32Array(_11);this._H1=new Float32Array(_11);this._I1=new Float32Array(_11);this._W1=-1;this._K1=-1;this._X1=-1;}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _L1=(freq.length===1&&q.length===1&&gain.length===1);
if(_L1)this._M1(freq[0],q[0],gain[0]);for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){if(_L1===!1){const _Y1=(freq[_f1]!==undefined)?freq[_f1]:freq[0];const _N1=(q[_f1]!==undefined)?q[_f1]:q[0];const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];this._M1(_Y1,_N1,_Z1);}const _O1=this._C1*_d1[_f1]+this._D1*this._F1[_81]+this._E1*this._G1[_81]-this._A1*this._H1[_81]-this._B1*this._I1[_81];this._G1[_81]=this._F1[_81];this._F1[_81]=_d1[_f1];
this._I1[_81]=this._H1[_81];this._H1[_81]=_O1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_e1[_f1]=(_i1>0)?_d1[_f1]:_O1;}}return this._k1;}_M1(__1,_Q1,_02){if(__1===this._W1&&_Q1===this._K1&&_02===this._X1)return;const _R1=2*Math.PI*__1/sampleRate;const _S1=Math.cos(_R1);const _12=Math.sqrt(_02);const alpha=Math.sin(_R1)/(2*_Q1);const _22=alpha/_12;const _32=alpha*_12;const _T1=1+_22;const _A1=-2*_S1;const _B1=1-_22;const _C1=1+_32;const _D1=_A1;const _E1=1-_32;this._A1=_A1/_T1;this._B1=_B1/_T1;
this._C1=_C1/_T1;this._D1=_D1/_T1;this._E1=_E1/_T1;this._W1=__1;this._K1=_Q1;this._X1=_02;}}registerProcessor("peak-eq-processor",_U1);class _42 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._01();}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const gain=parameters.gain;
for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){_e1[_f1]=_d1[_f1];const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0.0){continue;}const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];_e1[_f1]*=_Z1;}}return this._k1;}}registerProcessor("gain-processor",_42);class _52 extends AudioWorkletProcessor{static get parameterDescriptors(){const _z1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_z1),minValue:10.0,maxValue:_z1},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=0;this._F1=new Float32Array(_11);this._G1=new Float32Array(_11);this._H1=new Float32Array(_11);this._I1=new Float32Array(_11);this._J1=-1;this._K1=-1;}process(_b1,_c1,parameters){
const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _L1=(cutoff.length===1&&q.length===1);if(_L1)this._M1(cutoff[0],q[0]);for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){if(_L1===!1){const _81=(cutoff[_f1]!==undefined)?cutoff[_f1]:cutoff[0];const _N1=(q[_f1]!==undefined)?q[_f1]:q[0];this._M1(_81,_N1);}const _O1=this._C1*_d1[_f1]+this._D1*this._F1[_81]+this._E1*this._G1[_81]-this._A1*this._H1[_81]-this._B1*this._I1[_81];
this._G1[_81]=this._F1[_81];this._F1[_81]=_d1[_f1];this._I1[_81]=this._H1[_81];this._H1[_81]=_O1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_e1[_f1]=(_i1>0)?_d1[_f1]:_O1;}}return this._k1;}_M1(_P1,_Q1){if(_P1===this._J1&&_Q1===this._K1)return;const _R1=2*Math.PI*_P1/sampleRate;const alpha=Math.sin(_R1)/(2*_Q1);const _S1=Math.cos(_R1);const _T1=1+alpha;const _A1=-2*_S1;const _B1=1-alpha;const _C1=(1+_S1)/2;const _D1=-1-_S1;const _E1=(1+_S1)/2;this._A1=_A1/_T1;this._B1=_B1/_T1;this._C1=_C1/_T1;
this._D1=_D1/_T1;this._E1=_E1/_T1;this._J1=_P1;this._K1=_Q1;}}registerProcessor("hpf2-processor",_52);class _62 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_V1),minValue:10.0,maxValue:_V1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",
defaultValue:1e-2,minValue:1e-6}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=0;this._F1=new Float32Array(_11);this._G1=new Float32Array(_11);this._H1=new Float32Array(_11);this._I1=new Float32Array(_11);this._W1=-1;this._K1=-1;this._X1=-1;}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _L1=(freq.length===1&&q.length===1&&gain.length===1);
if(_L1)this._M1(freq[0],q[0],gain[0]);for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){if(_L1===!1){const _Y1=(freq[_f1]!==undefined)?freq[_f1]:freq[0];const _N1=(q[_f1]!==undefined)?q[_f1]:q[0];const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];this._M1(_Y1,_N1,_Z1);}const _O1=this._C1*_d1[_f1]+this._D1*this._F1[_81]+this._E1*this._G1[_81]-this._A1*this._H1[_81]-this._B1*this._I1[_81];this._G1[_81]=this._F1[_81];this._F1[_81]=_d1[_f1];
this._I1[_81]=this._H1[_81];this._H1[_81]=_O1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_e1[_f1]=(_i1>0)?_d1[_f1]:_O1;}}return this._k1;}_M1(__1,_Q1,_02){if(__1===this._W1&&_Q1===this._K1&&_02===this._X1)return;const _R1=2*Math.PI*__1/sampleRate;const _S1=Math.cos(_R1);const _12=Math.sqrt(_02);const _72=_12+1;const _82=_12-1;const _92=_72*_S1;const _a2=_82*_S1;const _b2=_72-_a2;const _c2=_72+_a2;const alpha=Math.sin(_R1)/(2*_Q1);const _d2=(2*Math.sqrt(_12)*alpha);const _T1=_b2+_d2;const _A1=2*(_82-_92);
const _B1=_b2-_d2;const _C1=_12*(_c2+_d2);const _D1=-2*_12*(_82+_92);const _E1=_12*(_c2-_d2);this._A1=_A1/_T1;this._B1=_B1/_T1;this._C1=_C1/_T1;this._D1=_D1/_T1;this._E1=_E1/_T1;this._W1=__1;this._K1=_Q1;this._X1=_02;}}registerProcessor("hi-shelf-processor",_62);function _e2(){}_e2._f2={_g2:0,_h2:1,_i2:2,_j2:3,_k2:4,_l2:5};_e2._m2=function(_n2){return 1.0-_n2;};_e2._o2=function(_n2){return _n2;};_e2._p2=function(_n2){return 0.5*(Math.sin((_n2*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_e2._q2=function(_n2){if(_n2<0.5){
return 0.0;}return 1.0;};_e2._r2=function(_n2){if(_n2<0.5){return 2.0*_n2;}return 2.0-(2.0*_n2);};_e2._s2=[_e2._m2,_e2._o2,_e2._p2,_e2._q2,_e2._r2];_t2._u2=512;_t2._v2=1.0/_t2._u2;function _t2(_w2){this.data=new Float32Array(_t2._u2);for(let _91=0;_91<_t2._u2;++_91){this.data[_91]=_w2(_91*_t2._v2);}}_t2.prototype._x2=function(_n2){_n2=Math.max(0.0,_n2);_n2=Math.min(_n2,1.0);const _y2=_n2*_t2._u2;const _z2=~~_y2;const _A2=_y2-_z2;let _B2=_z2;let _C2=_B2+1;if(_B2>=_t2._u2){_B2-=_t2._u2;}if(_C2>=_t2._u2){_C2-=_t2._u2;
}const _D2=this.data[_B2];const _E2=this.data[_C2];return _D2+(_E2-_D2)*_A2;};;_F2._G2=[];_F2._H2=!1;_F2._I2=0.0;_F2._V1=20.0;function _F2(){this._J2=48000;this.shape=_e2._f2._i2;this.freq=1.0;this._K2=0.0;this._v2=0.0;this._L2=0.0;if(_F2._H2==true){return;}for(let _91=0;_91<_e2._f2._l2;++_91){_F2._G2[_91]=new _t2(_e2._s2[_91]);}_F2._H2=true;}_F2._M2=function(){return(_F2._H2==!0);};_F2.prototype._N2=function(_O2){this._J2=_O2;this._P2();};;_F2.prototype._Q2=function(__1){__1=Math.max(_F2._I2,__1);__1=Math.min(__1,
_F2._V1);this.freq=__1;this._P2();};;_F2.prototype._R2=function(_S2){_S2=Math.max(0.0,_S2);_S2=Math.min(_S2,1.0);const _T2=_S2-this._L2;this._L2=_S2;this._K2+=_T2;while(this._K2>=1.0){this._K2-=1.0;}while(this._K2<0.0){this._K2+=1.0;}};;_F2.prototype._U2=function(_V2){_V2=Math.max(0,_V2);_V2=Math.min(_V2,_e2._f2._l2-1);this.shape=_V2;};;_F2.prototype._x2=function(){const _W2=_F2._G2[this.shape]._x2(this._K2);this._K2+=this._v2;while(this._K2>=1.0){this._K2-=1.0;}return _W2;};;_F2.prototype._P2=function(){
this._v2=this.freq/this._J2;};;class _X2 extends AudioWorkletProcessor{static _Y2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_X2._Y2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];
const _Z2=(_X2._Y2*sampleRate)+1;this.buffer=new Array(_11);this.__2=new Uint32Array(_11);for(let _81=0;_81<_11;++_81)this.buffer[_81]=new Float32Array(_Z2);}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){_e1[_f1]=_d1[_f1];const _03=(time[_f1]!==undefined)?time[_f1]:time[0];
const _13=this._x2(_81,_03);const _Y1=(feedback[_f1]!==undefined)?feedback[_f1]:feedback[0];const _23=_d1[_f1]+(_13*_Y1);this.write(_81,_23);const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0.0){continue;}const _j1=(mix[_f1]!==undefined)?mix[_f1]:mix[0];_e1[_f1]*=(1-_j1);_e1[_f1]+=(_13*_j1);}}return this._k1;}_x2(_33,_43){const _53=_43*sampleRate;let _B2=(this.__2[_33]-~~_53);let _C2=(_B2-1);while(_B2<0)_B2+=this.buffer[_33].length;while(_C2<0)_C2+=this.buffer[_33].length;const _63=_53-~~_53;
const _D2=this.buffer[_33][_B2];const _E2=this.buffer[_33][_C2];return _D2+(_E2-_D2)*_63;}write(_33,_J){++this.__2[_33];this.__2[_33]%=this.buffer[_33].length;this.buffer[_33][this.__2[_33]]=_J;}}registerProcessor("delay-processor",_X2);AudioWorkletProcessor.prototype._01=function(){this._k1=true;this.port.onmessage=(_73)=>{if(_73.data==="kill")this._k1=false;};};;class _83 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,
maxValue:1}];}constructor(){super();this._01();}process(_b1,_c1,parameters){const input=_b1[0];const bypass=parameters.bypass;for(let _81=0;_81<input.length;++_81){const _d1=input[_81];for(let _f1=0;_f1<_d1.length;++_f1){const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_c1[_i1][_81][_f1]=_d1[_f1];}}return this._k1;}}class _93 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._01();}process(_b1,
_c1,parameters){const _u1=_b1[0];const _v1=_b1[1];const output=_c1[0];const gain=parameters.gain;for(let _81=0;_81<_v1.length;++_81){const _d1=_v1[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1)_e1[_f1]=_d1[_f1];}for(let _81=0;_81<_u1.length;++_81){const _d1=_u1[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];_e1[_f1]+=_d1[_f1]*_Z1;}}return this._k1;}}registerProcessor("audio-bus-input",_83);registerProcessor("audio-bus-output",
_93);class _a3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _b3=[undefined,undefined,
2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._c3=new Float32Array(_11);this._d3=new Uint32Array(_11);}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;
++_f1){_e1[_f1]=_d1[_f1];if(this._d3[_81]===0)this._c3[_81]=_d1[_f1];const _Y1=(factor[_f1]!==undefined)?factor[_f1]:factor[0];++this._d3[_81];this._d3[_81]%=_Y1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0.0){continue;}let _h1=this._c3[_81];const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];_h1*=_Z1;_h1=Math.max(Math.min(_h1,1.0),-1.0);const _e3=(resolution[_f1]!==undefined)?resolution[_f1]:resolution[0];const max=(_h1>0.0)?_a3._b3[_e3]-1:_a3._b3[_e3];_h1=Math.round(_h1*max)/max;
const _j1=(mix[_f1]!==undefined)?mix[_f1]:mix[0];_e1[_f1]*=(1.0-_j1);_e1[_f1]+=(_h1*_j1);}}return this._k1;}}registerProcessor("bitcrusher-processor",_a3);class _f3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",
defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._g3=new Array(_11).fill(1.0);this._h3=new Array(_11).fill(0.0);this._i3=new Array(_11).fill(_e2._f2._g2);this._j3=new Array(_11);for(let _81=0;_81<_11;++_81){this._j3[_81]=new _F2();this._j3[_81]._N2(sampleRate);this._j3[_81]._Q2(this._g3[_81]);this._j3[_81]._U2(this._i3[_81]);if(_81%2===1){this._j3[_81]._R2(this._h3[_81]);
}}}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){_e1[_f1]=_d1[_f1];const _e3=(rate[_f1]!==undefined)?rate[_f1]:rate[0];const _k3=(offset[_f1]!==undefined)?offset[_f1]:offset[0];const _l3=(shape[_f1]!==undefined)?shape[_f1]:shape[0];
this._m3(_81,_e3,_k3,_l3);const _n3=this._j3[_81]._x2();const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0.0){continue;}const _91=(intensity[_f1]!==undefined)?intensity[_f1]:intensity[0];const out=_d1[_f1]*_n3*_91;_e1[_f1]*=(1.0-_91);_e1[_f1]+=out;}}return this._k1;}_m3(_33,_o3,_S2,_V2){if(_o3!==this._g3[_33]){this._j3[_33]._Q2(_o3);this._g3[_33]=_o3;}if(_S2!==this._h3[_33]){if(_33%2===1){this._j3[_33]._R2(_S2);}this._h3[_33]=_S2;}if(_V2!==this._i3[_33]){this._j3[_33]._U2(_V2);this._i3[_33]=_V2;
}}}registerProcessor("tremolo-processor",_f3);class _p3{constructor(_43=1e-3){this.setTime(_43);}setTime(_43){this._q3=Math.exp(-1/(_43*sampleRate));}process(_r3,_s3){return _r3+this._q3*(_s3-_r3);}}class _t3{constructor(_u3,_v3){this._w3=new _p3(_u3);this._x3=new _p3(_v3);this._y3=_u3;this._z3=_v3;}_A3(_43){if(_43===this._y3)return;this._w3.setTime(_43);this._y3=_43;}_B3(_43){if(_43===this._z3)return;this._x3.setTime(_43);this._z3=_43;}process(_r3,_s3){if(_r3>_s3)return this._w3.process(_r3,_s3);else return this._x3.process(_r3,
_s3);}}class _C3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",
defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_D3){super();this._01();const _w3=_C3.parameterDescriptors.find(_E3=>_E3.name==="attack");const _x3=_C3.parameterDescriptors.find(_E3=>_E3.name==="release");this._F3=new _t3(_w3.defaultValue,_x3.defaultValue);this._G3=0;}process(_H3,_I3,_J3){const input=_H3[0];const output=_I3[0];const bypass=_J3.bypass;const ingain=_J3.ingain;const outgain=_J3.outgain;const threshold=_J3.threshold;
const ratio=_J3.ratio;const attack=_J3.attack;const release=_J3.release;if(input.length===0)return this._k1;for(let _f1=0;_f1<input[0].length;++_f1){let _K3=input.map(_L3=>_L3[_f1]);output.forEach((_L3,_M3)=>{_L3[_f1]=_K3[_M3];});const _N3=(ingain[_f1]!==undefined)?ingain[_f1]:ingain[0];_K3=_K3.map(_O3=>_O3*=_N3);const rect=_K3.map(_O3=>Math.abs(_O3));const max=Math.max(...rect);const _P3=_Q3(max);const _03=(threshold[_f1]!==undefined)?threshold[_f1]:threshold[0];const _R3=_Q3(_03);const _S3=Math.max(0,_P3-_R3);
const _w3=(attack[_f1]!==undefined)?attack[_f1]:attack[0];const _x3=(release[_f1]!==undefined)?release[_f1]:release[0];this._F3._A3(_w3);this._F3._B3(_x3);this._G3=this._F3.process(_S3,this._G3);const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];if(_i1>0)continue;const _e3=(ratio[_f1]!==undefined)?ratio[_f1]:ratio[0];const _T3=(this._G3/_e3)-this._G3;const _Z1=_U3(_T3);_K3=_K3.map(_O3=>_O3*=_Z1);const _V3=(outgain[_f1]!==undefined)?outgain[_f1]:outgain[0];_K3=_K3.map(_O3=>_O3*=_V3);output.forEach((_L3,
_M3)=>{_L3[_f1]=_K3[_M3];});}return this._k1;}}function _Q3(_W3){return 20*Math.log10(_W3);}function _U3(_W3){return Math.pow(10,_W3/20);}registerProcessor("compressor-processor",_C3);class _X3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_V1),minValue:10.0,maxValue:_V1},{name:"q",automationRate:"a-rate",
defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(__){super();this._01();const _11=__.outputChannelCount[0];this._A1=0;this._B1=0;this._C1=0;this._D1=0;this._E1=0;this._F1=new Float32Array(_11);this._G1=new Float32Array(_11);this._H1=new Float32Array(_11);this._I1=new Float32Array(_11);this._W1=-1;this._K1=-1;this._X1=-1;}process(_b1,_c1,parameters){const input=_b1[0];const output=_c1[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _L1=(freq.length===1&&q.length===1&&gain.length===1);if(_L1)this._M1(freq[0],q[0],gain[0]);for(let _81=0;_81<input.length;++_81){const _d1=input[_81];const _e1=output[_81];for(let _f1=0;_f1<_d1.length;++_f1){if(_L1===!1){const _Y1=(freq[_f1]!==undefined)?freq[_f1]:freq[0];const _N1=(q[_f1]!==undefined)?q[_f1]:q[0];const _Z1=(gain[_f1]!==undefined)?gain[_f1]:gain[0];this._M1(_Y1,_N1,_Z1);}const _O1=this._C1*_d1[_f1]+this._D1*this._F1[_81]+this._E1*this._G1[_81]-this._A1*this._H1[_81]-this._B1*this._I1[_81];
this._G1[_81]=this._F1[_81];this._F1[_81]=_d1[_f1];this._I1[_81]=this._H1[_81];this._H1[_81]=_O1;const _i1=(bypass[_f1]!==undefined)?bypass[_f1]:bypass[0];_e1[_f1]=(_i1>0)?_d1[_f1]:_O1;}}return this._k1;}_M1(__1,_Q1,_02){if(__1===this._W1&&_Q1===this._K1&&_02===this._X1)return;const _R1=2*Math.PI*__1/sampleRate;const _S1=Math.cos(_R1);const _12=Math.sqrt(_02);const _72=_12+1;const _82=_12-1;const _92=_72*_S1;const _a2=_82*_S1;const _b2=_72-_a2;const _c2=_72+_a2;const alpha=Math.sin(_R1)/(2*_Q1);const _d2=(2*Math.sqrt(_12)*alpha);
const _T1=_c2+_d2;const _A1=-2*(_82+_92);const _B1=_c2-_d2;const _C1=_12*(_b2+_d2);const _D1=2*_12*(_82-_92);const _E1=_12*(_b2-_d2);this._A1=_A1/_T1;this._B1=_B1/_T1;this._C1=_C1/_T1;this._D1=_D1/_T1;this._E1=_E1/_T1;this._W1=__1;this._K1=_Q1;this._X1=_02;}}registerProcessor("lo-shelf-processor",_X3);