AudioWorkletProcessor.prototype._l2=function(){this._m2=true;this.port.onmessage=(_n2)=>{if(_n2.data==="kill")this._m2=false;};};class _o2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._l2();}process(_p2,_q2,parameters){const input=_p2[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _r2=input[c];for(let _s2=0;_s2<_r2.length;++_s2){const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];
_q2[_t2][c][_s2]=_r2[_s2];}}return this._m2;}}class _u2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._l2();}process(_p2,_q2,parameters){const _v2=_p2[0];const _w2=_p2[1];const output=_q2[0];const gain=parameters.gain;for(let c=0;c<_w2.length;++c){const _r2=_w2[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2)_x2[_s2]=_r2[_s2];}for(let c=0;c<_v2.length;++c){const _r2=_v2[c];const _x2=output[c];
for(let _s2=0;_s2<_r2.length;++_s2){const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];_x2[_s2]+=_r2[_s2]*_y2;}}return this._m2;}}registerProcessor("audio-bus-input",_o2);registerProcessor("audio-bus-output",_u2);class _z2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _A2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._D2=new Float32Array(_C2);this._E2=new Uint32Array(_C2);}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){_x2[_s2]=_r2[_s2];if(this._E2[c]===0)this._D2[c]=_r2[_s2];const _F2=(factor[_s2]!==undefined)?factor[_s2]:factor[0];++this._E2[c];this._E2[c]%=_F2;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];if(_t2>0.0){continue;}let _G2=this._D2[c];const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];_G2*=_y2;_G2=Math.max(Math.min(_G2,
1.0),-1.0);const _H2=(resolution[_s2]!==undefined)?resolution[_s2]:resolution[0];const max=(_G2>0.0)?_z2._A2[_H2]-1:_z2._A2[_H2];_G2=Math.round(_G2*max)/max;const _I2=(mix[_s2]!==undefined)?mix[_s2]:mix[0];_x2[_s2]*=(1.0-_I2);_x2[_s2]+=(_G2*_I2);}}return this._m2;}}registerProcessor("bitcrusher-processor",_z2);class _J2{constructor(_K2=1e-3){this.setTime(_K2);}setTime(_K2){this._L2=Math.exp(-1/(_K2*sampleRate));}process(_M2,_N2){return _M2+this._L2*(_N2-_M2);}}class _O2{constructor(_P2,_Q2){this._R2=new _J2(_P2);
this._S2=new _J2(_Q2);this._T2=_P2;this._U2=_Q2;}_V2(_K2){if(_K2===this._T2)return;this._R2.setTime(_K2);this._T2=_K2;}_W2(_K2){if(_K2===this._U2)return;this._S2.setTime(_K2);this._U2=_K2;}process(_M2,_N2){if(_M2>_N2)return this._R2.process(_M2,_N2);else return this._S2.process(_M2,_N2);}}class _X2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_Y2){super();this._l2();const _R2=_X2.parameterDescriptors.find(_Z2=>_Z2.name==="attack");const _S2=_X2.parameterDescriptors.find(_Z2=>_Z2.name==="release");
this.__2=new _O2(_R2.defaultValue,_S2.defaultValue);this._03=0;}process(_13,_23,_33){const input=_13[0];const output=_23[0];const bypass=_33.bypass;const ingain=_33.ingain;const outgain=_33.outgain;const threshold=_33.threshold;const ratio=_33.ratio;const attack=_33.attack;const release=_33.release;if(input.length===0)return this._m2;for(let _s2=0;_s2<input[0].length;++_s2){let frame=input.map(_43=>_43[_s2]);output.forEach((_43,_53)=>{_43[_s2]=frame[_53];});const _63=(ingain[_s2]!==undefined)?ingain[_s2]:ingain[0];
frame=frame.map(_73=>_73*=_63);const rect=frame.map(_73=>Math.abs(_73));const max=Math.max(...rect);const _83=_93(max);const _a3=(threshold[_s2]!==undefined)?threshold[_s2]:threshold[0];const _b3=_93(_a3);const _c3=Math.max(0,_83-_b3);const _R2=(attack[_s2]!==undefined)?attack[_s2]:attack[0];const _S2=(release[_s2]!==undefined)?release[_s2]:release[0];this.__2._V2(_R2);this.__2._W2(_S2);this._03=this.__2.process(_c3,this._03);const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];if(_t2>0)continue;const _H2=(ratio[_s2]!==undefined)?ratio[_s2]:ratio[0];
const _d3=(this._03/_H2)-this._03;const _y2=_e3(_d3);frame=frame.map(_73=>_73*=_y2);const _f3=(outgain[_s2]!==undefined)?outgain[_s2]:outgain[0];frame=frame.map(_73=>_73*=_f3);output.forEach((_43,_53)=>{_43[_s2]=frame[_53];});}return this._m2;}}function _93(_g3){return 20*Math.log10(_g3);}function _e3(_g3){return Math.pow(10,_g3/20);}registerProcessor("compressor-processor",_X2);class _h3 extends AudioWorkletProcessor{static _i3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_h3._i3},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];const _j3=(_h3._i3*sampleRate)+1;this.buffer=new Array(_C2);this._k3=new Uint32Array(_C2);for(let c=0;c<_C2;++c)this.buffer[c]=new Float32Array(_j3);
}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){_x2[_s2]=_r2[_s2];const _a3=(time[_s2]!==undefined)?time[_s2]:time[0];const _l3=this._m3(c,_a3);const _F2=(feedback[_s2]!==undefined)?feedback[_s2]:feedback[0];const _n3=_r2[_s2]+(_l3*_F2);this.write(c,_n3);const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];
if(_t2>0.0){continue;}const _I2=(mix[_s2]!==undefined)?mix[_s2]:mix[0];_x2[_s2]*=(1-_I2);_x2[_s2]+=(_l3*_I2);}}return this._m2;}_m3(_o3,_K2){const _p3=_K2*sampleRate;let _q3=(this._k3[_o3]-~~_p3);let _r3=(_q3-1);while(_q3<0)_q3+=this.buffer[_o3].length;while(_r3<0)_r3+=this.buffer[_o3].length;const frac=_p3-~~_p3;const _s3=this.buffer[_o3][_q3];const _t3=this.buffer[_o3][_r3];return _s3+(_t3-_s3)*frac;}write(_o3,_u3){++this._k3[_o3];this._k3[_o3]%=this.buffer[_o3].length;this.buffer[_o3][this._k3[_o3]]=_u3;
}}registerProcessor("delay-processor",_h3);class _v3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._l2();}process(_w3,_x3,_y3){const input=_w3[0];const _z3=_x3[0];const _A3=_x3[1];for(let c=0;c<input.length;++c){const _r2=input[c];const _B3=_z3[c];const _C3=_A3[c];for(let _s2=0;_s2<_r2.length;++_s2){_B3[_s2]=_r2[_s2];_C3[_s2]=_r2[_s2];}}return this._m2;}}class _D3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._l2();}process(_w3,_x3,_y3){const _v2=_w3[0];const _w2=_w3[1];const output=_x3[0];const bypass=_y3.bypass;for(let c=0;c<_w2.length;++c){const _E3=_v2[c];const _F3=_w2[c];const _x2=output[c];for(let _s2=0;_s2<_E3.length;++_s2){const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];if(_t2>0){_x2[_s2]=_F3[_s2];}else {_x2[_s2]=_E3[_s2];}}}return this._m2;}}registerProcessor("eq-input",_v3);registerProcessor("eq-output",_D3);class _G3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._l2();}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){_x2[_s2]=_r2[_s2];const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];
if(_t2>0.0){continue;}const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];_x2[_s2]*=_y2;}}return this._m2;}}registerProcessor("gain-processor",_G3);class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _I3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_I3),minValue:10.0,maxValue:_I3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,
maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._J3=0;this._K3=0;this._L3=0;this._M3=0;this._N3=0;this._O3=new Float32Array(_C2);this._P3=new Float32Array(_C2);this._Q3=new Float32Array(_C2);this._R3=new Float32Array(_C2);this._S3=-1;this._T3=-1;this._U3=-1;}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _V3=(freq.length===1&&q.length===1&&gain.length===1);if(_V3)this._W3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){if(_V3===false){const _F2=(freq[_s2]!==undefined)?freq[_s2]:freq[0];const _X3=(q[_s2]!==undefined)?q[_s2]:q[0];const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];this._W3(_F2,_X3,_y2);}const _Y3=this._L3*_r2[_s2]+this._M3*this._O3[c]+this._N3*this._P3[c]-this._J3*this._Q3[c]-this._K3*this._R3[c];
this._P3[c]=this._O3[c];this._O3[c]=_r2[_s2];this._R3[c]=this._Q3[c];this._Q3[c]=_Y3;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];_x2[_s2]=(_t2>0)?_r2[_s2]:_Y3;}}return this._m2;}_W3(_Z3,__3,_04){if(_Z3===this._S3&&__3===this._T3&&_04===this._U3)return;const _14=2*Math.PI*_Z3/sampleRate;const _24=Math.cos(_14);const _34=Math.sqrt(_04);const _44=_34+1;const _54=_34-1;const _64=_44*_24;const _74=_54*_24;const _84=_44-_74;const _94=_44+_74;const alpha=Math.sin(_14)/(2*__3);const _a4=(2*Math.sqrt(_34)*alpha);
const _b4=_84+_a4;const _J3=2*(_54-_64);const _K3=_84-_a4;const _L3=_34*(_94+_a4);const _M3=-2*_34*(_54+_64);const _N3=_34*(_94-_a4);this._J3=_J3/_b4;this._K3=_K3/_b4;this._L3=_L3/_b4;this._M3=_M3/_b4;this._N3=_N3/_b4;this._S3=_Z3;this._T3=__3;this._U3=_04;}}registerProcessor("hi-shelf-processor",_H3);class _c4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _d4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",
automationRate:"a-rate",defaultValue:Math.min(1500.0,_d4),minValue:10.0,maxValue:_d4},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._J3=0;this._K3=0;this._L3=0;this._M3=0;this._N3=0;this._O3=new Float32Array(_C2);this._P3=new Float32Array(_C2);this._Q3=new Float32Array(_C2);this._R3=new Float32Array(_C2);this._e4=-1;this._T3=-1;}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];
const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _V3=(cutoff.length===1&&q.length===1);if(_V3)this._W3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){if(_V3===false){const c=(cutoff[_s2]!==undefined)?cutoff[_s2]:cutoff[0];const _X3=(q[_s2]!==undefined)?q[_s2]:q[0];this._W3(c,_X3);}const _Y3=this._L3*_r2[_s2]+this._M3*this._O3[c]+this._N3*this._P3[c]-this._J3*this._Q3[c]-this._K3*this._R3[c];this._P3[c]=this._O3[c];
this._O3[c]=_r2[_s2];this._R3[c]=this._Q3[c];this._Q3[c]=_Y3;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];_x2[_s2]=(_t2>0)?_r2[_s2]:_Y3;}}return this._m2;}_W3(_f4,__3){if(_f4===this._e4&&__3===this._T3)return;const _14=2*Math.PI*_f4/sampleRate;const alpha=Math.sin(_14)/(2*__3);const _24=Math.cos(_14);const _b4=1+alpha;const _J3=-2*_24;const _K3=1-alpha;const _L3=(1+_24)/2;const _M3=-1-_24;const _N3=(1+_24)/2;this._J3=_J3/_b4;this._K3=_K3/_b4;this._L3=_L3/_b4;this._M3=_M3/_b4;this._N3=_N3/_b4;this._e4=_f4;
this._T3=__3;}}registerProcessor("hpf2-processor",_c4);class _g4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _I3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_I3),minValue:10.0,maxValue:_I3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}
constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._J3=0;this._K3=0;this._L3=0;this._M3=0;this._N3=0;this._O3=new Float32Array(_C2);this._P3=new Float32Array(_C2);this._Q3=new Float32Array(_C2);this._R3=new Float32Array(_C2);this._S3=-1;this._T3=-1;this._U3=-1;}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V3=(freq.length===1&&q.length===1&&gain.length===1);
if(_V3)this._W3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){if(_V3===false){const _F2=(freq[_s2]!==undefined)?freq[_s2]:freq[0];const _X3=(q[_s2]!==undefined)?q[_s2]:q[0];const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];this._W3(_F2,_X3,_y2);}const _Y3=this._L3*_r2[_s2]+this._M3*this._O3[c]+this._N3*this._P3[c]-this._J3*this._Q3[c]-this._K3*this._R3[c];this._P3[c]=this._O3[c];this._O3[c]=_r2[_s2];this._R3[c]=this._Q3[c];
this._Q3[c]=_Y3;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];_x2[_s2]=(_t2>0)?_r2[_s2]:_Y3;}}return this._m2;}_W3(_Z3,__3,_04){if(_Z3===this._S3&&__3===this._T3&&_04===this._U3)return;const _14=2*Math.PI*_Z3/sampleRate;const _24=Math.cos(_14);const _34=Math.sqrt(_04);const _44=_34+1;const _54=_34-1;const _64=_44*_24;const _74=_54*_24;const _84=_44-_74;const _94=_44+_74;const alpha=Math.sin(_14)/(2*__3);const _a4=(2*Math.sqrt(_34)*alpha);const _b4=_94+_a4;const _J3=-2*(_54+_64);const _K3=_94-_a4;const _L3=_34*(_84+_a4);
const _M3=2*_34*(_54-_64);const _N3=_34*(_84-_a4);this._J3=_J3/_b4;this._K3=_K3/_b4;this._L3=_L3/_b4;this._M3=_M3/_b4;this._N3=_N3/_b4;this._S3=_Z3;this._T3=__3;this._U3=_04;}}registerProcessor("lo-shelf-processor",_g4);class _h4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _d4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_d4),minValue:10.0,maxValue:_d4}
,{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._J3=0;this._K3=0;this._L3=0;this._M3=0;this._N3=0;this._O3=new Float32Array(_C2);this._P3=new Float32Array(_C2);this._Q3=new Float32Array(_C2);this._R3=new Float32Array(_C2);this._e4=-1;this._T3=-1;}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _V3=(cutoff.length===1&&q.length===1);
if(_V3)this._W3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){if(_V3===false){const c=(cutoff[_s2]!==undefined)?cutoff[_s2]:cutoff[0];const _X3=(q[_s2]!==undefined)?q[_s2]:q[0];this._W3(c,_X3);}const _Y3=this._L3*_r2[_s2]+this._M3*this._O3[c]+this._N3*this._P3[c]-this._J3*this._Q3[c]-this._K3*this._R3[c];this._P3[c]=this._O3[c];this._O3[c]=_r2[_s2];this._R3[c]=this._Q3[c];this._Q3[c]=_Y3;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];
_x2[_s2]=(_t2>0)?_r2[_s2]:_Y3;}}return this._m2;}_W3(_f4,__3){if(_f4===this._e4&&__3===this._T3)return;const _14=2*Math.PI*_f4/sampleRate;const alpha=Math.sin(_14)/(2*__3);const _24=Math.cos(_14);const _b4=1+alpha;const _J3=-2*_24;const _K3=1-alpha;const _L3=(1-_24)/2;const _M3=1-_24;const _N3=(1-_24)/2;this._J3=_J3/_b4;this._K3=_K3/_b4;this._L3=_L3/_b4;this._M3=_M3/_b4;this._N3=_N3/_b4;this._e4=_f4;this._T3=__3;}}registerProcessor("lpf2-processor",_h4);class _i4 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _I3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_I3),minValue:10.0,maxValue:_I3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._J3=0;this._K3=0;this._L3=0;this._M3=0;this._N3=0;
this._O3=new Float32Array(_C2);this._P3=new Float32Array(_C2);this._Q3=new Float32Array(_C2);this._R3=new Float32Array(_C2);this._S3=-1;this._T3=-1;this._U3=-1;}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V3=(freq.length===1&&q.length===1&&gain.length===1);if(_V3)this._W3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;
_s2<_r2.length;++_s2){if(_V3===false){const _F2=(freq[_s2]!==undefined)?freq[_s2]:freq[0];const _X3=(q[_s2]!==undefined)?q[_s2]:q[0];const _y2=(gain[_s2]!==undefined)?gain[_s2]:gain[0];this._W3(_F2,_X3,_y2);}const _Y3=this._L3*_r2[_s2]+this._M3*this._O3[c]+this._N3*this._P3[c]-this._J3*this._Q3[c]-this._K3*this._R3[c];this._P3[c]=this._O3[c];this._O3[c]=_r2[_s2];this._R3[c]=this._Q3[c];this._Q3[c]=_Y3;const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];_x2[_s2]=(_t2>0)?_r2[_s2]:_Y3;}}return this._m2;
}_W3(_Z3,__3,_04){if(_Z3===this._S3&&__3===this._T3&&_04===this._U3)return;const _14=2*Math.PI*_Z3/sampleRate;const _24=Math.cos(_14);const _34=Math.sqrt(_04);const alpha=Math.sin(_14)/(2*__3);const _j4=alpha/_34;const _k4=alpha*_34;const _b4=1+_j4;const _J3=-2*_24;const _K3=1-_j4;const _L3=1+_k4;const _M3=_J3;const _N3=1-_k4;this._J3=_J3/_b4;this._K3=_K3/_b4;this._L3=_L3/_b4;this._M3=_M3/_b4;this._N3=_N3/_b4;this._S3=_Z3;this._T3=__3;this._U3=_04;}}registerProcessor("peak-eq-processor",_i4);class _l4{constructor(_m4){
this._n4=0;this._o4=0;this.feedback=0;this._p4=0;this.buffer=new Float32Array(_m4);this._q4=0;}process(_u3){const out=this.buffer[this._q4];this._p4=(this._p4*this._n4)+(out*this._o4);this.buffer[this._q4]=_u3+(this._p4*this.feedback);++this._q4;this._q4%=this.buffer.length;return out;}_r4(_s4){this.feedback=Math.min(Math.max(0,_s4),1);}_t4(_u4){this._n4=Math.min(Math.max(0,_u4),1);this._o4=1-this._n4;}}class _v4{constructor(_m4){this.feedback=0;this.buffer=new Float32Array(_m4);this._q4=0;}process(_u3){
const out=this.buffer[this._q4];this.buffer[this._q4]=_u3+(out*this.feedback);++this._q4;this._q4%=this.buffer.length;return(out-_u3);}_r4(_s4){this.feedback=Math.min(Math.max(0,_s4),1);}}class _w4 extends AudioWorkletProcessor{static _x4=8;static _y4=4;static _z4=0.015;static _A4=0.4;static _B4=0.28;static _C4=0.7;static _D4=[1116,1188,1277,1356,1422,1491,1557,1617];static _E4=[1139,1211,1300,1379,1445,1514,1580,1640];static _F4=[556,441,341,225];static _G4=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._H4=-1;this._I4=-1;this._J4=new Array(_C2);this._K4=new Array(_C2);const _L4=[_w4._D4,_w4._E4];const _M4=[_w4._F4,
_w4._G4];for(let c=0;c<_C2;++c){this._J4[c]=new Array(_w4._x4);this._K4[c]=new Array(_w4._y4);for(let i=0;i<_w4._x4;++i)this._J4[c][i]=new _l4(_L4[c%_L4.length][i]);for(let i=0;i<_w4._y4;++i)this._K4[c][i]=new _v4(_M4[c%_M4.length][i]);}this._N4(0.5);this._t4(0.5);for(let c=0;c<_C2;++c)for(let i=0;i<_w4._y4;++i)this._K4[c][i]._r4(0.5);}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _r2=input[c];const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){const _s2=(size[_s2]!==undefined)?size[_s2]:size[0];const _O4=(damp[_s2]!==undefined)?damp[_s2]:damp[0];this._N4(_s2);this._t4(_O4);_x2[_s2]=_r2[_s2];let out=0;const _G2=_r2[_s2]*_w4._z4;for(let i=0;i<_w4._x4;++i)out+=this._J4[c][i].process(_G2);for(let i=0;i<_w4._y4;++i)out=this._K4[c][i].process(out);const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];if(_t2>0.0){continue;}const _I2=(mix[_s2]!==undefined)?mix[_s2]:mix[0];
_x2[_s2]*=(1-_I2);_x2[_s2]+=(out*_I2);}}return this._m2;}_N4(_m4){if(_m4===this._H4)return;const size=(_m4*_w4._B4)+_w4._C4;for(let c=0;c<this._J4.length;++c)for(let i=0;i<_w4._x4;++i)this._J4[c][i]._r4(size);this._H4=_m4;}_t4(_u4){if(_u4===this._I4)return;const damp=_u4*_w4._A4;for(let c=0;c<this._J4.length;++c)for(let i=0;i<_w4._x4;++i)this._J4[c][i]._t4(damp);this._I4=_u4;}}registerProcessor("reverb1-processor",_w4);class _P4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_B2){super();this._l2();const _C2=_B2.outputChannelCount[0];this._Q4=new Array(_C2).fill(1.0);this._R4=new Array(_C2).fill(0.0);
this._S4=new Array(_C2).fill(_T4._U4._V4);this._W4=new Array(_C2);for(let c=0;c<_C2;++c){this._W4[c]=new _X4();this._W4[c]._Y4(sampleRate);this._W4[c]._Z4(this._Q4[c]);this._W4[c].__4(this._S4[c]);if(c%2===1){this._W4[c]._05(this._R4[c]);}}}process(_p2,_q2,parameters){const input=_p2[0];const output=_q2[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _r2=input[c];
const _x2=output[c];for(let _s2=0;_s2<_r2.length;++_s2){_x2[_s2]=_r2[_s2];const _H2=(rate[_s2]!==undefined)?rate[_s2]:rate[0];const _15=(offset[_s2]!==undefined)?offset[_s2]:offset[0];const _25=(shape[_s2]!==undefined)?shape[_s2]:shape[0];this._35(c,_H2,_15,_25);const _45=this._W4[c]._m3();const _t2=(bypass[_s2]!==undefined)?bypass[_s2]:bypass[0];if(_t2>0.0){continue;}const i=(intensity[_s2]!==undefined)?intensity[_s2]:intensity[0];const out=_r2[_s2]*_45*i;_x2[_s2]*=(1.0-i);_x2[_s2]+=out;}}return this._m2;
}_35(_o3,_55,_65,_75){if(_55!==this._Q4[_o3]){this._W4[_o3]._Z4(_55);this._Q4[_o3]=_55;}if(_65!==this._R4[_o3]){if(_o3%2===1){this._W4[_o3]._05(_65);}this._R4[_o3]=_65;}if(_75!==this._S4[_o3]){this._W4[_o3].__4(_75);this._S4[_o3]=_75;}}}registerProcessor("tremolo-processor",_P4);function _T4(){}_T4._U4={_V4:0,_85:1,_95:2,_a5:3,_b5:4,_c5:5};_T4._d5=function(_e5){return 1.0-_e5;};_T4._f5=function(_e5){return _e5;};_T4._g5=function(_e5){return 0.5*(Math.sin((_e5*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_T4._h5=function(_e5){
if(_e5<0.5){return 0.0;}return 1.0;};_T4._i5=function(_e5){if(_e5<0.5){return 2.0*_e5;}return 2.0-(2.0*_e5);};_T4._j5=[_T4._d5,_T4._f5,_T4._g5,_T4._h5,_T4._i5];_k5._l5=512;_k5._m5=1.0/_k5._l5;function _k5(_n5){this.data=new Float32Array(_k5._l5);for(let i=0;i<_k5._l5;++i){this.data[i]=_n5(i*_k5._m5);}}_k5.prototype._m3=function(_e5){_e5=Math.max(0.0,_e5);_e5=Math.min(_e5,1.0);const _o5=_e5*_k5._l5;const _p5=~~_o5;const _q5=_o5-_p5;let _q3=_p5;let _r3=_q3+1;if(_q3>=_k5._l5){_q3-=_k5._l5;}if(_r3>=_k5._l5){_r3-=_k5._l5;
}const _s3=this.data[_q3];const _t3=this.data[_r3];return _s3+(_t3-_s3)*_q5;};_X4._r5=[];_X4._s5=false;_X4._t5=0.0;_X4._I3=20.0;function _X4(){this._u5=48000;this.shape=_T4._U4._95;this.freq=1.0;this._v5=0.0;this._m5=0.0;this._w5=0.0;if(_X4._s5==true){return;}for(let i=0;i<_T4._U4._c5;++i){_X4._r5[i]=new _k5(_T4._j5[i]);}_X4._s5=true;}_X4._x5=function(){return(_X4._s5==true);};_X4.prototype._Y4=function(_y5){this._u5=_y5;this._z5();};_X4.prototype._Z4=function(_Z3){_Z3=Math.max(_X4._t5,_Z3);_Z3=Math.min(_Z3,
_X4._I3);this.freq=_Z3;this._z5();};_X4.prototype._05=function(_65){_65=Math.max(0.0,_65);_65=Math.min(_65,1.0);const _A5=_65-this._w5;this._w5=_65;this._v5+=_A5;while(this._v5>=1.0){this._v5-=1.0;}while(this._v5<0.0){this._v5+=1.0;}};_X4.prototype.__4=function(_75){_75=Math.max(0,_75);_75=Math.min(_75,_T4._U4._c5-1);this.shape=_75;};_X4.prototype._m3=function(){const result=_X4._r5[this.shape]._m3(this._v5);this._v5+=this._m5;while(this._v5>=1.0){this._v5-=1.0;}return result;};_X4.prototype._z5=function(){
this._m5=this.freq/this._u5;};